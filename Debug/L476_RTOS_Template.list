
L476_RTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f4  080051f4  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080051f4  080051f4  0000706c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080051f4  080051f4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f8  080051f8  000061f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080051fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014510  2000006c  08005268  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001457c  08005268  0000757c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d93d  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cd  00000000  00000000  000149d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00016fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a62  00000000  00000000  00017d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028329  00000000  00000000  000187ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7f5  00000000  00000000  00040b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1c0d  00000000  00000000  00050308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d50  00000000  00000000  00141f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00145ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005088 	.word	0x08005088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005088 	.word	0x08005088

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e58 	.word	0x20012e58

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b092      	sub	sp, #72	@ 0x48
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fa09 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f863 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8b3 	bl	80003dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000276:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <main+0xc0>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a2a      	ldr	r2, [pc, #168]	@ (8000324 <main+0xc0>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000282:	f002 fd8f 	bl	8002da4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000286:	f003 fcd1 	bl	8003c2c <SEGGER_SYSVIEW_Start>

  TaskFunction_t pxTaskCode1 = task1_handler;					// Pointer to the task handler
 800028a:	4b27      	ldr	r3, [pc, #156]	@ (8000328 <main+0xc4>)
 800028c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const char* const pcName1 = "Task-1";							// Descriptive name to the task
 800028e:	4b27      	ldr	r3, [pc, #156]	@ (800032c <main+0xc8>)
 8000290:	63bb      	str	r3, [r7, #56]	@ 0x38
  const configSTACK_DEPTH_TYPE uxStackDepth1 = 200;							// 200*32 bits
 8000292:	23c8      	movs	r3, #200	@ 0xc8
 8000294:	86fb      	strh	r3, [r7, #54]	@ 0x36
  void* const pvParameters1 = "Hello World from Task-1";	// Parameter to be passed
 8000296:	4b26      	ldr	r3, [pc, #152]	@ (8000330 <main+0xcc>)
 8000298:	633b      	str	r3, [r7, #48]	@ 0x30
  UBaseType_t uxPriority1 = 2;
 800029a:	2302      	movs	r3, #2
 800029c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  status = xTaskCreate(pxTaskCode1, pcName1, uxStackDepth1, pvParameters1, uxPriority1, &task1_handle);
 800029e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80002a0:	f107 0308 	add.w	r3, r7, #8
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80002ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80002ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80002b0:	f001 fb79 	bl	80019a6 <xTaskCreate>
 80002b4:	62b8      	str	r0, [r7, #40]	@ 0x28
  configASSERT(status == pdPASS);
 80002b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d00b      	beq.n	80002d4 <main+0x70>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002c0:	f383 8811 	msr	BASEPRI, r3
 80002c4:	f3bf 8f6f 	isb	sy
 80002c8:	f3bf 8f4f 	dsb	sy
 80002cc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <main+0x6c>

  TaskFunction_t pxTaskCode2 = task1_handler;					// Pointer to the task handler
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <main+0xc4>)
 80002d6:	627b      	str	r3, [r7, #36]	@ 0x24
  const char* const pcName2 = "Task-1";							// Descriptive name to the task
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <main+0xc8>)
 80002da:	623b      	str	r3, [r7, #32]
  const configSTACK_DEPTH_TYPE uxStackDepth2 = 200;							// 200*32 bits
 80002dc:	23c8      	movs	r3, #200	@ 0xc8
 80002de:	83fb      	strh	r3, [r7, #30]
  void* const pvParameters2 = "Hello World from Task-2";	// Parameter to be passed
 80002e0:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <main+0xd0>)
 80002e2:	61bb      	str	r3, [r7, #24]
  UBaseType_t uxPriority2 = 2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	617b      	str	r3, [r7, #20]

  status = xTaskCreate(pxTaskCode2, pcName2, uxStackDepth2, pvParameters2, uxPriority2, &task2_handle);
 80002e8:	8bfa      	ldrh	r2, [r7, #30]
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	69bb      	ldr	r3, [r7, #24]
 80002f4:	6a39      	ldr	r1, [r7, #32]
 80002f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80002f8:	f001 fb55 	bl	80019a6 <xTaskCreate>
 80002fc:	62b8      	str	r0, [r7, #40]	@ 0x28
  configASSERT(status == pdPASS);
 80002fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000300:	2b01      	cmp	r3, #1
 8000302:	d00b      	beq.n	800031c <main+0xb8>
        __asm volatile
 8000304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000308:	f383 8811 	msr	BASEPRI, r3
 800030c:	f3bf 8f6f 	isb	sy
 8000310:	f3bf 8f4f 	dsb	sy
 8000314:	60fb      	str	r3, [r7, #12]
    }
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <main+0xb4>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 800031c:	f001 fcce 	bl	8001cbc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0xbc>
 8000324:	e0001000 	.word	0xe0001000
 8000328:	080004cd 	.word	0x080004cd
 800032c:	080050a0 	.word	0x080050a0
 8000330:	080050a8 	.word	0x080050a8
 8000334:	080050c0 	.word	0x080050c0

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b096      	sub	sp, #88	@ 0x58
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2244      	movs	r2, #68	@ 0x44
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f004 fbe6 	bl	8004b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800035a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800035e:	f000 fcad 	bl	8000cbc <HAL_PWREx_ControlVoltageScaling>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000368:	f000 f8b8 	bl	80004dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036c:	2302      	movs	r3, #2
 800036e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000374:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037e:	2302      	movs	r3, #2
 8000380:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000382:	2301      	movs	r3, #1
 8000384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000386:	230a      	movs	r3, #10
 8000388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800038a:	2307      	movs	r3, #7
 800038c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fce4 	bl	8000d68 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003a6:	f000 f899 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2303      	movs	r3, #3
 80003b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003be:	463b      	mov	r3, r7
 80003c0:	2104      	movs	r1, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f8ac 	bl	8001520 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ce:	f000 f885 	bl	80004dc <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3758      	adds	r7, #88	@ 0x58
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	@ 0x28
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b34      	ldr	r3, [pc, #208]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	4a33      	ldr	r2, [pc, #204]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fe:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000402:	f003 0304 	and.w	r3, r3, #4
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800040a:	4b2e      	ldr	r3, [pc, #184]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040e:	4a2d      	ldr	r2, [pc, #180]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000416:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a27      	ldr	r2, [pc, #156]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042e:	4b25      	ldr	r3, [pc, #148]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000440:	f043 0302 	orr.w	r3, r3, #2
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <MX_GPIO_Init+0xe8>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0302 	and.w	r3, r3, #2
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2120      	movs	r1, #32
 8000456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800045a:	f000 fc09 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800045e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000464:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	4814      	ldr	r0, [pc, #80]	@ (80004c8 <MX_GPIO_Init+0xec>)
 8000476:	f000 fa51 	bl	800091c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800047a:	230c      	movs	r3, #12
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800048a:	2307      	movs	r3, #7
 800048c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000498:	f000 fa40 	bl	800091c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800049c:	2320      	movs	r3, #32
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b6:	f000 fa31 	bl	800091c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004ba:	bf00      	nop
 80004bc:	3728      	adds	r7, #40	@ 0x28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800

080004cc <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void* parameters){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char*)parameters);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f004 fa2f 	bl	8004938 <puts>
 80004da:	e7fb      	b.n	80004d4 <task1_handler+0x8>

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <Error_Handler+0x8>

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <HAL_MspInit+0x44>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_MspInit+0x44>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000510:	6593      	str	r3, [r2, #88]	@ 0x58
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800051e:	f002 f8b5 	bl	800268c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <NMI_Handler+0x4>

08000538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <UsageFault_Handler+0x4>

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e00a      	b.n	800058e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000578:	f3af 8000 	nop.w
 800057c:	4601      	mov	r1, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	60ba      	str	r2, [r7, #8]
 8000584:	b2ca      	uxtb	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	dbf0      	blt.n	8000578 <_read+0x12>
  }

  return len;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005c8:	605a      	str	r2, [r3, #4]
  return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_isatty>:

int _isatty(int file)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <SystemInit+0x20>)
 800060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000612:	4a05      	ldr	r2, [pc, #20]	@ (8000628 <SystemInit+0x20>)
 8000614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800062c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000664 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000630:	f7ff ffea 	bl	8000608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	@ (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	@ (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065a:	f004 fa99 	bl	8004b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800065e:	f7ff fe01 	bl	8000264 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000664:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000670:	080051fc 	.word	0x080051fc
  ldr r2, =_sbss
 8000674:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000678:	2001457c 	.word	0x2001457c

0800067c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_2_IRQHandler>
	...

08000680 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_Init+0x3c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <HAL_Init+0x3c>)
 8000690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000694:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 f90c 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069c:	2000      	movs	r0, #0
 800069e:	f000 f80f 	bl	80006c0 <HAL_InitTick>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	e001      	b.n	80006b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006ae:	f7ff ff1b 	bl	80004e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_InitTick+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d023      	beq.n	800071c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <HAL_InitTick+0x70>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HAL_InitTick+0x6c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f909 	bl	8000902 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10f      	bne.n	8000716 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d809      	bhi.n	8000710 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f8e1 	bl	80008ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000708:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <HAL_InitTick+0x74>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e007      	b.n	8000720 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	e004      	b.n	8000720 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e001      	b.n	8000720 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008
 8000730:	20000000 	.word	0x20000000
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return uwTick;
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <HAL_GetTick+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000088 	.word	0x20000088

08000750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800077c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000782:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	60d3      	str	r3, [r2, #12]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800079c:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <__NVIC_GetPriorityGrouping+0x18>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	f003 0307 	and.w	r3, r3, #7
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	@ (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	@ (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	@ 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	@ 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff8e 	bl	80007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff47 	bl	8000750 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff5c 	bl	8000798 <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff8e 	bl	8000808 <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5d 	bl	80007b4 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffb0 	bl	8000870 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092a:	e17f      	b.n	8000c2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 8171 	beq.w	8000c26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	2b01      	cmp	r3, #1
 800094e:	d005      	beq.n	800095c <HAL_GPIO_Init+0x40>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0303 	and.w	r3, r3, #3
 8000958:	2b02      	cmp	r3, #2
 800095a:	d130      	bne.n	80009be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000992:	2201      	movs	r2, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	091b      	lsrs	r3, r3, #4
 80009a8:	f003 0201 	and.w	r2, r3, #1
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d118      	bne.n	80009fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009d0:	2201      	movs	r2, #1
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f003 0201 	and.w	r2, r3, #1
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d017      	beq.n	8000a38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d123      	bne.n	8000a8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	691a      	ldr	r2, [r3, #16]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	08da      	lsrs	r2, r3, #3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3208      	adds	r2, #8
 8000a86:	6939      	ldr	r1, [r7, #16]
 8000a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0203 	and.w	r2, r3, #3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 80ac 	beq.w	8000c26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b5f      	ldr	r3, [pc, #380]	@ (8000c4c <HAL_GPIO_Init+0x330>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	4a5e      	ldr	r2, [pc, #376]	@ (8000c4c <HAL_GPIO_Init+0x330>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ada:	4b5c      	ldr	r3, [pc, #368]	@ (8000c4c <HAL_GPIO_Init+0x330>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8000c50 <HAL_GPIO_Init+0x334>)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	3302      	adds	r3, #2
 8000aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b10:	d025      	beq.n	8000b5e <HAL_GPIO_Init+0x242>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4f      	ldr	r2, [pc, #316]	@ (8000c54 <HAL_GPIO_Init+0x338>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d01f      	beq.n	8000b5a <HAL_GPIO_Init+0x23e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4e      	ldr	r2, [pc, #312]	@ (8000c58 <HAL_GPIO_Init+0x33c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d019      	beq.n	8000b56 <HAL_GPIO_Init+0x23a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4d      	ldr	r2, [pc, #308]	@ (8000c5c <HAL_GPIO_Init+0x340>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0x236>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c60 <HAL_GPIO_Init+0x344>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00d      	beq.n	8000b4e <HAL_GPIO_Init+0x232>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4b      	ldr	r2, [pc, #300]	@ (8000c64 <HAL_GPIO_Init+0x348>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d007      	beq.n	8000b4a <HAL_GPIO_Init+0x22e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c68 <HAL_GPIO_Init+0x34c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_GPIO_Init+0x22a>
 8000b42:	2306      	movs	r3, #6
 8000b44:	e00c      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b46:	2307      	movs	r3, #7
 8000b48:	e00a      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e008      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b4e:	2304      	movs	r3, #4
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b52:	2303      	movs	r3, #3
 8000b54:	e004      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e002      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <HAL_GPIO_Init+0x244>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	f002 0203 	and.w	r2, r2, #3
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	4093      	lsls	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b70:	4937      	ldr	r1, [pc, #220]	@ (8000c50 <HAL_GPIO_Init+0x334>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba2:	4a32      	ldr	r2, [pc, #200]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bcc:	4a27      	ldr	r2, [pc, #156]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c20:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <HAL_GPIO_Init+0x350>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f ae78 	bne.w	800092c <HAL_GPIO_Init+0x10>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001000 	.word	0x48001000
 8000c64:	48001400 	.word	0x48001400
 8000c68:	48001800 	.word	0x48001800
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40007000 	.word	0x40007000

08000cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cca:	d130      	bne.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cd8:	d038      	beq.n	8000d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2232      	movs	r2, #50	@ 0x32
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	0c9b      	lsrs	r3, r3, #18
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d00:	e002      	b.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d14:	d102      	bne.n	8000d1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f2      	bne.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d28:	d110      	bne.n	8000d4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e00f      	b.n	8000d4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d3a:	d007      	beq.n	8000d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d44:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40007000 	.word	0x40007000
 8000d60:	20000000 	.word	0x20000000
 8000d64:	431bde83 	.word	0x431bde83

08000d68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e3ca      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d7a:	4b97      	ldr	r3, [pc, #604]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d84:	4b94      	ldr	r3, [pc, #592]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80e4 	beq.w	8000f64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <HAL_RCC_OscConfig+0x4a>
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2b0c      	cmp	r3, #12
 8000da6:	f040 808b 	bne.w	8000ec0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 8087 	bne.w	8000ec0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000db2:	4b89      	ldr	r3, [pc, #548]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_RCC_OscConfig+0x62>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e3a2      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a1a      	ldr	r2, [r3, #32]
 8000dce:	4b82      	ldr	r3, [pc, #520]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d004      	beq.n	8000de4 <HAL_RCC_OscConfig+0x7c>
 8000dda:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000de2:	e005      	b.n	8000df0 <HAL_RCC_OscConfig+0x88>
 8000de4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d223      	bcs.n	8000e3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fd1d 	bl	8001838 <RCC_SetFlashLatencyFromMSIRange>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e383      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e08:	4b73      	ldr	r3, [pc, #460]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a72      	ldr	r2, [pc, #456]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b70      	ldr	r3, [pc, #448]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	496d      	ldr	r1, [pc, #436]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e26:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	4968      	ldr	r1, [pc, #416]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]
 8000e3a:	e025      	b.n	8000e88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e3c:	4b66      	ldr	r3, [pc, #408]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a65      	ldr	r2, [pc, #404]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b63      	ldr	r3, [pc, #396]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	4960      	ldr	r1, [pc, #384]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	495b      	ldr	r1, [pc, #364]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d109      	bne.n	8000e88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fcdd 	bl	8001838 <RCC_SetFlashLatencyFromMSIRange>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e343      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e88:	f000 fc4a 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	4b52      	ldr	r3, [pc, #328]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	4950      	ldr	r1, [pc, #320]	@ (8000fdc <HAL_RCC_OscConfig+0x274>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8000fe0 <HAL_RCC_OscConfig+0x278>)
 8000ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ea8:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe4 <HAL_RCC_OscConfig+0x27c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc07 	bl	80006c0 <HAL_InitTick>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d052      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	e327      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d032      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ec8:	4b43      	ldr	r3, [pc, #268]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a42      	ldr	r2, [pc, #264]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc30 	bl	8000738 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc2c 	bl	8000738 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e310      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eee:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efa:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a36      	ldr	r2, [pc, #216]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b34      	ldr	r3, [pc, #208]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4931      	ldr	r1, [pc, #196]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f18:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	492c      	ldr	r1, [pc, #176]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e01a      	b.n	8000f64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a29      	ldr	r2, [pc, #164]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fbfd 	bl	8000738 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f42:	f7ff fbf9 	bl	8000738 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e2dd      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x1da>
 8000f60:	e000      	b.n	8000f64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d074      	beq.n	800105a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_OscConfig+0x21a>
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b0c      	cmp	r3, #12
 8000f7a:	d10e      	bne.n	8000f9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d10b      	bne.n	8000f9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d064      	beq.n	8001058 <HAL_RCC_OscConfig+0x2f0>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d160      	bne.n	8001058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e2ba      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x24a>
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e026      	b.n	8001000 <HAL_RCC_OscConfig+0x298>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fba:	d115      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x280>
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a02      	ldr	r2, [pc, #8]	@ (8000fd8 <HAL_RCC_OscConfig+0x270>)
 8000fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e014      	b.n	8001000 <HAL_RCC_OscConfig+0x298>
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	0800519c 	.word	0x0800519c
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a9f      	ldr	r2, [pc, #636]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b9d      	ldr	r3, [pc, #628]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a9c      	ldr	r2, [pc, #624]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fb96 	bl	8000738 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fb92 	bl	8000738 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	@ 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e276      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001022:	4b92      	ldr	r3, [pc, #584]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0x2a8>
 800102e:	e014      	b.n	800105a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fb82 	bl	8000738 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fb7e 	bl	8000738 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	@ 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e262      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104a:	4b88      	ldr	r3, [pc, #544]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x2d0>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d060      	beq.n	8001128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d005      	beq.n	8001078 <HAL_RCC_OscConfig+0x310>
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b0c      	cmp	r3, #12
 8001070:	d119      	bne.n	80010a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d116      	bne.n	80010a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001078:	4b7c      	ldr	r3, [pc, #496]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x328>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e23f      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b76      	ldr	r3, [pc, #472]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	061b      	lsls	r3, r3, #24
 800109e:	4973      	ldr	r1, [pc, #460]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a4:	e040      	b.n	8001128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d023      	beq.n	80010f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ae:	4b6f      	ldr	r3, [pc, #444]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a6e      	ldr	r2, [pc, #440]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fb3d 	bl	8000738 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fb39 	bl	8000738 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e21d      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d4:	4b65      	ldr	r3, [pc, #404]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b62      	ldr	r3, [pc, #392]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	495f      	ldr	r1, [pc, #380]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	e018      	b.n	8001128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b5d      	ldr	r3, [pc, #372]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a5c      	ldr	r2, [pc, #368]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80010fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001102:	f7ff fb19 	bl	8000738 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fb15 	bl	8000738 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e1f9      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800111c:	4b53      	ldr	r3, [pc, #332]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d03c      	beq.n	80011ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01c      	beq.n	8001176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113c:	4b4b      	ldr	r3, [pc, #300]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800113e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001142:	4a4a      	ldr	r2, [pc, #296]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114c:	f7ff faf4 	bl	8000738 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff faf0 	bl	8000738 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1d4      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0ef      	beq.n	8001154 <HAL_RCC_OscConfig+0x3ec>
 8001174:	e01b      	b.n	80011ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001176:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800117c:	4a3b      	ldr	r2, [pc, #236]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001186:	f7ff fad7 	bl	8000738 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff fad3 	bl	8000738 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1b7      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a0:	4b32      	ldr	r3, [pc, #200]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80011a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ef      	bne.n	800118e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 80a6 	beq.w	8001308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011c0:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10d      	bne.n	80011e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	4a26      	ldr	r2, [pc, #152]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e4:	2301      	movs	r3, #1
 80011e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_RCC_OscConfig+0x508>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d118      	bne.n	8001226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_RCC_OscConfig+0x508>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_RCC_OscConfig+0x508>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001200:	f7ff fa9a 	bl	8000738 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001208:	f7ff fa96 	bl	8000738 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e17a      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_RCC_OscConfig+0x508>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <HAL_RCC_OscConfig+0x4d8>
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800123e:	e029      	b.n	8001294 <HAL_RCC_OscConfig+0x52c>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d115      	bne.n	8001274 <HAL_RCC_OscConfig+0x50c>
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800124a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800124e:	4a07      	ldr	r2, [pc, #28]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125e:	4a03      	ldr	r2, [pc, #12]	@ (800126c <HAL_RCC_OscConfig+0x504>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x52c>
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40007000 	.word	0x40007000
 8001274:	4b9c      	ldr	r3, [pc, #624]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800127a:	4a9b      	ldr	r2, [pc, #620]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001284:	4b98      	ldr	r3, [pc, #608]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800128a:	4a97      	ldr	r2, [pc, #604]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d016      	beq.n	80012ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fa4c 	bl	8000738 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fa48 	bl	8000738 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e12a      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ba:	4b8b      	ldr	r3, [pc, #556]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80012bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ed      	beq.n	80012a4 <HAL_RCC_OscConfig+0x53c>
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ca:	f7ff fa35 	bl	8000738 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fa31 	bl	8000738 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e113      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e8:	4b7f      	ldr	r3, [pc, #508]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ed      	bne.n	80012d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fc:	4b7a      	ldr	r3, [pc, #488]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	4a79      	ldr	r2, [pc, #484]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001306:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80fe 	beq.w	800150e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001316:	2b02      	cmp	r3, #2
 8001318:	f040 80d0 	bne.w	80014bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800131c:	4b72      	ldr	r3, [pc, #456]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132c:	429a      	cmp	r2, r3
 800132e:	d130      	bne.n	8001392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	3b01      	subs	r3, #1
 800133c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d127      	bne.n	8001392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d11f      	bne.n	8001392 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800135c:	2a07      	cmp	r2, #7
 800135e:	bf14      	ite	ne
 8001360:	2201      	movne	r2, #1
 8001362:	2200      	moveq	r2, #0
 8001364:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001366:	4293      	cmp	r3, r2
 8001368:	d113      	bne.n	8001392 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	3b01      	subs	r3, #1
 8001378:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d109      	bne.n	8001392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	3b01      	subs	r3, #1
 800138c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800138e:	429a      	cmp	r2, r3
 8001390:	d06e      	beq.n	8001470 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d069      	beq.n	800146c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001398:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d105      	bne.n	80013b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013a4:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0ad      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013b4:	4b4c      	ldr	r3, [pc, #304]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a4b      	ldr	r2, [pc, #300]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80013ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c0:	f7ff f9ba 	bl	8000738 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff f9b6 	bl	8000738 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e09a      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013da:	4b43      	ldr	r3, [pc, #268]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e6:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	4b40      	ldr	r3, [pc, #256]	@ (80014ec <HAL_RCC_OscConfig+0x784>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013f6:	3a01      	subs	r2, #1
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	4311      	orrs	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001400:	0212      	lsls	r2, r2, #8
 8001402:	4311      	orrs	r1, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001408:	0852      	lsrs	r2, r2, #1
 800140a:	3a01      	subs	r2, #1
 800140c:	0552      	lsls	r2, r2, #21
 800140e:	4311      	orrs	r1, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001414:	0852      	lsrs	r2, r2, #1
 8001416:	3a01      	subs	r2, #1
 8001418:	0652      	lsls	r2, r2, #25
 800141a:	4311      	orrs	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001420:	0912      	lsrs	r2, r2, #4
 8001422:	0452      	lsls	r2, r2, #17
 8001424:	430a      	orrs	r2, r1
 8001426:	4930      	ldr	r1, [pc, #192]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001428:	4313      	orrs	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a2a      	ldr	r2, [pc, #168]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001444:	f7ff f978 	bl	8000738 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff f974 	bl	8000738 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e058      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800146a:	e050      	b.n	800150e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e04f      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001470:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d148      	bne.n	800150e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 8001482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a16      	ldr	r2, [pc, #88]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001494:	f7ff f950 	bl	8000738 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f94c 	bl	8000738 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e030      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x734>
 80014ba:	e028      	b.n	800150e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d023      	beq.n	800150a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_RCC_OscConfig+0x780>)
 80014c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff f933 	bl	8000738 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	e00c      	b.n	80014f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff f92f 	bl	8000738 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d905      	bls.n	80014f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e013      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
 80014e8:	40021000 	.word	0x40021000
 80014ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_RCC_OscConfig+0x7b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ec      	bne.n	80014d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_RCC_OscConfig+0x7b0>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	4905      	ldr	r1, [pc, #20]	@ (8001518 <HAL_RCC_OscConfig+0x7b0>)
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_RCC_OscConfig+0x7b4>)
 8001504:	4013      	ands	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
 8001508:	e001      	b.n	800150e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	feeefffc 	.word	0xfeeefffc

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0e7      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b75      	ldr	r3, [pc, #468]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d910      	bls.n	8001564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b72      	ldr	r3, [pc, #456]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4970      	ldr	r1, [pc, #448]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b6e      	ldr	r3, [pc, #440]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cf      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d010      	beq.n	8001592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4b66      	ldr	r3, [pc, #408]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800157c:	429a      	cmp	r2, r3
 800157e:	d908      	bls.n	8001592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001580:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4960      	ldr	r1, [pc, #384]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d04c      	beq.n	8001638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d121      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0a6      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015be:	4b54      	ldr	r3, [pc, #336]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d115      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e09a      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08e      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e086      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b46      	ldr	r3, [pc, #280]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4943      	ldr	r1, [pc, #268]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001608:	f7ff f896 	bl	8000738 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff f892 	bl	8000738 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e06e      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b3a      	ldr	r3, [pc, #232]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d010      	beq.n	8001666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001650:	429a      	cmp	r2, r3
 8001652:	d208      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	492b      	ldr	r1, [pc, #172]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d210      	bcs.n	8001696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001674:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 0207 	bic.w	r2, r3, #7
 800167c:	4923      	ldr	r1, [pc, #140]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d001      	beq.n	8001696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e036      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4918      	ldr	r1, [pc, #96]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4910      	ldr	r1, [pc, #64]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d4:	f000 f824 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	490b      	ldr	r1, [pc, #44]	@ (8001714 <HAL_RCC_ClockConfig+0x1f4>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <HAL_RCC_ClockConfig+0x1f8>)
 80016f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_RCC_ClockConfig+0x1fc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ffe1 	bl	80006c0 <HAL_InitTick>
 80016fe:	4603      	mov	r3, r0
 8001700:	72fb      	strb	r3, [r7, #11]

  return status;
 8001702:	7afb      	ldrb	r3, [r7, #11]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	0800519c 	.word	0x0800519c
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172e:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x34>
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d121      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d11e      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001754:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e005      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001770:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800177c:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <HAL_RCC_GetSysClockFreq+0x10c>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d102      	bne.n	800179e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x110>)
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	e004      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x114>)
 80017a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d134      	bne.n	8001818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d003      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0xac>
 80017c4:	e005      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x110>)
 80017c8:	617b      	str	r3, [r7, #20]
      break;
 80017ca:	e005      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ce:	617b      	str	r3, [r7, #20]
      break;
 80017d0:	e002      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	617b      	str	r3, [r7, #20]
      break;
 80017d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	fb03 f202 	mul.w	r2, r3, r2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	0e5b      	lsrs	r3, r3, #25
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	3301      	adds	r3, #1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001818:	69bb      	ldr	r3, [r7, #24]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	080051ac 	.word	0x080051ac
 8001830:	00f42400 	.word	0x00f42400
 8001834:	007a1200 	.word	0x007a1200

08001838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001850:	f7ff fa26 	bl	8000ca0 <HAL_PWREx_GetVoltageRange>
 8001854:	6178      	str	r0, [r7, #20]
 8001856:	e014      	b.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	4a24      	ldr	r2, [pc, #144]	@ (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001862:	6593      	str	r3, [r2, #88]	@ 0x58
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001870:	f7ff fa16 	bl	8000ca0 <HAL_PWREx_GetVoltageRange>
 8001874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001880:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001888:	d10b      	bne.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b80      	cmp	r3, #128	@ 0x80
 800188e:	d919      	bls.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2ba0      	cmp	r3, #160	@ 0xa0
 8001894:	d902      	bls.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001896:	2302      	movs	r3, #2
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e013      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	e010      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b80      	cmp	r3, #128	@ 0x80
 80018a6:	d902      	bls.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018a8:	2303      	movs	r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e00a      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b80      	cmp	r3, #128	@ 0x80
 80018b2:	d102      	bne.n	80018ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b4:	2302      	movs	r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	e004      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b70      	cmp	r3, #112	@ 0x70
 80018be:	d101      	bne.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	4909      	ldr	r1, [pc, #36]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40022000 	.word	0x40022000

080018f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f103 0208 	add.w	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f103 0208 	add.w	r2, r3, #8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f103 0208 	add.w	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6892      	ldr	r2, [r2, #8]
 8001968:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6852      	ldr	r2, [r2, #4]
 8001972:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d103      	bne.n	8001986 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	1e5a      	subs	r2, r3, #1
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08c      	sub	sp, #48	@ 0x30
 80019aa:	af04      	add	r7, sp, #16
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 f818 	bl	80029f0 <pvPortMalloc>
 80019c0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019c8:	2058      	movs	r0, #88	@ 0x58
 80019ca:	f001 f811 	bl	80029f0 <pvPortMalloc>
 80019ce:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80019d6:	2258      	movs	r2, #88	@ 0x58
 80019d8:	2100      	movs	r1, #0
 80019da:	69f8      	ldr	r0, [r7, #28]
 80019dc:	f003 f89c 	bl	8004b18 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80019e6:	e005      	b.n	80019f4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f001 f8bd 	bl	8002b68 <vPortFree>
 80019ee:	e001      	b.n	80019f4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d013      	beq.n	8001a22 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f80e 	bl	8001a32 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001a16:	69f8      	ldr	r0, [r7, #28]
 8001a18:	f000 f89c 	bl	8001b54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	e002      	b.n	8001a28 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a28:	69bb      	ldr	r3, [r7, #24]
    }
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b088      	sub	sp, #32
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	21a5      	movs	r1, #165	@ 0xa5
 8001a4c:	f003 f864 	bl	8004b18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f023 0307 	bic.w	r3, r3, #7
 8001a68:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8001a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a78:	f383 8811 	msr	BASEPRI, r3
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	617b      	str	r3, [r7, #20]
    }
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01e      	beq.n	8001ad0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e012      	b.n	8001abe <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	7819      	ldrb	r1, [r3, #0]
 8001aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3334      	adds	r3, #52	@ 0x34
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	d9e9      	bls.n	8001a98 <prvInitialiseNewTask+0x66>
 8001ac4:	e000      	b.n	8001ac8 <prvInitialiseNewTask+0x96>
            {
                break;
 8001ac6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d90b      	bls.n	8001aee <prvInitialiseNewTask+0xbc>
        __asm volatile
 8001ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ada:	f383 8811 	msr	BASEPRI, r3
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	f3bf 8f4f 	dsb	sy
 8001ae6:	613b      	str	r3, [r7, #16]
    }
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	e7fd      	b.n	8001aea <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d901      	bls.n	8001af8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001af4:	2304      	movs	r3, #4
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001afc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b02:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b06:	3304      	adds	r3, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff15 	bl	8001938 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b10:	3318      	adds	r3, #24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff10 	bl	8001938 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b1c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b20:	f1c3 0205 	rsb	r2, r3, #5
 8001b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b26:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	69b8      	ldr	r0, [r7, #24]
 8001b34:	f000 fc76 	bl	8002424 <pxPortInitialiseStack>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b3c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001b5c:	f000 fe16 	bl	800278c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001b60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <prvAddNewTaskToReadyList+0x14c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca0 <prvAddNewTaskToReadyList+0x14c>)
 8001b68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca4 <prvAddNewTaskToReadyList+0x150>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001b72:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca4 <prvAddNewTaskToReadyList+0x150>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b78:	4b49      	ldr	r3, [pc, #292]	@ (8001ca0 <prvAddNewTaskToReadyList+0x14c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d110      	bne.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b80:	f000 fbb6 	bl	80022f0 <prvInitialiseTaskLists>
 8001b84:	e00d      	b.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b86:	4b48      	ldr	r3, [pc, #288]	@ (8001ca8 <prvAddNewTaskToReadyList+0x154>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <prvAddNewTaskToReadyList+0x150>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d802      	bhi.n	8001ba2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b9c:	4a41      	ldr	r2, [pc, #260]	@ (8001ca4 <prvAddNewTaskToReadyList+0x150>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001ba2:	4b42      	ldr	r3, [pc, #264]	@ (8001cac <prvAddNewTaskToReadyList+0x158>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a40      	ldr	r2, [pc, #256]	@ (8001cac <prvAddNewTaskToReadyList+0x158>)
 8001baa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001bac:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <prvAddNewTaskToReadyList+0x158>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <prvAddNewTaskToReadyList+0x94>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fb93 	bl	80042e8 <SEGGER_SYSVIEW_OnTaskCreate>
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461c      	mov	r4, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	1ae3      	subs	r3, r4, r3
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	462b      	mov	r3, r5
 8001be4:	f001 f980 	bl	8002ee8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fc00 	bl	80043f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <prvAddNewTaskToReadyList+0x15c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb0 <prvAddNewTaskToReadyList+0x15c>)
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c06:	492b      	ldr	r1, [pc, #172]	@ (8001cb4 <prvAddNewTaskToReadyList+0x160>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3304      	adds	r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	3204      	adds	r2, #4
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	1d1a      	adds	r2, r3, #4
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <prvAddNewTaskToReadyList+0x160>)
 8001c46:	441a      	add	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c50:	4918      	ldr	r1, [pc, #96]	@ (8001cb4 <prvAddNewTaskToReadyList+0x160>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	4814      	ldr	r0, [pc, #80]	@ (8001cb4 <prvAddNewTaskToReadyList+0x160>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4403      	add	r3, r0
 8001c6c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c6e:	f000 fdbf 	bl	80027f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <prvAddNewTaskToReadyList+0x154>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00e      	beq.n	8001c98 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <prvAddNewTaskToReadyList+0x150>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <prvAddNewTaskToReadyList+0x164>)
 8001c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca0:	20000164 	.word	0x20000164
 8001ca4:	2000008c 	.word	0x2000008c
 8001ca8:	20000170 	.word	0x20000170
 8001cac:	20000180 	.word	0x20000180
 8001cb0:	2000016c 	.word	0x2000016c
 8001cb4:	20000090 	.word	0x20000090
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <vTaskStartScheduler+0x98>)
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2282      	movs	r2, #130	@ 0x82
 8001cce:	4922      	ldr	r1, [pc, #136]	@ (8001d58 <vTaskStartScheduler+0x9c>)
 8001cd0:	4822      	ldr	r0, [pc, #136]	@ (8001d5c <vTaskStartScheduler+0xa0>)
 8001cd2:	f7ff fe68 	bl	80019a6 <xTaskCreate>
 8001cd6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d124      	bne.n	8001d28 <vTaskStartScheduler+0x6c>
        __asm volatile
 8001cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	60bb      	str	r3, [r7, #8]
    }
 8001cf0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <vTaskStartScheduler+0xa4>)
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <vTaskStartScheduler+0xa8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <vTaskStartScheduler+0xac>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <vTaskStartScheduler+0xb0>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <vTaskStartScheduler+0x98>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d102      	bne.n	8001d18 <vTaskStartScheduler+0x5c>
 8001d12:	f002 facd 	bl	80042b0 <SEGGER_SYSVIEW_OnIdle>
 8001d16:	e004      	b.n	8001d22 <vTaskStartScheduler+0x66>
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <vTaskStartScheduler+0xb0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fb25 	bl	800436c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001d22:	f000 fc0f 	bl	8002544 <xPortStartScheduler>
 8001d26:	e00f      	b.n	8001d48 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2e:	d10b      	bne.n	8001d48 <vTaskStartScheduler+0x8c>
        __asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	607b      	str	r3, [r7, #4]
    }
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <vTaskStartScheduler+0xb4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000188 	.word	0x20000188
 8001d58:	080050d8 	.word	0x080050d8
 8001d5c:	080022c1 	.word	0x080022c1
 8001d60:	20000184 	.word	0x20000184
 8001d64:	20000170 	.word	0x20000170
 8001d68:	20000168 	.word	0x20000168
 8001d6c:	2000008c 	.word	0x2000008c
 8001d70:	080051dc 	.word	0x080051dc

08001d74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <vTaskSuspendAll+0x18>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a03      	ldr	r2, [pc, #12]	@ (8001d8c <vTaskSuspendAll+0x18>)
 8001d80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	2000018c 	.word	0x2000018c

08001d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001d9e:	4b73      	ldr	r3, [pc, #460]	@ (8001f6c <xTaskResumeAll+0x1dc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <xTaskResumeAll+0x2e>
        __asm volatile
 8001da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	607b      	str	r3, [r7, #4]
    }
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001dbe:	f000 fce5 	bl	800278c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f6c <xTaskResumeAll+0x1dc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	4a68      	ldr	r2, [pc, #416]	@ (8001f6c <xTaskResumeAll+0x1dc>)
 8001dca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dcc:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <xTaskResumeAll+0x1dc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 80c4 	bne.w	8001f5e <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001dd6:	4b66      	ldr	r3, [pc, #408]	@ (8001f70 <xTaskResumeAll+0x1e0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80bf 	beq.w	8001f5e <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001de0:	e08e      	b.n	8001f00 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de2:	4b64      	ldr	r3, [pc, #400]	@ (8001f74 <xTaskResumeAll+0x1e4>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	6a12      	ldr	r2, [r2, #32]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	69d2      	ldr	r2, [r2, #28]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d103      	bne.n	8001e18 <xTaskResumeAll+0x88>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	68d2      	ldr	r2, [r2, #12]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	6892      	ldr	r2, [r2, #8]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d103      	bne.n	8001e56 <xTaskResumeAll+0xc6>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fac1 	bl	80043f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	4b40      	ldr	r3, [pc, #256]	@ (8001f78 <xTaskResumeAll+0x1e8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <xTaskResumeAll+0x1e8>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e84:	493d      	ldr	r1, [pc, #244]	@ (8001f7c <xTaskResumeAll+0x1ec>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3304      	adds	r3, #4
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	3204      	adds	r2, #4
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f7c <xTaskResumeAll+0x1ec>)
 8001ec4:	441a      	add	r2, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	615a      	str	r2, [r3, #20]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ece:	492b      	ldr	r1, [pc, #172]	@ (8001f7c <xTaskResumeAll+0x1ec>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	4827      	ldr	r0, [pc, #156]	@ (8001f7c <xTaskResumeAll+0x1ec>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4403      	add	r3, r0
 8001eea:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef0:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <xTaskResumeAll+0x1f0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8001efa:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <xTaskResumeAll+0x1f4>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <xTaskResumeAll+0x1e4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f af6c 	bne.w	8001de2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001f10:	f000 fa6c 	bl	80023ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f14:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <xTaskResumeAll+0x1f8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001f20:	f000 f848 	bl	8001fb4 <xTaskIncrementTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <xTaskResumeAll+0x1f4>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f1      	bne.n	8001f20 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <xTaskResumeAll+0x1f8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <xTaskResumeAll+0x1f4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <xTaskResumeAll+0x1fc>)
 8001f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001f5e:	f000 fc47 	bl	80027f0 <vPortExitCritical>

    return xAlreadyYielded;
 8001f62:	69bb      	ldr	r3, [r7, #24]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000018c 	.word	0x2000018c
 8001f70:	20000164 	.word	0x20000164
 8001f74:	20000124 	.word	0x20000124
 8001f78:	2000016c 	.word	0x2000016c
 8001f7c:	20000090 	.word	0x20000090
 8001f80:	2000008c 	.word	0x2000008c
 8001f84:	20000178 	.word	0x20000178
 8001f88:	20000174 	.word	0x20000174
 8001f8c:	e000ed04 	.word	0xe000ed04

08001f90 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f96:	f000 fce9 	bl	800296c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <xTaskGetTickCountFromISR+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001fa4:	683b      	ldr	r3, [r7, #0]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000168 	.word	0x20000168

08001fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fbe:	4b80      	ldr	r3, [pc, #512]	@ (80021c0 <xTaskIncrementTick+0x20c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80f1 	bne.w	80021aa <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80021c4 <xTaskIncrementTick+0x210>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80021c4 <xTaskIncrementTick+0x210>)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d121      	bne.n	8002020 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001fdc:	4b7a      	ldr	r3, [pc, #488]	@ (80021c8 <xTaskIncrementTick+0x214>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <xTaskIncrementTick+0x4a>
        __asm volatile
 8001fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	607b      	str	r3, [r7, #4]
    }
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	e7fd      	b.n	8001ffa <xTaskIncrementTick+0x46>
 8001ffe:	4b72      	ldr	r3, [pc, #456]	@ (80021c8 <xTaskIncrementTick+0x214>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	4b71      	ldr	r3, [pc, #452]	@ (80021cc <xTaskIncrementTick+0x218>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6f      	ldr	r2, [pc, #444]	@ (80021c8 <xTaskIncrementTick+0x214>)
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4a6f      	ldr	r2, [pc, #444]	@ (80021cc <xTaskIncrementTick+0x218>)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6f      	ldr	r3, [pc, #444]	@ (80021d0 <xTaskIncrementTick+0x21c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	4a6d      	ldr	r2, [pc, #436]	@ (80021d0 <xTaskIncrementTick+0x21c>)
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	f000 f9e6 	bl	80023ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002020:	4b6c      	ldr	r3, [pc, #432]	@ (80021d4 <xTaskIncrementTick+0x220>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a3a      	ldr	r2, [r7, #32]
 8002026:	429a      	cmp	r2, r3
 8002028:	f0c0 80aa 	bcc.w	8002180 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800202c:	4b66      	ldr	r3, [pc, #408]	@ (80021c8 <xTaskIncrementTick+0x214>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d104      	bne.n	8002040 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002036:	4b67      	ldr	r3, [pc, #412]	@ (80021d4 <xTaskIncrementTick+0x220>)
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	601a      	str	r2, [r3, #0]
                    break;
 800203e:	e09f      	b.n	8002180 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002040:	4b61      	ldr	r3, [pc, #388]	@ (80021c8 <xTaskIncrementTick+0x214>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	d203      	bcs.n	8002060 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002058:	4a5e      	ldr	r2, [pc, #376]	@ (80021d4 <xTaskIncrementTick+0x220>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800205e:	e08f      	b.n	8002180 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	68d2      	ldr	r2, [r2, #12]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	6892      	ldr	r2, [r2, #8]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3304      	adds	r3, #4
 8002082:	429a      	cmp	r2, r3
 8002084:	d103      	bne.n	800208e <xTaskIncrementTick+0xda>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01e      	beq.n	80020e4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	6a12      	ldr	r2, [r2, #32]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	69d2      	ldr	r2, [r2, #28]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	3318      	adds	r3, #24
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d103      	bne.n	80020d4 <xTaskIncrementTick+0x120>
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1e5a      	subs	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 f982 	bl	80043f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	2201      	movs	r2, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	4b38      	ldr	r3, [pc, #224]	@ (80021d8 <xTaskIncrementTick+0x224>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	4a37      	ldr	r2, [pc, #220]	@ (80021d8 <xTaskIncrementTick+0x224>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002102:	4936      	ldr	r1, [pc, #216]	@ (80021dc <xTaskIncrementTick+0x228>)
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3304      	adds	r3, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	3204      	adds	r2, #4
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <xTaskIncrementTick+0x228>)
 8002142:	441a      	add	r2, r3
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	615a      	str	r2, [r3, #20]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214c:	4923      	ldr	r1, [pc, #140]	@ (80021dc <xTaskIncrementTick+0x228>)
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1c59      	adds	r1, r3, #1
 800215c:	481f      	ldr	r0, [pc, #124]	@ (80021dc <xTaskIncrementTick+0x228>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4403      	add	r3, r0
 8002168:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216e:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <xTaskIncrementTick+0x22c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	429a      	cmp	r2, r3
 8002176:	f67f af59 	bls.w	800202c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800217e:	e755      	b.n	800202c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <xTaskIncrementTick+0x22c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002186:	4915      	ldr	r1, [pc, #84]	@ (80021dc <xTaskIncrementTick+0x228>)
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d901      	bls.n	800219c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <xTaskIncrementTick+0x230>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a8:	e004      	b.n	80021b4 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80021aa:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <xTaskIncrementTick+0x234>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <xTaskIncrementTick+0x234>)
 80021b2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3728      	adds	r7, #40	@ 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000018c 	.word	0x2000018c
 80021c4:	20000168 	.word	0x20000168
 80021c8:	2000011c 	.word	0x2000011c
 80021cc:	20000120 	.word	0x20000120
 80021d0:	2000017c 	.word	0x2000017c
 80021d4:	20000184 	.word	0x20000184
 80021d8:	2000016c 	.word	0x2000016c
 80021dc:	20000090 	.word	0x20000090
 80021e0:	2000008c 	.word	0x2000008c
 80021e4:	20000178 	.word	0x20000178
 80021e8:	20000174 	.word	0x20000174

080021ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021f2:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <vTaskSwitchContext+0xbc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80021fa:	4b2c      	ldr	r3, [pc, #176]	@ (80022ac <vTaskSwitchContext+0xc0>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002200:	e04e      	b.n	80022a0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8002202:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <vTaskSwitchContext+0xc0>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002208:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <vTaskSwitchContext+0xc4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	f1c3 031f 	rsb	r3, r3, #31
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	4925      	ldr	r1, [pc, #148]	@ (80022b4 <vTaskSwitchContext+0xc8>)
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	607b      	str	r3, [r7, #4]
    }
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <vTaskSwitchContext+0x5a>
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <vTaskSwitchContext+0xc8>)
 8002256:	4413      	add	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3308      	adds	r3, #8
 800226c:	429a      	cmp	r2, r3
 800226e:	d104      	bne.n	800227a <vTaskSwitchContext+0x8e>
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <vTaskSwitchContext+0xcc>)
 8002282:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <vTaskSwitchContext+0xcc>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <vTaskSwitchContext+0xd0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d102      	bne.n	8002296 <vTaskSwitchContext+0xaa>
 8002290:	f002 f80e 	bl	80042b0 <SEGGER_SYSVIEW_OnIdle>
}
 8002294:	e004      	b.n	80022a0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <vTaskSwitchContext+0xcc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f002 f866 	bl	800436c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80022a0:	bf00      	nop
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	2000018c 	.word	0x2000018c
 80022ac:	20000178 	.word	0x20000178
 80022b0:	2000016c 	.word	0x2000016c
 80022b4:	20000090 	.word	0x20000090
 80022b8:	2000008c 	.word	0x2000008c
 80022bc:	20000188 	.word	0x20000188

080022c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80022c8:	f000 f852 	bl	8002370 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <prvIdleTask+0x28>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d9f9      	bls.n	80022c8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <prvIdleTask+0x2c>)
 80022d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80022e4:	e7f0      	b.n	80022c8 <prvIdleTask+0x8>
 80022e6:	bf00      	nop
 80022e8:	20000090 	.word	0x20000090
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	e00c      	b.n	8002316 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <prvInitialiseTaskLists+0x60>)
 8002308:	4413      	add	r3, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff faf4 	bl	80018f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d9ef      	bls.n	80022fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800231c:	480d      	ldr	r0, [pc, #52]	@ (8002354 <prvInitialiseTaskLists+0x64>)
 800231e:	f7ff faeb 	bl	80018f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002322:	480d      	ldr	r0, [pc, #52]	@ (8002358 <prvInitialiseTaskLists+0x68>)
 8002324:	f7ff fae8 	bl	80018f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002328:	480c      	ldr	r0, [pc, #48]	@ (800235c <prvInitialiseTaskLists+0x6c>)
 800232a:	f7ff fae5 	bl	80018f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800232e:	480c      	ldr	r0, [pc, #48]	@ (8002360 <prvInitialiseTaskLists+0x70>)
 8002330:	f7ff fae2 	bl	80018f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002334:	480b      	ldr	r0, [pc, #44]	@ (8002364 <prvInitialiseTaskLists+0x74>)
 8002336:	f7ff fadf 	bl	80018f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <prvInitialiseTaskLists+0x78>)
 800233c:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <prvInitialiseTaskLists+0x64>)
 800233e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <prvInitialiseTaskLists+0x7c>)
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <prvInitialiseTaskLists+0x68>)
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000090 	.word	0x20000090
 8002354:	200000f4 	.word	0x200000f4
 8002358:	20000108 	.word	0x20000108
 800235c:	20000124 	.word	0x20000124
 8002360:	20000138 	.word	0x20000138
 8002364:	20000150 	.word	0x20000150
 8002368:	2000011c 	.word	0x2000011c
 800236c:	20000120 	.word	0x20000120

08002370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002376:	e019      	b.n	80023ac <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002378:	f000 fa08 	bl	800278c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800237c:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <prvCheckTasksWaitingTermination+0x50>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fae2 	bl	8001952 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <prvCheckTasksWaitingTermination+0x54>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	4a0b      	ldr	r2, [pc, #44]	@ (80023c4 <prvCheckTasksWaitingTermination+0x54>)
 8002396:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <prvCheckTasksWaitingTermination+0x58>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3b01      	subs	r3, #1
 800239e:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <prvCheckTasksWaitingTermination+0x58>)
 80023a0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80023a2:	f000 fa25 	bl	80027f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f810 	bl	80023cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <prvCheckTasksWaitingTermination+0x58>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e1      	bne.n	8002378 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000138 	.word	0x20000138
 80023c4:	20000164 	.word	0x20000164
 80023c8:	2000014c 	.word	0x2000014c

080023cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fbc5 	bl	8002b68 <vPortFree>
            vPortFree( pxTCB );
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fbc2 	bl	8002b68 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <prvResetNextTaskUnblockTime+0x30>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <prvResetNextTaskUnblockTime+0x34>)
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002402:	e005      	b.n	8002410 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <prvResetNextTaskUnblockTime+0x30>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <prvResetNextTaskUnblockTime+0x34>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000011c 	.word	0x2000011c
 8002420:	20000184 	.word	0x20000184

08002424 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b04      	subs	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800243c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b04      	subs	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f023 0201 	bic.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3b04      	subs	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002454:	4a0c      	ldr	r2, [pc, #48]	@ (8002488 <pxPortInitialiseStack+0x64>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b14      	subs	r3, #20
 800245e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b04      	subs	r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f06f 0202 	mvn.w	r2, #2
 8002472:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3b20      	subs	r3, #32
 8002478:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	0800248d 	.word	0x0800248d

0800248c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002496:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <prvTaskExitError+0x58>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249e:	d00b      	beq.n	80024b8 <prvTaskExitError+0x2c>
        __asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	60fb      	str	r3, [r7, #12]
    }
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <prvTaskExitError+0x28>
        __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60bb      	str	r3, [r7, #8]
    }
 80024ca:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80024cc:	bf00      	nop
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0fc      	beq.n	80024ce <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	2000000c 	.word	0x2000000c
	...

080024f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <pxCurrentTCBConst2>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6808      	ldr	r0, [r1, #0]
 80024f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fa:	f380 8809 	msr	PSP, r0
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	4770      	bx	lr
 800250c:	f3af 8000 	nop.w

08002510 <pxCurrentTCBConst2>:
 8002510:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop

08002518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002518:	4808      	ldr	r0, [pc, #32]	@ (800253c <prvPortStartFirstTask+0x24>)
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f380 8808 	msr	MSP, r0
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f380 8814 	msr	CONTROL, r0
 800252a:	b662      	cpsie	i
 800252c:	b661      	cpsie	f
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	df00      	svc	0
 8002538:	bf00      	nop
 800253a:	0000      	.short	0x0000
 800253c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop

08002544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <xPortStartScheduler+0x124>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a47      	ldr	r2, [pc, #284]	@ (800266c <xPortStartScheduler+0x128>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10b      	bne.n	800256c <xPortStartScheduler+0x28>
        __asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	60fb      	str	r3, [r7, #12]
    }
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800256c:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <xPortStartScheduler+0x124>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3f      	ldr	r2, [pc, #252]	@ (8002670 <xPortStartScheduler+0x12c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10b      	bne.n	800258e <xPortStartScheduler+0x4a>
        __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	613b      	str	r3, [r7, #16]
    }
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	e7fd      	b.n	800258a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800258e:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <xPortStartScheduler+0x130>)
 8002590:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	22ff      	movs	r2, #255	@ 0xff
 800259e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <xPortStartScheduler+0x134>)
 80025b4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025b6:	4b31      	ldr	r3, [pc, #196]	@ (800267c <xPortStartScheduler+0x138>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025bc:	e009      	b.n	80025d2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <xPortStartScheduler+0x138>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <xPortStartScheduler+0x138>)
 80025c6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	2b80      	cmp	r3, #128	@ 0x80
 80025dc:	d0ef      	beq.n	80025be <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025de:	4b27      	ldr	r3, [pc, #156]	@ (800267c <xPortStartScheduler+0x138>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00b      	beq.n	8002602 <xPortStartScheduler+0xbe>
        __asm volatile
 80025ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	60bb      	str	r3, [r7, #8]
    }
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	e7fd      	b.n	80025fe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <xPortStartScheduler+0x138>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	4a1c      	ldr	r2, [pc, #112]	@ (800267c <xPortStartScheduler+0x138>)
 800260a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <xPortStartScheduler+0x138>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002614:	4a19      	ldr	r2, [pc, #100]	@ (800267c <xPortStartScheduler+0x138>)
 8002616:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <xPortStartScheduler+0x13c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a16      	ldr	r2, [pc, #88]	@ (8002680 <xPortStartScheduler+0x13c>)
 8002626:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800262a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800262c:	4b14      	ldr	r3, [pc, #80]	@ (8002680 <xPortStartScheduler+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <xPortStartScheduler+0x13c>)
 8002632:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002638:	f000 f968 	bl	800290c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <xPortStartScheduler+0x140>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002642:	f000 f987 	bl	8002954 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <xPortStartScheduler+0x144>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a0f      	ldr	r2, [pc, #60]	@ (8002688 <xPortStartScheduler+0x144>)
 800264c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002650:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002652:	f7ff ff61 	bl	8002518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002656:	f7ff fdc9 	bl	80021ec <vTaskSwitchContext>
    prvTaskExitError();
 800265a:	f7ff ff17 	bl	800248c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	410fc271 	.word	0x410fc271
 8002670:	410fc270 	.word	0x410fc270
 8002674:	e000e400 	.word	0xe000e400
 8002678:	20000190 	.word	0x20000190
 800267c:	20000194 	.word	0x20000194
 8002680:	e000ed20 	.word	0xe000ed20
 8002684:	2000000c 	.word	0x2000000c
 8002688:	e000ef34 	.word	0xe000ef34

0800268c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002692:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <vInitPrioGroupValue+0xe8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a38      	ldr	r2, [pc, #224]	@ (8002778 <vInitPrioGroupValue+0xec>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d10b      	bne.n	80026b4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	60fb      	str	r3, [r7, #12]
    }
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002774 <vInitPrioGroupValue+0xe8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a30      	ldr	r2, [pc, #192]	@ (800277c <vInitPrioGroupValue+0xf0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10b      	bne.n	80026d6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	613b      	str	r3, [r7, #16]
    }
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	e7fd      	b.n	80026d2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <vInitPrioGroupValue+0xf4>)
 80026d8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	22ff      	movs	r2, #255	@ 0xff
 80026e6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <vInitPrioGroupValue+0xf8>)
 80026fc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026fe:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002704:	e009      	b.n	800271a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3b01      	subs	r3, #1
 800270c:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 800270e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b80      	cmp	r3, #128	@ 0x80
 8002724:	d0ef      	beq.n	8002706 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	d00b      	beq.n	800274a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	60bb      	str	r3, [r7, #8]
    }
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	e7fd      	b.n	8002746 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800274a:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 8002752:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800275c:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <vInitPrioGroupValue+0xfc>)
 800275e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00
 8002778:	410fc271 	.word	0x410fc271
 800277c:	410fc270 	.word	0x410fc270
 8002780:	e000e400 	.word	0xe000e400
 8002784:	20000190 	.word	0x20000190
 8002788:	20000194 	.word	0x20000194

0800278c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
        __asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	607b      	str	r3, [r7, #4]
    }
 80027a4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <vPortEnterCritical+0x5c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a0e      	ldr	r2, [pc, #56]	@ (80027e8 <vPortEnterCritical+0x5c>)
 80027ae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <vPortEnterCritical+0x5c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d110      	bne.n	80027da <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <vPortEnterCritical+0x60>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <vPortEnterCritical+0x4e>
        __asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	603b      	str	r3, [r7, #0]
    }
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	e7fd      	b.n	80027d6 <vPortEnterCritical+0x4a>
    }
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80027f6:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <vPortExitCritical+0x50>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <vPortExitCritical+0x26>
        __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
    }
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	e7fd      	b.n	8002812 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <vPortExitCritical+0x50>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <vPortExitCritical+0x50>)
 800281e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002820:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <vPortExitCritical+0x50>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <vPortExitCritical+0x44>
 8002828:	2300      	movs	r3, #0
 800282a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002832:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	2000000c 	.word	0x2000000c
	...

08002850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002850:	f3ef 8009 	mrs	r0, PSP
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <pxCurrentTCBConst>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f01e 0f10 	tst.w	lr, #16
 8002860:	bf08      	it	eq
 8002862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286a:	6010      	str	r0, [r2, #0]
 800286c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002874:	f380 8811 	msr	BASEPRI, r0
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f7ff fcb4 	bl	80021ec <vTaskSwitchContext>
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f380 8811 	msr	BASEPRI, r0
 800288c:	bc09      	pop	{r0, r3}
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	6808      	ldr	r0, [r1, #0]
 8002892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002896:	f01e 0f10 	tst.w	lr, #16
 800289a:	bf08      	it	eq
 800289c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028a0:	f380 8809 	msr	PSP, r0
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w

080028b0 <pxCurrentTCBConst>:
 80028b0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop

080028b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
        __asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	607b      	str	r3, [r7, #4]
    }
 80028d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80028d2:	f001 fc73 	bl	80041bc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80028d6:	f7ff fb6d 	bl	8001fb4 <xTaskIncrementTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80028e0:	f001 fcca 	bl	8004278 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <SysTick_Handler+0x50>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e001      	b.n	80028f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80028ee:	f001 fca7 	bl	8004240 <SEGGER_SYSVIEW_RecordExitISR>
 80028f2:	2300      	movs	r3, #0
 80028f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f383 8811 	msr	BASEPRI, r3
    }
 80028fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <vPortSetupTimerInterrupt+0x34>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <vPortSetupTimerInterrupt+0x38>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <vPortSetupTimerInterrupt+0x3c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <vPortSetupTimerInterrupt+0x40>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <vPortSetupTimerInterrupt+0x44>)
 800292a:	3b01      	subs	r3, #1
 800292c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <vPortSetupTimerInterrupt+0x34>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010
 8002944:	e000e018 	.word	0xe000e018
 8002948:	20000000 	.word	0x20000000
 800294c:	10624dd3 	.word	0x10624dd3
 8002950:	e000e014 	.word	0xe000e014

08002954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002964 <vPortEnableVFP+0x10>
 8002958:	6801      	ldr	r1, [r0, #0]
 800295a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800295e:	6001      	str	r1, [r0, #0]
 8002960:	4770      	bx	lr
 8002962:	0000      	.short	0x0000
 8002964:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop

0800296c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002972:	f3ef 8305 	mrs	r3, IPSR
 8002976:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	d915      	bls.n	80029aa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800297e:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <vPortValidateInterruptPriority+0x74>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002988:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <vPortValidateInterruptPriority+0x78>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	7afa      	ldrb	r2, [r7, #11]
 800298e:	429a      	cmp	r2, r3
 8002990:	d20b      	bcs.n	80029aa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	607b      	str	r3, [r7, #4]
    }
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	e7fd      	b.n	80029a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029aa:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <vPortValidateInterruptPriority+0x7c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <vPortValidateInterruptPriority+0x80>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90b      	bls.n	80029d2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	603b      	str	r3, [r7, #0]
    }
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	e7fd      	b.n	80029ce <vPortValidateInterruptPriority+0x62>
    }
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e3f0 	.word	0xe000e3f0
 80029e4:	20000190 	.word	0x20000190
 80029e8:	e000ed0c 	.word	0xe000ed0c
 80029ec:	20000194 	.word	0x20000194

080029f0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	@ 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80029fc:	f7ff f9ba 	bl	8001d74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a00:	4b54      	ldr	r3, [pc, #336]	@ (8002b54 <pvPortMalloc+0x164>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002a08:	f000 f908 	bl	8002c1c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d012      	beq.n	8002a38 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002a12:	2208      	movs	r2, #8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d804      	bhi.n	8002a34 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	e001      	b.n	8002a38 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db71      	blt.n	8002b22 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d06e      	beq.n	8002b22 <pvPortMalloc+0x132>
 8002a44:	4b44      	ldr	r3, [pc, #272]	@ (8002b58 <pvPortMalloc+0x168>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d869      	bhi.n	8002b22 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002a4e:	4b43      	ldr	r3, [pc, #268]	@ (8002b5c <pvPortMalloc+0x16c>)
 8002a50:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <pvPortMalloc+0x16c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a58:	e004      	b.n	8002a64 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d903      	bls.n	8002a76 <pvPortMalloc+0x86>
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f1      	bne.n	8002a5a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <pvPortMalloc+0x164>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d050      	beq.n	8002b22 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2208      	movs	r2, #8
 8002a86:	4413      	add	r3, r2
 8002a88:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	1ad2      	subs	r2, r2, r3
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d920      	bls.n	8002ae4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <pvPortMalloc+0xdc>
        __asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	613b      	str	r3, [r7, #16]
    }
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad2      	subs	r2, r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f000 f8f8 	bl	8002cd4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <pvPortMalloc+0x168>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	4a1a      	ldr	r2, [pc, #104]	@ (8002b58 <pvPortMalloc+0x168>)
 8002af0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002af2:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <pvPortMalloc+0x168>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <pvPortMalloc+0x170>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d203      	bcs.n	8002b06 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002afe:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <pvPortMalloc+0x168>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a17      	ldr	r2, [pc, #92]	@ (8002b60 <pvPortMalloc+0x170>)
 8002b04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <pvPortMalloc+0x174>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <pvPortMalloc+0x174>)
 8002b20:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002b22:	f7ff f935 	bl	8001d90 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <pvPortMalloc+0x158>
        __asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	60fb      	str	r3, [r7, #12]
    }
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <pvPortMalloc+0x154>
    return pvReturn;
 8002b48:	69fb      	ldr	r3, [r7, #28]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3728      	adds	r7, #40	@ 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20012da0 	.word	0x20012da0
 8002b58:	20012da4 	.word	0x20012da4
 8002b5c:	20012d98 	.word	0x20012d98
 8002b60:	20012da8 	.word	0x20012da8
 8002b64:	20012dac 	.word	0x20012dac

08002b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d047      	beq.n	8002c0a <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4413      	add	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0b      	blt.n	8002ba8 <vPortFree+0x40>
        __asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	60fb      	str	r3, [r7, #12]
    }
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <vPortFree+0x60>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	60bb      	str	r3, [r7, #8]
    }
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da1c      	bge.n	8002c0a <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d118      	bne.n	8002c0a <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002be4:	f7ff f8c6 	bl	8001d74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <vPortFree+0xac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <vPortFree+0xac>)
 8002bf4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002bf6:	6938      	ldr	r0, [r7, #16]
 8002bf8:	f000 f86c 	bl	8002cd4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <vPortFree+0xb0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <vPortFree+0xb0>)
 8002c04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002c06:	f7ff f8c3 	bl	8001d90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20012da4 	.word	0x20012da4
 8002c18:	20012db0 	.word	0x20012db0

08002c1c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c22:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002c26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002c28:	4b25      	ldr	r3, [pc, #148]	@ (8002cc0 <prvHeapInit+0xa4>)
 8002c2a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3307      	adds	r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <prvHeapInit+0xa4>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c54:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc4 <prvHeapInit+0xa8>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <prvHeapInit+0xa8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4413      	add	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002c68:	2208      	movs	r2, #8
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0307 	bic.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a13      	ldr	r2, [pc, #76]	@ (8002cc8 <prvHeapInit+0xac>)
 8002c7c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <prvHeapInit+0xac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <prvHeapInit+0xac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <prvHeapInit+0xac>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <prvHeapInit+0xb0>)
 8002caa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <prvHeapInit+0xb4>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20000198 	.word	0x20000198
 8002cc4:	20012d98 	.word	0x20012d98
 8002cc8:	20012da0 	.word	0x20012da0
 8002ccc:	20012da8 	.word	0x20012da8
 8002cd0:	20012da4 	.word	0x20012da4

08002cd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <prvInsertBlockIntoFreeList+0xac>)
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e002      	b.n	8002ce8 <prvInsertBlockIntoFreeList+0x14>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d8f7      	bhi.n	8002ce2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d108      	bne.n	8002d16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	441a      	add	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d118      	bne.n	8002d5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <prvInsertBlockIntoFreeList+0xb0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d00d      	beq.n	8002d52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	441a      	add	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e008      	b.n	8002d64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <prvInsertBlockIntoFreeList+0xb0>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e003      	b.n	8002d64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d002      	beq.n	8002d72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20012d98 	.word	0x20012d98
 8002d84:	20012da0 	.word	0x20012da0

08002d88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d8c:	4803      	ldr	r0, [pc, #12]	@ (8002d9c <_cbSendSystemDesc+0x14>)
 8002d8e:	f001 f9bf 	bl	8004110 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d92:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <_cbSendSystemDesc+0x18>)
 8002d94:	f001 f9bc 	bl	8004110 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	080050e0 	.word	0x080050e0
 8002da0:	08005114 	.word	0x08005114

08002da4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SEGGER_SYSVIEW_Conf+0x24>)
 8002db2:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <SEGGER_SYSVIEW_Conf+0x28>)
 8002db4:	f000 fe32 	bl	8003a1c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002db8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002dbc:	f000 fe72 	bl	8003aa4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	08002d89 	.word	0x08002d89
 8002dcc:	080051e0 	.word	0x080051e0

08002dd0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	e033      	b.n	8002e44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002ddc:	491e      	ldr	r1, [pc, #120]	@ (8002e58 <_cbSendTaskList+0x88>)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	491a      	ldr	r1, [pc, #104]	@ (8002e58 <_cbSendTaskList+0x88>)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	4c16      	ldr	r4, [pc, #88]	@ (8002e58 <_cbSendTaskList+0x88>)
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4423      	add	r3, r4
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	4d11      	ldr	r5, [pc, #68]	@ (8002e58 <_cbSendTaskList+0x88>)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	442b      	add	r3, r5
 8002e1e:	330c      	adds	r3, #12
 8002e20:	681d      	ldr	r5, [r3, #0]
 8002e22:	4e0d      	ldr	r6, [pc, #52]	@ (8002e58 <_cbSendTaskList+0x88>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4433      	add	r3, r6
 8002e30:	3310      	adds	r3, #16
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	462b      	mov	r3, r5
 8002e38:	4622      	mov	r2, r4
 8002e3a:	f000 f8bd 	bl	8002fb8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3301      	adds	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <_cbSendTaskList+0x8c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3c6      	bcc.n	8002ddc <_cbSendTaskList+0xc>
  }
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e58:	20012db4 	.word	0x20012db4
 8002e5c:	20012e54 	.word	0x20012e54

08002e60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002e68:	f7ff f892 	bl	8001f90 <xTaskGetTickCountFromISR>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2200      	movs	r2, #0
 8002e70:	469a      	mov	sl, r3
 8002e72:	4693      	mov	fp, r2
 8002e74:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	f04f 0a00 	mov.w	sl, #0
 8002e84:	f04f 0b00 	mov.w	fp, #0
 8002e88:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002e8c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e90:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e94:	4652      	mov	r2, sl
 8002e96:	465b      	mov	r3, fp
 8002e98:	1a14      	subs	r4, r2, r0
 8002e9a:	eb63 0501 	sbc.w	r5, r3, r1
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	00ab      	lsls	r3, r5, #2
 8002ea8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002eac:	00a2      	lsls	r2, r4, #2
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	eb14 0800 	adds.w	r8, r4, r0
 8002eb6:	eb45 0901 	adc.w	r9, r5, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ee8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	492b      	ldr	r1, [pc, #172]	@ (8002fa8 <SYSVIEW_AddTask+0xc0>)
 8002efa:	68b8      	ldr	r0, [r7, #8]
 8002efc:	f001 fdfc 	bl	8004af8 <memcmp>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04b      	beq.n	8002f9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002f06:	4b29      	ldr	r3, [pc, #164]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b07      	cmp	r3, #7
 8002f0c:	d903      	bls.n	8002f16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002f0e:	4828      	ldr	r0, [pc, #160]	@ (8002fb0 <SYSVIEW_AddTask+0xc8>)
 8002f10:	f001 fb8c 	bl	800462c <SEGGER_SYSVIEW_Warn>
    return;
 8002f14:	e044      	b.n	8002fa0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002f16:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4926      	ldr	r1, [pc, #152]	@ (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002f2a:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4921      	ldr	r1, [pc, #132]	@ (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	491b      	ldr	r1, [pc, #108]	@ (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3308      	adds	r3, #8
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002f56:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4916      	ldr	r1, [pc, #88]	@ (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	330c      	adds	r3, #12
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4910      	ldr	r1, [pc, #64]	@ (8002fb4 <SYSVIEW_AddTask+0xcc>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3310      	adds	r3, #16
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a08      	ldr	r2, [pc, #32]	@ (8002fac <SYSVIEW_AddTask+0xc4>)
 8002f8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f80e 	bl	8002fb8 <SYSVIEW_SendTaskInfo>
 8002f9c:	e000      	b.n	8002fa0 <SYSVIEW_AddTask+0xb8>
    return;
 8002f9e:	bf00      	nop

}
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	08005124 	.word	0x08005124
 8002fac:	20012e54 	.word	0x20012e54
 8002fb0:	0800512c 	.word	0x0800512c
 8002fb4:	20012db4 	.word	0x20012db4

08002fb8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	2214      	movs	r2, #20
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fda2 	bl	8004b18 <memset>
  TaskInfo.TaskID     = TaskID;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ff97 	bl	8003f20 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <_DoInit+0x98>)
 8003004:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <_DoInit+0x9c>)
 8003016:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a20      	ldr	r2, [pc, #128]	@ (800309c <_DoInit+0xa0>)
 800301c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003024:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <_DoInit+0x9c>)
 800303c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <_DoInit+0xa4>)
 8003042:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2210      	movs	r2, #16
 8003048:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3307      	adds	r3, #7
 8003060:	4a10      	ldr	r2, [pc, #64]	@ (80030a4 <_DoInit+0xa8>)
 8003062:	6810      	ldr	r0, [r2, #0]
 8003064:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003066:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <_DoInit+0xac>)
 800306e:	6810      	ldr	r0, [r2, #0]
 8003070:	6018      	str	r0, [r3, #0]
 8003072:	8891      	ldrh	r1, [r2, #4]
 8003074:	7992      	ldrb	r2, [r2, #6]
 8003076:	8099      	strh	r1, [r3, #4]
 8003078:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800307a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003084:	f3bf 8f5f 	dmb	sy
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	20012e58 	.word	0x20012e58
 8003098:	0800517c 	.word	0x0800517c
 800309c:	20012f00 	.word	0x20012f00
 80030a0:	20013300 	.word	0x20013300
 80030a4:	08005188 	.word	0x08005188
 80030a8:	0800518c 	.word	0x0800518c

080030ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d905      	bls.n	80030dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	e007      	b.n	80030ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	69b9      	ldr	r1, [r7, #24]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	1acb      	subs	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3b01      	subs	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f6:	4293      	cmp	r3, r2
 80030f8:	bf28      	it	cs
 80030fa:	4613      	movcs	r3, r2
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4293      	cmp	r3, r2
 8003104:	bf28      	it	cs
 8003106:	4613      	movcs	r3, r2
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	6978      	ldr	r0, [r7, #20]
 800311a:	f001 fd60 	bl	8004bde <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	4413      	add	r3, r2
 8003124:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	4413      	add	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	4413      	add	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	429a      	cmp	r2, r3
 8003146:	d101      	bne.n	800314c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800314c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1b2      	bne.n	80030c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800315c:	6a3b      	ldr	r3, [r7, #32]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3728      	adds	r7, #40	@ 0x28
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003166:	b580      	push	{r7, lr}
 8003168:	b088      	sub	sp, #32
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d911      	bls.n	80031ae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6938      	ldr	r0, [r7, #16]
 800319a:	f001 fd20 	bl	8004bde <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800319e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	441a      	add	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80031ac:	e01f      	b.n	80031ee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f001 fd0c 	bl	8004bde <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4619      	mov	r1, r3
 80031de:	6938      	ldr	r0, [r7, #16]
 80031e0:	f001 fcfd 	bl	8004bde <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80031e4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	60da      	str	r2, [r3, #12]
}
 80031ee:	bf00      	nop
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80031f6:	b480      	push	{r7}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	429a      	cmp	r2, r3
 8003210:	d808      	bhi.n	8003224 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad2      	subs	r2, r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	3b01      	subs	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e004      	b.n	800322e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800322e:	697b      	ldr	r3, [r7, #20]
}
 8003230:	4618      	mov	r0, r3
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003248:	4b3e      	ldr	r3, [pc, #248]	@ (8003344 <SEGGER_RTT_ReadNoLock+0x108>)
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <SEGGER_RTT_ReadNoLock+0x1e>
 8003256:	f7ff fed1 	bl	8002ffc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	3360      	adds	r3, #96	@ 0x60
 8003266:	4a37      	ldr	r2, [pc, #220]	@ (8003344 <SEGGER_RTT_ReadNoLock+0x108>)
 8003268:	4413      	add	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	429a      	cmp	r2, r3
 8003286:	d92b      	bls.n	80032e0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4293      	cmp	r3, r2
 8003298:	bf28      	it	cs
 800329a:	4613      	movcs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	4413      	add	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6939      	ldr	r1, [r7, #16]
 80032ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032ae:	f001 fc96 	bl	8004bde <memcpy>
    NumBytesRead += NumBytesRem;
 80032b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4413      	add	r3, r2
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	4413      	add	r3, r2
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80032ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4413      	add	r3, r2
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d8:	429a      	cmp	r2, r3
 80032da:	d101      	bne.n	80032e0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80032dc:	2300      	movs	r3, #0
 80032de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf28      	it	cs
 80032f0:	4613      	movcs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d019      	beq.n	800332e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003300:	4413      	add	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	6939      	ldr	r1, [r7, #16]
 8003308:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800330a:	f001 fc68 	bl	8004bde <memcpy>
    NumBytesRead += NumBytesRem;
 800330e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4413      	add	r3, r2
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4413      	add	r3, r2
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003338:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800333c:	4618      	mov	r0, r3
 800333e:	3730      	adds	r7, #48	@ 0x30
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20012e58 	.word	0x20012e58

08003348 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4a1f      	ldr	r2, [pc, #124]	@ (80033e4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003366:	4413      	add	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d029      	beq.n	80033c6 <SEGGER_RTT_WriteNoLock+0x7e>
 8003372:	2b02      	cmp	r3, #2
 8003374:	d82e      	bhi.n	80033d4 <SEGGER_RTT_WriteNoLock+0x8c>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <SEGGER_RTT_WriteNoLock+0x38>
 800337a:	2b01      	cmp	r3, #1
 800337c:	d013      	beq.n	80033a6 <SEGGER_RTT_WriteNoLock+0x5e>
 800337e:	e029      	b.n	80033d4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003380:	6978      	ldr	r0, [r7, #20]
 8003382:	f7ff ff38 	bl	80031f6 <_GetAvailWriteSpace>
 8003386:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d202      	bcs.n	8003396 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003394:	e021      	b.n	80033da <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff fee1 	bl	8003166 <_WriteNoCheck>
    break;
 80033a4:	e019      	b.n	80033da <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff25 	bl	80031f6 <_GetAvailWriteSpace>
 80033ac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4293      	cmp	r3, r2
 80033b4:	bf28      	it	cs
 80033b6:	4613      	movcs	r3, r2
 80033b8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff fed1 	bl	8003166 <_WriteNoCheck>
    break;
 80033c4:	e009      	b.n	80033da <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	69b9      	ldr	r1, [r7, #24]
 80033ca:	6978      	ldr	r0, [r7, #20]
 80033cc:	f7ff fe6e 	bl	80030ac <_WriteBlocking>
 80033d0:	61f8      	str	r0, [r7, #28]
    break;
 80033d2:	e002      	b.n	80033da <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
    break;
 80033d8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80033da:	69fb      	ldr	r3, [r7, #28]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20012e58 	.word	0x20012e58

080033e8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80033f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <SEGGER_RTT_Write+0x48>)
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <SEGGER_RTT_Write+0x1e>
 8003402:	f7ff fdfb 	bl	8002ffc <_DoInit>
  SEGGER_RTT_LOCK();
 8003406:	f3ef 8311 	mrs	r3, BASEPRI
 800340a:	f04f 0120 	mov.w	r1, #32
 800340e:	f381 8811 	msr	BASEPRI, r1
 8003412:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff ff95 	bl	8003348 <SEGGER_RTT_WriteNoLock>
 800341e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003426:	697b      	ldr	r3, [r7, #20]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20012e58 	.word	0x20012e58

08003434 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003442:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003450:	f7ff fdd4 	bl	8002ffc <_DoInit>
  SEGGER_RTT_LOCK();
 8003454:	f3ef 8311 	mrs	r3, BASEPRI
 8003458:	f04f 0120 	mov.w	r1, #32
 800345c:	f381 8811 	msr	BASEPRI, r1
 8003460:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003462:	4b35      	ldr	r3, [pc, #212]	@ (8003538 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003464:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800346a:	6939      	ldr	r1, [r7, #16]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	429a      	cmp	r2, r3
 8003490:	dbeb      	blt.n	800346a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003492:	e000      	b.n	8003496 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003494:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	da3f      	bge.n	8003520 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80034a0:	6939      	ldr	r1, [r7, #16]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80034b4:	6939      	ldr	r1, [r7, #16]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	3304      	adds	r3, #4
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80034ca:	6939      	ldr	r1, [r7, #16]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	3320      	adds	r3, #32
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80034de:	6939      	ldr	r1, [r7, #16]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	3328      	adds	r3, #40	@ 0x28
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80034f2:	6939      	ldr	r1, [r7, #16]
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	3324      	adds	r3, #36	@ 0x24
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003506:	6939      	ldr	r1, [r7, #16]
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	332c      	adds	r3, #44	@ 0x2c
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800351a:	f3bf 8f5f 	dmb	sy
 800351e:	e002      	b.n	8003526 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800352c:	69fb      	ldr	r3, [r7, #28]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20012e58 	.word	0x20012e58

0800353c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	@ 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800354a:	4b21      	ldr	r3, [pc, #132]	@ (80035d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003558:	f7ff fd50 	bl	8002ffc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800355c:	4b1c      	ldr	r3, [pc, #112]	@ (80035d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800355e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d82c      	bhi.n	80035c0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003566:	f3ef 8311 	mrs	r3, BASEPRI
 800356a:	f04f 0120 	mov.w	r1, #32
 800356e:	f381 8811 	msr	BASEPRI, r1
 8003572:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	3360      	adds	r3, #96	@ 0x60
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ae:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80035b0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035be:	e002      	b.n	80035c6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	@ 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20012e58 	.word	0x20012e58

080035d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00f      	beq.n	800360a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80035ea:	e002      	b.n	80035f2 <_EncodeStr+0x1e>
      Len++;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3301      	adds	r3, #1
 80035f0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f6      	bne.n	80035ec <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d901      	bls.n	800360a <_EncodeStr+0x36>
      Len = Limit;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2bfe      	cmp	r3, #254	@ 0xfe
 800360e:	d806      	bhi.n	800361e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	60fa      	str	r2, [r7, #12]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e011      	b.n	8003642 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	60fa      	str	r2, [r7, #12]
 8003624:	22ff      	movs	r2, #255	@ 0xff
 8003626:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	60fa      	str	r2, [r7, #12]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	0a19      	lsrs	r1, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	60fa      	str	r2, [r7, #12]
 800363e:	b2ca      	uxtb	r2, r1
 8003640:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003646:	e00a      	b.n	800365e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	1c53      	adds	r3, r2, #1
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1c59      	adds	r1, r3, #1
 8003652:	60f9      	str	r1, [r7, #12]
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	701a      	strb	r2, [r3, #0]
    n++;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	429a      	cmp	r2, r3
 8003664:	d3f0      	bcc.n	8003648 <_EncodeStr+0x74>
  }
  return pPayload;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003692:	4b35      	ldr	r3, [pc, #212]	@ (8003768 <_HandleIncomingPacket+0xdc>)
 8003694:	7e1b      	ldrb	r3, [r3, #24]
 8003696:	4618      	mov	r0, r3
 8003698:	1cfb      	adds	r3, r7, #3
 800369a:	2201      	movs	r2, #1
 800369c:	4619      	mov	r1, r3
 800369e:	f7ff fdcd 	bl	800323c <SEGGER_RTT_ReadNoLock>
 80036a2:	4603      	mov	r3, r0
 80036a4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dd59      	ble.n	8003760 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	2b80      	cmp	r3, #128	@ 0x80
 80036b0:	d032      	beq.n	8003718 <_HandleIncomingPacket+0x8c>
 80036b2:	2b80      	cmp	r3, #128	@ 0x80
 80036b4:	dc42      	bgt.n	800373c <_HandleIncomingPacket+0xb0>
 80036b6:	2b07      	cmp	r3, #7
 80036b8:	dc16      	bgt.n	80036e8 <_HandleIncomingPacket+0x5c>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	dd3e      	ble.n	800373c <_HandleIncomingPacket+0xb0>
 80036be:	3b01      	subs	r3, #1
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d83b      	bhi.n	800373c <_HandleIncomingPacket+0xb0>
 80036c4:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <_HandleIncomingPacket+0x40>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036ef 	.word	0x080036ef
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fb 	.word	0x080036fb
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003707 	.word	0x08003707
 80036e0:	0800370d 	.word	0x0800370d
 80036e4:	08003713 	.word	0x08003713
 80036e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80036ea:	d034      	beq.n	8003756 <_HandleIncomingPacket+0xca>
 80036ec:	e026      	b.n	800373c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036ee:	f000 fa9d 	bl	8003c2c <SEGGER_SYSVIEW_Start>
      break;
 80036f2:	e035      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036f4:	f000 fb54 	bl	8003da0 <SEGGER_SYSVIEW_Stop>
      break;
 80036f8:	e032      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036fa:	f000 fd2d 	bl	8004158 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036fe:	e02f      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003700:	f000 fcf2 	bl	80040e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003704:	e02c      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003706:	f000 fb71 	bl	8003dec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800370a:	e029      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800370c:	f000 ff50 	bl	80045b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003710:	e026      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003712:	f000 ff2f 	bl	8004574 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003716:	e023      	b.n	8003760 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003718:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <_HandleIncomingPacket+0xdc>)
 800371a:	7e1b      	ldrb	r3, [r3, #24]
 800371c:	4618      	mov	r0, r3
 800371e:	1cfb      	adds	r3, r7, #3
 8003720:	2201      	movs	r2, #1
 8003722:	4619      	mov	r1, r3
 8003724:	f7ff fd8a 	bl	800323c <SEGGER_RTT_ReadNoLock>
 8003728:	4603      	mov	r3, r0
 800372a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	dd13      	ble.n	800375a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fe9d 	bl	8004474 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800373a:	e00e      	b.n	800375a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	b25b      	sxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	da0c      	bge.n	800375e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <_HandleIncomingPacket+0xdc>)
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	4618      	mov	r0, r3
 800374a:	1cfb      	adds	r3, r7, #3
 800374c:	2201      	movs	r2, #1
 800374e:	4619      	mov	r1, r3
 8003750:	f7ff fd74 	bl	800323c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003754:	e003      	b.n	800375e <_HandleIncomingPacket+0xd2>
      break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <_HandleIncomingPacket+0xd4>
      break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <_HandleIncomingPacket+0xd4>
      break;
 800375e:	bf00      	nop
    }
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20014318 	.word	0x20014318

0800376c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003772:	2301      	movs	r3, #1
 8003774:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003780:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003786:	e00b      	b.n	80037a0 <_TrySendOverflowPacket+0x34>
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	b2da      	uxtb	r2, r3
 800378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378e:	1c59      	adds	r1, r3, #1
 8003790:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003792:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	09db      	lsrs	r3, r3, #7
 800379e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80037a4:	d8f0      	bhi.n	8003788 <_TrySendOverflowPacket+0x1c>
 80037a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80037b6:	4b25      	ldr	r3, [pc, #148]	@ (800384c <_TrySendOverflowPacket+0xe0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80037bc:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	e00b      	b.n	80037e8 <_TrySendOverflowPacket+0x7c>
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80037da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	09db      	lsrs	r3, r3, #7
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80037ec:	d8f0      	bhi.n	80037d0 <_TrySendOverflowPacket+0x64>
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80037fe:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	4618      	mov	r0, r3
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	461a      	mov	r2, r3
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	4619      	mov	r1, r3
 8003810:	f7fc fcde 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003814:	4603      	mov	r3, r0
 8003816:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800381e:	4a0a      	ldr	r2, [pc, #40]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e004      	b.n	800383c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	4a03      	ldr	r2, [pc, #12]	@ (8003848 <_TrySendOverflowPacket+0xdc>)
 800383a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800383c:	693b      	ldr	r3, [r7, #16]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3730      	adds	r7, #48	@ 0x30
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20014318 	.word	0x20014318
 800384c:	e0001004 	.word	0xe0001004

08003850 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800385c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a10 <_SendPacket+0x1c0>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d010      	beq.n	8003886 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003864:	4b6a      	ldr	r3, [pc, #424]	@ (8003a10 <_SendPacket+0x1c0>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a3 	beq.w	80039b4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800386e:	4b68      	ldr	r3, [pc, #416]	@ (8003a10 <_SendPacket+0x1c0>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d109      	bne.n	800388a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003876:	f7ff ff79 	bl	800376c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800387a:	4b65      	ldr	r3, [pc, #404]	@ (8003a10 <_SendPacket+0x1c0>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	f040 809a 	bne.w	80039b8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003884:	e001      	b.n	800388a <_SendPacket+0x3a>
    goto Send;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <_SendPacket+0x3c>
Send:
 800388a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b1f      	cmp	r3, #31
 8003890:	d809      	bhi.n	80038a6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003892:	4b5f      	ldr	r3, [pc, #380]	@ (8003a10 <_SendPacket+0x1c0>)
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 808b 	bne.w	80039bc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b17      	cmp	r3, #23
 80038aa:	d807      	bhi.n	80038bc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e03d      	b.n	8003938 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80038c8:	d912      	bls.n	80038f0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	09da      	lsrs	r2, r3, #7
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	3a01      	subs	r2, #1
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e006      	b.n	80038fe <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b7f      	cmp	r3, #127	@ 0x7f
 8003902:	d912      	bls.n	800392a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	09da      	lsrs	r2, r3, #7
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3b01      	subs	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	3a01      	subs	r2, #1
 800391c:	60fa      	str	r2, [r7, #12]
 800391e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e006      	b.n	8003938 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3b01      	subs	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003938:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <_SendPacket+0x1c4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800393e:	4b34      	ldr	r3, [pc, #208]	@ (8003a10 <_SendPacket+0x1c0>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	e00b      	b.n	800396a <_SendPacket+0x11a>
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	6279      	str	r1, [r7, #36]	@ 0x24
 800395c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	09db      	lsrs	r3, r3, #7
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	2b7f      	cmp	r3, #127	@ 0x7f
 800396e:	d8f0      	bhi.n	8003952 <_SendPacket+0x102>
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	627a      	str	r2, [r7, #36]	@ 0x24
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003980:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <_SendPacket+0x1c0>)
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	4618      	mov	r0, r3
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	461a      	mov	r2, r3
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	f7fc fc1e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003994:	4603      	mov	r3, r0
 8003996:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800399e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <_SendPacket+0x1c0>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	60d3      	str	r3, [r2, #12]
 80039a4:	e00b      	b.n	80039be <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80039a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <_SendPacket+0x1c0>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <_SendPacket+0x1c0>)
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	e004      	b.n	80039be <_SendPacket+0x16e>
    goto SendDone;
 80039b4:	bf00      	nop
 80039b6:	e002      	b.n	80039be <_SendPacket+0x16e>
      goto SendDone;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <_SendPacket+0x16e>
      goto SendDone;
 80039bc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80039be:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <_SendPacket+0x1c0>)
 80039c0:	7e1b      	ldrb	r3, [r3, #24]
 80039c2:	4619      	mov	r1, r3
 80039c4:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <_SendPacket+0x1c8>)
 80039c6:	460b      	mov	r3, r1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	440b      	add	r3, r1
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	336c      	adds	r3, #108	@ 0x6c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <_SendPacket+0x1c0>)
 80039d6:	7e1b      	ldrb	r3, [r3, #24]
 80039d8:	4618      	mov	r0, r3
 80039da:	490f      	ldr	r1, [pc, #60]	@ (8003a18 <_SendPacket+0x1c8>)
 80039dc:	4603      	mov	r3, r0
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4403      	add	r3, r0
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3370      	adds	r3, #112	@ 0x70
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d00b      	beq.n	8003a06 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <_SendPacket+0x1c0>)
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d107      	bne.n	8003a06 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <_SendPacket+0x1c0>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80039fc:	f7ff fe46 	bl	800368c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003a00:	4b03      	ldr	r3, [pc, #12]	@ (8003a10 <_SendPacket+0x1c0>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003a06:	bf00      	nop
 8003a08:	3728      	adds	r7, #40	@ 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20014318 	.word	0x20014318
 8003a14:	e0001004 	.word	0xe0001004
 8003a18:	20012e58 	.word	0x20012e58

08003a1c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a30:	4917      	ldr	r1, [pc, #92]	@ (8003a90 <SEGGER_SYSVIEW_Init+0x74>)
 8003a32:	4818      	ldr	r0, [pc, #96]	@ (8003a94 <SEGGER_SYSVIEW_Init+0x78>)
 8003a34:	f7ff fcfe 	bl	8003434 <SEGGER_RTT_AllocUpBuffer>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a3e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003a40:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a42:	785a      	ldrb	r2, [r3, #1]
 8003a44:	4b14      	ldr	r3, [pc, #80]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a46:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003a48:	4b13      	ldr	r3, [pc, #76]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a4a:	7e1b      	ldrb	r3, [r3, #24]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2308      	movs	r3, #8
 8003a54:	4a11      	ldr	r2, [pc, #68]	@ (8003a9c <SEGGER_SYSVIEW_Init+0x80>)
 8003a56:	490f      	ldr	r1, [pc, #60]	@ (8003a94 <SEGGER_SYSVIEW_Init+0x78>)
 8003a58:	f7ff fd70 	bl	800353c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <SEGGER_SYSVIEW_Init+0x84>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0c      	ldr	r2, [pc, #48]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a68:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003a70:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003a76:	4a08      	ldr	r2, [pc, #32]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003a7c:	4a06      	ldr	r2, [pc, #24]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003a82:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20013310 	.word	0x20013310
 8003a94:	08005194 	.word	0x08005194
 8003a98:	20014318 	.word	0x20014318
 8003a9c:	20014310 	.word	0x20014310
 8003aa0:	e0001004 	.word	0xe0001004

08003aa4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003aac:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6113      	str	r3, [r2, #16]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20014318 	.word	0x20014318

08003ac4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003acc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad0:	f04f 0120 	mov.w	r1, #32
 8003ad4:	f381 8811 	msr	BASEPRI, r1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4808      	ldr	r0, [pc, #32]	@ (8003afc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003adc:	f7ff fdca 	bl	8003674 <_PreparePacket>
 8003ae0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68b8      	ldr	r0, [r7, #8]
 8003ae8:	f7ff feb2 	bl	8003850 <_SendPacket>
  RECORD_END();
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f383 8811 	msr	BASEPRI, r3
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20014348 	.word	0x20014348

08003b00 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0e:	f04f 0120 	mov.w	r1, #32
 8003b12:	f381 8811 	msr	BASEPRI, r1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	4816      	ldr	r0, [pc, #88]	@ (8003b74 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003b1a:	f7ff fdab 	bl	8003674 <_PreparePacket>
 8003b1e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e00b      	b.n	8003b46 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1c59      	adds	r1, r3, #1
 8003b36:	61f9      	str	r1, [r7, #28]
 8003b38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	09db      	lsrs	r3, r3, #7
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b4a:	d8f0      	bhi.n	8003b2e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	61fa      	str	r2, [r7, #28]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	6938      	ldr	r0, [r7, #16]
 8003b62:	f7ff fe75 	bl	8003850 <_SendPacket>
  RECORD_END();
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f383 8811 	msr	BASEPRI, r3
}
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20014348 	.word	0x20014348

08003b78 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08c      	sub	sp, #48	@ 0x30
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b84:	f3ef 8311 	mrs	r3, BASEPRI
 8003b88:	f04f 0120 	mov.w	r1, #32
 8003b8c:	f381 8811 	msr	BASEPRI, r1
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	4825      	ldr	r0, [pc, #148]	@ (8003c28 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003b94:	f7ff fd6e 	bl	8003674 <_PreparePacket>
 8003b98:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba6:	e00b      	b.n	8003bc0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003bb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbc:	09db      	lsrs	r3, r3, #7
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bc4:	d8f0      	bhi.n	8003ba8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	e00b      	b.n	8003bf8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	1c59      	adds	r1, r3, #1
 8003be8:	6279      	str	r1, [r7, #36]	@ 0x24
 8003bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	09db      	lsrs	r3, r3, #7
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bfc:	d8f0      	bhi.n	8003be0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	6979      	ldr	r1, [r7, #20]
 8003c12:	69b8      	ldr	r0, [r7, #24]
 8003c14:	f7ff fe1c 	bl	8003850 <_SendPacket>
  RECORD_END();
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f383 8811 	msr	BASEPRI, r3
}
 8003c1e:	bf00      	nop
 8003c20:	3730      	adds	r7, #48	@ 0x30
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20014348 	.word	0x20014348

08003c2c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	@ 0x30
 8003c30:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003c32:	4b58      	ldr	r3, [pc, #352]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003c38:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3c:	f04f 0120 	mov.w	r1, #32
 8003c40:	f381 8811 	msr	BASEPRI, r1
 8003c44:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003c46:	4b53      	ldr	r3, [pc, #332]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4952      	ldr	r1, [pc, #328]	@ (8003d98 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fabe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003c5a:	200a      	movs	r0, #10
 8003c5c:	f7ff ff32 	bl	8003ac4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c60:	f3ef 8311 	mrs	r3, BASEPRI
 8003c64:	f04f 0120 	mov.w	r1, #32
 8003c68:	f381 8811 	msr	BASEPRI, r1
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	484b      	ldr	r0, [pc, #300]	@ (8003d9c <SEGGER_SYSVIEW_Start+0x170>)
 8003c70:	f7ff fd00 	bl	8003674 <_PreparePacket>
 8003c74:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7e:	4b45      	ldr	r3, [pc, #276]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c84:	e00b      	b.n	8003c9e <SEGGER_SYSVIEW_Start+0x72>
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	1c59      	adds	r1, r3, #1
 8003c8e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003c90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	09db      	lsrs	r3, r3, #7
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ca2:	d8f0      	bhi.n	8003c86 <SEGGER_SYSVIEW_Start+0x5a>
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb8:	4b36      	ldr	r3, [pc, #216]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	e00b      	b.n	8003cd8 <SEGGER_SYSVIEW_Start+0xac>
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	6279      	str	r1, [r7, #36]	@ 0x24
 8003cca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	09db      	lsrs	r3, r3, #7
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cdc:	d8f0      	bhi.n	8003cc0 <SEGGER_SYSVIEW_Start+0x94>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	4b28      	ldr	r3, [pc, #160]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e00b      	b.n	8003d12 <SEGGER_SYSVIEW_Start+0xe6>
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	1c59      	adds	r1, r3, #1
 8003d02:	61f9      	str	r1, [r7, #28]
 8003d04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	09db      	lsrs	r3, r3, #7
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d16:	d8f0      	bhi.n	8003cfa <SEGGER_SYSVIEW_Start+0xce>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	e00b      	b.n	8003d4a <SEGGER_SYSVIEW_Start+0x11e>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1c59      	adds	r1, r3, #1
 8003d3a:	6179      	str	r1, [r7, #20]
 8003d3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	09db      	lsrs	r3, r3, #7
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d4e:	d8f0      	bhi.n	8003d32 <SEGGER_SYSVIEW_Start+0x106>
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	617a      	str	r2, [r7, #20]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d60:	2218      	movs	r2, #24
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fd73 	bl	8003850 <_SendPacket>
      RECORD_END();
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d70:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <SEGGER_SYSVIEW_Start+0x168>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003d7e:	f000 f9eb 	bl	8004158 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003d82:	f000 f9b1 	bl	80040e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003d86:	f000 fc13 	bl	80045b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003d8a:	bf00      	nop
 8003d8c:	3730      	adds	r7, #48	@ 0x30
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20014318 	.word	0x20014318
 8003d98:	080051e8 	.word	0x080051e8
 8003d9c:	20014348 	.word	0x20014348

08003da0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003da6:	f3ef 8311 	mrs	r3, BASEPRI
 8003daa:	f04f 0120 	mov.w	r1, #32
 8003dae:	f381 8811 	msr	BASEPRI, r1
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	480b      	ldr	r0, [pc, #44]	@ (8003de4 <SEGGER_SYSVIEW_Stop+0x44>)
 8003db6:	f7ff fc5d 	bl	8003674 <_PreparePacket>
 8003dba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <SEGGER_SYSVIEW_Stop+0x48>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003dc4:	220b      	movs	r2, #11
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	6838      	ldr	r0, [r7, #0]
 8003dca:	f7ff fd41 	bl	8003850 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003dce:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <SEGGER_SYSVIEW_Stop+0x48>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f383 8811 	msr	BASEPRI, r3
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20014348 	.word	0x20014348
 8003de8:	20014318 	.word	0x20014318

08003dec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	@ 0x30
 8003df0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003df2:	f3ef 8311 	mrs	r3, BASEPRI
 8003df6:	f04f 0120 	mov.w	r1, #32
 8003dfa:	f381 8811 	msr	BASEPRI, r1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	4845      	ldr	r0, [pc, #276]	@ (8003f18 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003e02:	f7ff fc37 	bl	8003674 <_PreparePacket>
 8003e06:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e10:	4b42      	ldr	r3, [pc, #264]	@ (8003f1c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e16:	e00b      	b.n	8003e30 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003e22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e34:	d8f0      	bhi.n	8003e18 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	e00b      	b.n	8003e6a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	1c59      	adds	r1, r3, #1
 8003e5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8003e5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	09db      	lsrs	r3, r3, #7
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e6e:	d8f0      	bhi.n	8003e52 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	4b25      	ldr	r3, [pc, #148]	@ (8003f1c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e00b      	b.n	8003ea4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	61f9      	str	r1, [r7, #28]
 8003e96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	09db      	lsrs	r3, r3, #7
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ea8:	d8f0      	bhi.n	8003e8c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	61fa      	str	r2, [r7, #28]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e00b      	b.n	8003edc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1c59      	adds	r1, r3, #1
 8003ecc:	6179      	str	r1, [r7, #20]
 8003ece:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	09db      	lsrs	r3, r3, #7
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ee0:	d8f0      	bhi.n	8003ec4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	617a      	str	r2, [r7, #20]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003ef2:	2218      	movs	r2, #24
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f7ff fcaa 	bl	8003850 <_SendPacket>
  RECORD_END();
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003f0a:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	4798      	blx	r3
  }
}
 8003f10:	bf00      	nop
 8003f12:	3730      	adds	r7, #48	@ 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20014348 	.word	0x20014348
 8003f1c:	20014318 	.word	0x20014318

08003f20 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b092      	sub	sp, #72	@ 0x48
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003f28:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2c:	f04f 0120 	mov.w	r1, #32
 8003f30:	f381 8811 	msr	BASEPRI, r1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	486a      	ldr	r0, [pc, #424]	@ (80040e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003f38:	f7ff fb9c 	bl	8003674 <_PreparePacket>
 8003f3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b66      	ldr	r3, [pc, #408]	@ (80040e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f52:	e00b      	b.n	8003f6c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	6479      	str	r1, [r7, #68]	@ 0x44
 8003f5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f68:	09db      	lsrs	r3, r3, #7
 8003f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f70:	d8f0      	bhi.n	8003f54 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f8c:	e00b      	b.n	8003fa6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003f98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	09db      	lsrs	r3, r3, #7
 8003fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003faa:	d8f0      	bhi.n	8003f8e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fb05 	bl	80035d4 <_EncodeStr>
 8003fca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003fcc:	2209      	movs	r2, #9
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	6938      	ldr	r0, [r7, #16]
 8003fd2:	f7ff fc3d 	bl	8003850 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fea:	e00b      	b.n	8004004 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	6379      	str	r1, [r7, #52]	@ 0x34
 8003ff6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004000:	09db      	lsrs	r3, r3, #7
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	2b7f      	cmp	r3, #127	@ 0x7f
 8004008:	d8f0      	bhi.n	8003fec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004024:	e00b      	b.n	800403e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004030:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	09db      	lsrs	r3, r3, #7
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	2b7f      	cmp	r3, #127	@ 0x7f
 8004042:	d8f0      	bhi.n	8004026 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800404a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	e00b      	b.n	8004078 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	6279      	str	r1, [r7, #36]	@ 0x24
 800406a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	09db      	lsrs	r3, r3, #7
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b7f      	cmp	r3, #127	@ 0x7f
 800407c:	d8f0      	bhi.n	8004060 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	627a      	str	r2, [r7, #36]	@ 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	e00b      	b.n	80040b0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	1c59      	adds	r1, r3, #1
 80040a0:	61f9      	str	r1, [r7, #28]
 80040a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	09db      	lsrs	r3, r3, #7
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80040b4:	d8f0      	bhi.n	8004098 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	61fa      	str	r2, [r7, #28]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80040c6:	2215      	movs	r2, #21
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f7ff fbc0 	bl	8003850 <_SendPacket>
  RECORD_END();
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f383 8811 	msr	BASEPRI, r3
}
 80040d6:	bf00      	nop
 80040d8:	3748      	adds	r7, #72	@ 0x48
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20014348 	.word	0x20014348
 80040e4:	20014318 	.word	0x20014318

080040e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80040ec:	4b07      	ldr	r3, [pc, #28]	@ (800410c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80040fe:	4b03      	ldr	r3, [pc, #12]	@ (800410c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4798      	blx	r3
  }
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20014318 	.word	0x20014318

08004110 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004118:	f3ef 8311 	mrs	r3, BASEPRI
 800411c:	f04f 0120 	mov.w	r1, #32
 8004120:	f381 8811 	msr	BASEPRI, r1
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	480b      	ldr	r0, [pc, #44]	@ (8004154 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004128:	f7ff faa4 	bl	8003674 <_PreparePacket>
 800412c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800412e:	2280      	movs	r2, #128	@ 0x80
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	6938      	ldr	r0, [r7, #16]
 8004134:	f7ff fa4e 	bl	80035d4 <_EncodeStr>
 8004138:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800413a:	220e      	movs	r2, #14
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	6938      	ldr	r0, [r7, #16]
 8004140:	f7ff fb86 	bl	8003850 <_SendPacket>
  RECORD_END();
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f383 8811 	msr	BASEPRI, r3
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20014348 	.word	0x20014348

08004158 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01a      	beq.n	800419c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004170:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4798      	blx	r3
 8004178:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800417c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800417e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	000a      	movs	r2, r1
 800418c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800418e:	4613      	mov	r3, r2
 8004190:	461a      	mov	r2, r3
 8004192:	4621      	mov	r1, r4
 8004194:	200d      	movs	r0, #13
 8004196:	f7ff fcef 	bl	8003b78 <SEGGER_SYSVIEW_RecordU32x2>
 800419a:	e006      	b.n	80041aa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	200c      	movs	r0, #12
 80041a4:	f7ff fcac 	bl	8003b00 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd90      	pop	{r4, r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20014318 	.word	0x20014318
 80041b8:	e0001004 	.word	0xe0001004

080041bc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041c2:	f3ef 8311 	mrs	r3, BASEPRI
 80041c6:	f04f 0120 	mov.w	r1, #32
 80041ca:	f381 8811 	msr	BASEPRI, r1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	4819      	ldr	r0, [pc, #100]	@ (8004238 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80041d2:	f7ff fa4f 	bl	8003674 <_PreparePacket>
 80041d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80041dc:	4b17      	ldr	r3, [pc, #92]	@ (800423c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e00b      	b.n	8004208 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	1c59      	adds	r1, r3, #1
 80041f8:	6179      	str	r1, [r7, #20]
 80041fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	09db      	lsrs	r3, r3, #7
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b7f      	cmp	r3, #127	@ 0x7f
 800420c:	d8f0      	bhi.n	80041f0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	617a      	str	r2, [r7, #20]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800421e:	2202      	movs	r2, #2
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68b8      	ldr	r0, [r7, #8]
 8004224:	f7ff fb14 	bl	8003850 <_SendPacket>
  RECORD_END();
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f383 8811 	msr	BASEPRI, r3
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20014348 	.word	0x20014348
 800423c:	e000ed04 	.word	0xe000ed04

08004240 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004246:	f3ef 8311 	mrs	r3, BASEPRI
 800424a:	f04f 0120 	mov.w	r1, #32
 800424e:	f381 8811 	msr	BASEPRI, r1
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	4807      	ldr	r0, [pc, #28]	@ (8004274 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004256:	f7ff fa0d 	bl	8003674 <_PreparePacket>
 800425a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800425c:	2203      	movs	r2, #3
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	6838      	ldr	r0, [r7, #0]
 8004262:	f7ff faf5 	bl	8003850 <_SendPacket>
  RECORD_END();
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f383 8811 	msr	BASEPRI, r3
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20014348 	.word	0x20014348

08004278 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800427e:	f3ef 8311 	mrs	r3, BASEPRI
 8004282:	f04f 0120 	mov.w	r1, #32
 8004286:	f381 8811 	msr	BASEPRI, r1
 800428a:	607b      	str	r3, [r7, #4]
 800428c:	4807      	ldr	r0, [pc, #28]	@ (80042ac <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800428e:	f7ff f9f1 	bl	8003674 <_PreparePacket>
 8004292:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004294:	2212      	movs	r2, #18
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	6838      	ldr	r0, [r7, #0]
 800429a:	f7ff fad9 	bl	8003850 <_SendPacket>
  RECORD_END();
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f383 8811 	msr	BASEPRI, r3
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20014348 	.word	0x20014348

080042b0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042b6:	f3ef 8311 	mrs	r3, BASEPRI
 80042ba:	f04f 0120 	mov.w	r1, #32
 80042be:	f381 8811 	msr	BASEPRI, r1
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	4807      	ldr	r0, [pc, #28]	@ (80042e4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80042c6:	f7ff f9d5 	bl	8003674 <_PreparePacket>
 80042ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80042cc:	2211      	movs	r2, #17
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	6838      	ldr	r0, [r7, #0]
 80042d2:	f7ff fabd 	bl	8003850 <_SendPacket>
  RECORD_END();
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f383 8811 	msr	BASEPRI, r3
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20014348 	.word	0x20014348

080042e8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042f0:	f3ef 8311 	mrs	r3, BASEPRI
 80042f4:	f04f 0120 	mov.w	r1, #32
 80042f8:	f381 8811 	msr	BASEPRI, r1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	4819      	ldr	r0, [pc, #100]	@ (8004364 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004300:	f7ff f9b8 	bl	8003674 <_PreparePacket>
 8004304:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800430a:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e00b      	b.n	8004336 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	1c59      	adds	r1, r3, #1
 8004326:	61f9      	str	r1, [r7, #28]
 8004328:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	09db      	lsrs	r3, r3, #7
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b7f      	cmp	r3, #127	@ 0x7f
 800433a:	d8f0      	bhi.n	800431e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800434c:	2208      	movs	r2, #8
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	6938      	ldr	r0, [r7, #16]
 8004352:	f7ff fa7d 	bl	8003850 <_SendPacket>
  RECORD_END();
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f383 8811 	msr	BASEPRI, r3
}
 800435c:	bf00      	nop
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20014348 	.word	0x20014348
 8004368:	20014318 	.word	0x20014318

0800436c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004374:	f3ef 8311 	mrs	r3, BASEPRI
 8004378:	f04f 0120 	mov.w	r1, #32
 800437c:	f381 8811 	msr	BASEPRI, r1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	4819      	ldr	r0, [pc, #100]	@ (80043e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004384:	f7ff f976 	bl	8003674 <_PreparePacket>
 8004388:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e00b      	b.n	80043ba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	61f9      	str	r1, [r7, #28]
 80043ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	09db      	lsrs	r3, r3, #7
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80043be:	d8f0      	bhi.n	80043a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	61fa      	str	r2, [r7, #28]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80043d0:	2204      	movs	r2, #4
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	6938      	ldr	r0, [r7, #16]
 80043d6:	f7ff fa3b 	bl	8003850 <_SendPacket>
  RECORD_END();
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f383 8811 	msr	BASEPRI, r3
}
 80043e0:	bf00      	nop
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20014348 	.word	0x20014348
 80043ec:	20014318 	.word	0x20014318

080043f0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043f8:	f3ef 8311 	mrs	r3, BASEPRI
 80043fc:	f04f 0120 	mov.w	r1, #32
 8004400:	f381 8811 	msr	BASEPRI, r1
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	4819      	ldr	r0, [pc, #100]	@ (800446c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004408:	f7ff f934 	bl	8003674 <_PreparePacket>
 800440c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004412:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	e00b      	b.n	800443e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1c59      	adds	r1, r3, #1
 800442e:	61f9      	str	r1, [r7, #28]
 8004430:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	09db      	lsrs	r3, r3, #7
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b7f      	cmp	r3, #127	@ 0x7f
 8004442:	d8f0      	bhi.n	8004426 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	61fa      	str	r2, [r7, #28]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004454:	2206      	movs	r2, #6
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	6938      	ldr	r0, [r7, #16]
 800445a:	f7ff f9f9 	bl	8003850 <_SendPacket>
  RECORD_END();
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f383 8811 	msr	BASEPRI, r3
}
 8004464:	bf00      	nop
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20014348 	.word	0x20014348
 8004470:	20014318 	.word	0x20014318

08004474 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	@ 0x30
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800447e:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d06d      	beq.n	8004562 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004486:	4b39      	ldr	r3, [pc, #228]	@ (800456c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800448c:	2300      	movs	r3, #0
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004490:	e008      	b.n	80044a4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a0:	3301      	adds	r3, #1
 80044a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3f2      	bcc.n	8004492 <SEGGER_SYSVIEW_SendModule+0x1e>
 80044ac:	e000      	b.n	80044b0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80044ae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d055      	beq.n	8004562 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044b6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ba:	f04f 0120 	mov.w	r1, #32
 80044be:	f381 8811 	msr	BASEPRI, r1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	482a      	ldr	r0, [pc, #168]	@ (8004570 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80044c6:	f7ff f8d5 	bl	8003674 <_PreparePacket>
 80044ca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	e00b      	b.n	80044f2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	1c59      	adds	r1, r3, #1
 80044e2:	6279      	str	r1, [r7, #36]	@ 0x24
 80044e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	09db      	lsrs	r3, r3, #7
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80044f6:	d8f0      	bhi.n	80044da <SEGGER_SYSVIEW_SendModule+0x66>
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e00b      	b.n	800452c <SEGGER_SYSVIEW_SendModule+0xb8>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	61f9      	str	r1, [r7, #28]
 800451e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	09db      	lsrs	r3, r3, #7
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004530:	d8f0      	bhi.n	8004514 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	61fa      	str	r2, [r7, #28]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2280      	movs	r2, #128	@ 0x80
 8004548:	4619      	mov	r1, r3
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff f842 	bl	80035d4 <_EncodeStr>
 8004550:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004552:	2216      	movs	r2, #22
 8004554:	68f9      	ldr	r1, [r7, #12]
 8004556:	6938      	ldr	r0, [r7, #16]
 8004558:	f7ff f97a 	bl	8003850 <_SendPacket>
      RECORD_END();
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004562:	bf00      	nop
 8004564:	3730      	adds	r7, #48	@ 0x30
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20014340 	.word	0x20014340
 8004570:	20014348 	.word	0x20014348

08004574 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800457a:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00f      	beq.n	80045a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004582:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f2      	bne.n	8004588 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20014340 	.word	0x20014340

080045b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80045b6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ba:	f04f 0120 	mov.w	r1, #32
 80045be:	f381 8811 	msr	BASEPRI, r1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	4817      	ldr	r0, [pc, #92]	@ (8004624 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80045c6:	f7ff f855 	bl	8003674 <_PreparePacket>
 80045ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	4b14      	ldr	r3, [pc, #80]	@ (8004628 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e00b      	b.n	80045f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	6179      	str	r1, [r7, #20]
 80045e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	09db      	lsrs	r3, r3, #7
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80045f8:	d8f0      	bhi.n	80045dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	617a      	str	r2, [r7, #20]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800460a:	221b      	movs	r2, #27
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f7ff f91e 	bl	8003850 <_SendPacket>
  RECORD_END();
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f383 8811 	msr	BASEPRI, r3
}
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20014348 	.word	0x20014348
 8004628:	20014344 	.word	0x20014344

0800462c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004634:	f3ef 8311 	mrs	r3, BASEPRI
 8004638:	f04f 0120 	mov.w	r1, #32
 800463c:	f381 8811 	msr	BASEPRI, r1
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	4827      	ldr	r0, [pc, #156]	@ (80046e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004644:	f7ff f816 	bl	8003674 <_PreparePacket>
 8004648:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800464a:	2280      	movs	r2, #128	@ 0x80
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f7fe ffc0 	bl	80035d4 <_EncodeStr>
 8004654:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
 800465a:	2301      	movs	r3, #1
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	e00b      	b.n	8004678 <SEGGER_SYSVIEW_Warn+0x4c>
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	1c59      	adds	r1, r3, #1
 8004668:	6279      	str	r1, [r7, #36]	@ 0x24
 800466a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	09db      	lsrs	r3, r3, #7
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2b7f      	cmp	r3, #127	@ 0x7f
 800467c:	d8f0      	bhi.n	8004660 <SEGGER_SYSVIEW_Warn+0x34>
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	627a      	str	r2, [r7, #36]	@ 0x24
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e00b      	b.n	80046b0 <SEGGER_SYSVIEW_Warn+0x84>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	61f9      	str	r1, [r7, #28]
 80046a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	09db      	lsrs	r3, r3, #7
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80046b4:	d8f0      	bhi.n	8004698 <SEGGER_SYSVIEW_Warn+0x6c>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	61fa      	str	r2, [r7, #28]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046c6:	221a      	movs	r2, #26
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	6938      	ldr	r0, [r7, #16]
 80046cc:	f7ff f8c0 	bl	8003850 <_SendPacket>
  RECORD_END();
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f383 8811 	msr	BASEPRI, r3
}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	@ 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20014348 	.word	0x20014348

080046e4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fe fe76 	bl	80033e8 <SEGGER_RTT_Write>
  return len;
 80046fc:	683b      	ldr	r3, [r7, #0]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <std>:
 8004708:	2300      	movs	r3, #0
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	e9c0 3300 	strd	r3, r3, [r0]
 8004712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004716:	6083      	str	r3, [r0, #8]
 8004718:	8181      	strh	r1, [r0, #12]
 800471a:	6643      	str	r3, [r0, #100]	@ 0x64
 800471c:	81c2      	strh	r2, [r0, #14]
 800471e:	6183      	str	r3, [r0, #24]
 8004720:	4619      	mov	r1, r3
 8004722:	2208      	movs	r2, #8
 8004724:	305c      	adds	r0, #92	@ 0x5c
 8004726:	f000 f9f7 	bl	8004b18 <memset>
 800472a:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <std+0x58>)
 800472c:	6263      	str	r3, [r4, #36]	@ 0x24
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <std+0x5c>)
 8004730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004732:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <std+0x60>)
 8004734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004736:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <std+0x64>)
 8004738:	6323      	str	r3, [r4, #48]	@ 0x30
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <std+0x68>)
 800473c:	6224      	str	r4, [r4, #32]
 800473e:	429c      	cmp	r4, r3
 8004740:	d006      	beq.n	8004750 <std+0x48>
 8004742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004746:	4294      	cmp	r4, r2
 8004748:	d002      	beq.n	8004750 <std+0x48>
 800474a:	33d0      	adds	r3, #208	@ 0xd0
 800474c:	429c      	cmp	r4, r3
 800474e:	d105      	bne.n	800475c <std+0x54>
 8004750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004758:	f000 ba3e 	b.w	8004bd8 <__retarget_lock_init_recursive>
 800475c:	bd10      	pop	{r4, pc}
 800475e:	bf00      	nop
 8004760:	08004949 	.word	0x08004949
 8004764:	0800496b 	.word	0x0800496b
 8004768:	080049a3 	.word	0x080049a3
 800476c:	080049c7 	.word	0x080049c7
 8004770:	2001442c 	.word	0x2001442c

08004774 <stdio_exit_handler>:
 8004774:	4a02      	ldr	r2, [pc, #8]	@ (8004780 <stdio_exit_handler+0xc>)
 8004776:	4903      	ldr	r1, [pc, #12]	@ (8004784 <stdio_exit_handler+0x10>)
 8004778:	4803      	ldr	r0, [pc, #12]	@ (8004788 <stdio_exit_handler+0x14>)
 800477a:	f000 b869 	b.w	8004850 <_fwalk_sglue>
 800477e:	bf00      	nop
 8004780:	20000010 	.word	0x20000010
 8004784:	08004ef5 	.word	0x08004ef5
 8004788:	20000020 	.word	0x20000020

0800478c <cleanup_stdio>:
 800478c:	6841      	ldr	r1, [r0, #4]
 800478e:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <cleanup_stdio+0x34>)
 8004790:	4299      	cmp	r1, r3
 8004792:	b510      	push	{r4, lr}
 8004794:	4604      	mov	r4, r0
 8004796:	d001      	beq.n	800479c <cleanup_stdio+0x10>
 8004798:	f000 fbac 	bl	8004ef4 <_fflush_r>
 800479c:	68a1      	ldr	r1, [r4, #8]
 800479e:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <cleanup_stdio+0x38>)
 80047a0:	4299      	cmp	r1, r3
 80047a2:	d002      	beq.n	80047aa <cleanup_stdio+0x1e>
 80047a4:	4620      	mov	r0, r4
 80047a6:	f000 fba5 	bl	8004ef4 <_fflush_r>
 80047aa:	68e1      	ldr	r1, [r4, #12]
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <cleanup_stdio+0x3c>)
 80047ae:	4299      	cmp	r1, r3
 80047b0:	d004      	beq.n	80047bc <cleanup_stdio+0x30>
 80047b2:	4620      	mov	r0, r4
 80047b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b8:	f000 bb9c 	b.w	8004ef4 <_fflush_r>
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	bf00      	nop
 80047c0:	2001442c 	.word	0x2001442c
 80047c4:	20014494 	.word	0x20014494
 80047c8:	200144fc 	.word	0x200144fc

080047cc <global_stdio_init.part.0>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <global_stdio_init.part.0+0x30>)
 80047d0:	4c0b      	ldr	r4, [pc, #44]	@ (8004800 <global_stdio_init.part.0+0x34>)
 80047d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004804 <global_stdio_init.part.0+0x38>)
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	4620      	mov	r0, r4
 80047d8:	2200      	movs	r2, #0
 80047da:	2104      	movs	r1, #4
 80047dc:	f7ff ff94 	bl	8004708 <std>
 80047e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047e4:	2201      	movs	r2, #1
 80047e6:	2109      	movs	r1, #9
 80047e8:	f7ff ff8e 	bl	8004708 <std>
 80047ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047f0:	2202      	movs	r2, #2
 80047f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f6:	2112      	movs	r1, #18
 80047f8:	f7ff bf86 	b.w	8004708 <std>
 80047fc:	20014564 	.word	0x20014564
 8004800:	2001442c 	.word	0x2001442c
 8004804:	08004775 	.word	0x08004775

08004808 <__sfp_lock_acquire>:
 8004808:	4801      	ldr	r0, [pc, #4]	@ (8004810 <__sfp_lock_acquire+0x8>)
 800480a:	f000 b9e6 	b.w	8004bda <__retarget_lock_acquire_recursive>
 800480e:	bf00      	nop
 8004810:	2001456d 	.word	0x2001456d

08004814 <__sfp_lock_release>:
 8004814:	4801      	ldr	r0, [pc, #4]	@ (800481c <__sfp_lock_release+0x8>)
 8004816:	f000 b9e1 	b.w	8004bdc <__retarget_lock_release_recursive>
 800481a:	bf00      	nop
 800481c:	2001456d 	.word	0x2001456d

08004820 <__sinit>:
 8004820:	b510      	push	{r4, lr}
 8004822:	4604      	mov	r4, r0
 8004824:	f7ff fff0 	bl	8004808 <__sfp_lock_acquire>
 8004828:	6a23      	ldr	r3, [r4, #32]
 800482a:	b11b      	cbz	r3, 8004834 <__sinit+0x14>
 800482c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004830:	f7ff bff0 	b.w	8004814 <__sfp_lock_release>
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <__sinit+0x28>)
 8004836:	6223      	str	r3, [r4, #32]
 8004838:	4b04      	ldr	r3, [pc, #16]	@ (800484c <__sinit+0x2c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f5      	bne.n	800482c <__sinit+0xc>
 8004840:	f7ff ffc4 	bl	80047cc <global_stdio_init.part.0>
 8004844:	e7f2      	b.n	800482c <__sinit+0xc>
 8004846:	bf00      	nop
 8004848:	0800478d 	.word	0x0800478d
 800484c:	20014564 	.word	0x20014564

08004850 <_fwalk_sglue>:
 8004850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004854:	4607      	mov	r7, r0
 8004856:	4688      	mov	r8, r1
 8004858:	4614      	mov	r4, r2
 800485a:	2600      	movs	r6, #0
 800485c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004860:	f1b9 0901 	subs.w	r9, r9, #1
 8004864:	d505      	bpl.n	8004872 <_fwalk_sglue+0x22>
 8004866:	6824      	ldr	r4, [r4, #0]
 8004868:	2c00      	cmp	r4, #0
 800486a:	d1f7      	bne.n	800485c <_fwalk_sglue+0xc>
 800486c:	4630      	mov	r0, r6
 800486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004872:	89ab      	ldrh	r3, [r5, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d907      	bls.n	8004888 <_fwalk_sglue+0x38>
 8004878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800487c:	3301      	adds	r3, #1
 800487e:	d003      	beq.n	8004888 <_fwalk_sglue+0x38>
 8004880:	4629      	mov	r1, r5
 8004882:	4638      	mov	r0, r7
 8004884:	47c0      	blx	r8
 8004886:	4306      	orrs	r6, r0
 8004888:	3568      	adds	r5, #104	@ 0x68
 800488a:	e7e9      	b.n	8004860 <_fwalk_sglue+0x10>

0800488c <_puts_r>:
 800488c:	6a03      	ldr	r3, [r0, #32]
 800488e:	b570      	push	{r4, r5, r6, lr}
 8004890:	6884      	ldr	r4, [r0, #8]
 8004892:	4605      	mov	r5, r0
 8004894:	460e      	mov	r6, r1
 8004896:	b90b      	cbnz	r3, 800489c <_puts_r+0x10>
 8004898:	f7ff ffc2 	bl	8004820 <__sinit>
 800489c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800489e:	07db      	lsls	r3, r3, #31
 80048a0:	d405      	bmi.n	80048ae <_puts_r+0x22>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	0598      	lsls	r0, r3, #22
 80048a6:	d402      	bmi.n	80048ae <_puts_r+0x22>
 80048a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048aa:	f000 f996 	bl	8004bda <__retarget_lock_acquire_recursive>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	0719      	lsls	r1, r3, #28
 80048b2:	d502      	bpl.n	80048ba <_puts_r+0x2e>
 80048b4:	6923      	ldr	r3, [r4, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d135      	bne.n	8004926 <_puts_r+0x9a>
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 f8c5 	bl	8004a4c <__swsetup_r>
 80048c2:	b380      	cbz	r0, 8004926 <_puts_r+0x9a>
 80048c4:	f04f 35ff 	mov.w	r5, #4294967295
 80048c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048ca:	07da      	lsls	r2, r3, #31
 80048cc:	d405      	bmi.n	80048da <_puts_r+0x4e>
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	059b      	lsls	r3, r3, #22
 80048d2:	d402      	bmi.n	80048da <_puts_r+0x4e>
 80048d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048d6:	f000 f981 	bl	8004bdc <__retarget_lock_release_recursive>
 80048da:	4628      	mov	r0, r5
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da04      	bge.n	80048ec <_puts_r+0x60>
 80048e2:	69a2      	ldr	r2, [r4, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	dc17      	bgt.n	8004918 <_puts_r+0x8c>
 80048e8:	290a      	cmp	r1, #10
 80048ea:	d015      	beq.n	8004918 <_puts_r+0x8c>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	6022      	str	r2, [r4, #0]
 80048f2:	7019      	strb	r1, [r3, #0]
 80048f4:	68a3      	ldr	r3, [r4, #8]
 80048f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60a3      	str	r3, [r4, #8]
 80048fe:	2900      	cmp	r1, #0
 8004900:	d1ed      	bne.n	80048de <_puts_r+0x52>
 8004902:	2b00      	cmp	r3, #0
 8004904:	da11      	bge.n	800492a <_puts_r+0x9e>
 8004906:	4622      	mov	r2, r4
 8004908:	210a      	movs	r1, #10
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f85f 	bl	80049ce <__swbuf_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d0d7      	beq.n	80048c4 <_puts_r+0x38>
 8004914:	250a      	movs	r5, #10
 8004916:	e7d7      	b.n	80048c8 <_puts_r+0x3c>
 8004918:	4622      	mov	r2, r4
 800491a:	4628      	mov	r0, r5
 800491c:	f000 f857 	bl	80049ce <__swbuf_r>
 8004920:	3001      	adds	r0, #1
 8004922:	d1e7      	bne.n	80048f4 <_puts_r+0x68>
 8004924:	e7ce      	b.n	80048c4 <_puts_r+0x38>
 8004926:	3e01      	subs	r6, #1
 8004928:	e7e4      	b.n	80048f4 <_puts_r+0x68>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	6022      	str	r2, [r4, #0]
 8004930:	220a      	movs	r2, #10
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e7ee      	b.n	8004914 <_puts_r+0x88>
	...

08004938 <puts>:
 8004938:	4b02      	ldr	r3, [pc, #8]	@ (8004944 <puts+0xc>)
 800493a:	4601      	mov	r1, r0
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f7ff bfa5 	b.w	800488c <_puts_r>
 8004942:	bf00      	nop
 8004944:	2000001c 	.word	0x2000001c

08004948 <__sread>:
 8004948:	b510      	push	{r4, lr}
 800494a:	460c      	mov	r4, r1
 800494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004950:	f000 f90c 	bl	8004b6c <_read_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	bfab      	itete	ge
 8004958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800495a:	89a3      	ldrhlt	r3, [r4, #12]
 800495c:	181b      	addge	r3, r3, r0
 800495e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004962:	bfac      	ite	ge
 8004964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004966:	81a3      	strhlt	r3, [r4, #12]
 8004968:	bd10      	pop	{r4, pc}

0800496a <__swrite>:
 800496a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496e:	461f      	mov	r7, r3
 8004970:	898b      	ldrh	r3, [r1, #12]
 8004972:	05db      	lsls	r3, r3, #23
 8004974:	4605      	mov	r5, r0
 8004976:	460c      	mov	r4, r1
 8004978:	4616      	mov	r6, r2
 800497a:	d505      	bpl.n	8004988 <__swrite+0x1e>
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	2302      	movs	r3, #2
 8004982:	2200      	movs	r2, #0
 8004984:	f000 f8e0 	bl	8004b48 <_lseek_r>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	4632      	mov	r2, r6
 8004996:	463b      	mov	r3, r7
 8004998:	4628      	mov	r0, r5
 800499a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	f7ff bea1 	b.w	80046e4 <_write_r>

080049a2 <__sseek>:
 80049a2:	b510      	push	{r4, lr}
 80049a4:	460c      	mov	r4, r1
 80049a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049aa:	f000 f8cd 	bl	8004b48 <_lseek_r>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	bf15      	itete	ne
 80049b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049be:	81a3      	strheq	r3, [r4, #12]
 80049c0:	bf18      	it	ne
 80049c2:	81a3      	strhne	r3, [r4, #12]
 80049c4:	bd10      	pop	{r4, pc}

080049c6 <__sclose>:
 80049c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ca:	f000 b8ad 	b.w	8004b28 <_close_r>

080049ce <__swbuf_r>:
 80049ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d0:	460e      	mov	r6, r1
 80049d2:	4614      	mov	r4, r2
 80049d4:	4605      	mov	r5, r0
 80049d6:	b118      	cbz	r0, 80049e0 <__swbuf_r+0x12>
 80049d8:	6a03      	ldr	r3, [r0, #32]
 80049da:	b90b      	cbnz	r3, 80049e0 <__swbuf_r+0x12>
 80049dc:	f7ff ff20 	bl	8004820 <__sinit>
 80049e0:	69a3      	ldr	r3, [r4, #24]
 80049e2:	60a3      	str	r3, [r4, #8]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	071a      	lsls	r2, r3, #28
 80049e8:	d501      	bpl.n	80049ee <__swbuf_r+0x20>
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	b943      	cbnz	r3, 8004a00 <__swbuf_r+0x32>
 80049ee:	4621      	mov	r1, r4
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 f82b 	bl	8004a4c <__swsetup_r>
 80049f6:	b118      	cbz	r0, 8004a00 <__swbuf_r+0x32>
 80049f8:	f04f 37ff 	mov.w	r7, #4294967295
 80049fc:	4638      	mov	r0, r7
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	6922      	ldr	r2, [r4, #16]
 8004a04:	1a98      	subs	r0, r3, r2
 8004a06:	6963      	ldr	r3, [r4, #20]
 8004a08:	b2f6      	uxtb	r6, r6
 8004a0a:	4283      	cmp	r3, r0
 8004a0c:	4637      	mov	r7, r6
 8004a0e:	dc05      	bgt.n	8004a1c <__swbuf_r+0x4e>
 8004a10:	4621      	mov	r1, r4
 8004a12:	4628      	mov	r0, r5
 8004a14:	f000 fa6e 	bl	8004ef4 <_fflush_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d1ed      	bne.n	80049f8 <__swbuf_r+0x2a>
 8004a1c:	68a3      	ldr	r3, [r4, #8]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60a3      	str	r3, [r4, #8]
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	6022      	str	r2, [r4, #0]
 8004a28:	701e      	strb	r6, [r3, #0]
 8004a2a:	6962      	ldr	r2, [r4, #20]
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d004      	beq.n	8004a3c <__swbuf_r+0x6e>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	07db      	lsls	r3, r3, #31
 8004a36:	d5e1      	bpl.n	80049fc <__swbuf_r+0x2e>
 8004a38:	2e0a      	cmp	r6, #10
 8004a3a:	d1df      	bne.n	80049fc <__swbuf_r+0x2e>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 fa58 	bl	8004ef4 <_fflush_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d0d9      	beq.n	80049fc <__swbuf_r+0x2e>
 8004a48:	e7d6      	b.n	80049f8 <__swbuf_r+0x2a>
	...

08004a4c <__swsetup_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4b29      	ldr	r3, [pc, #164]	@ (8004af4 <__swsetup_r+0xa8>)
 8004a50:	4605      	mov	r5, r0
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	460c      	mov	r4, r1
 8004a56:	b118      	cbz	r0, 8004a60 <__swsetup_r+0x14>
 8004a58:	6a03      	ldr	r3, [r0, #32]
 8004a5a:	b90b      	cbnz	r3, 8004a60 <__swsetup_r+0x14>
 8004a5c:	f7ff fee0 	bl	8004820 <__sinit>
 8004a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a64:	0719      	lsls	r1, r3, #28
 8004a66:	d422      	bmi.n	8004aae <__swsetup_r+0x62>
 8004a68:	06da      	lsls	r2, r3, #27
 8004a6a:	d407      	bmi.n	8004a7c <__swsetup_r+0x30>
 8004a6c:	2209      	movs	r2, #9
 8004a6e:	602a      	str	r2, [r5, #0]
 8004a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e033      	b.n	8004ae4 <__swsetup_r+0x98>
 8004a7c:	0758      	lsls	r0, r3, #29
 8004a7e:	d512      	bpl.n	8004aa6 <__swsetup_r+0x5a>
 8004a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a82:	b141      	cbz	r1, 8004a96 <__swsetup_r+0x4a>
 8004a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	d002      	beq.n	8004a92 <__swsetup_r+0x46>
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f8b5 	bl	8004bfc <_free_r>
 8004a92:	2300      	movs	r3, #0
 8004a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	f043 0308 	orr.w	r3, r3, #8
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	b94b      	cbnz	r3, 8004ac6 <__swsetup_r+0x7a>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d003      	beq.n	8004ac6 <__swsetup_r+0x7a>
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 fa65 	bl	8004f90 <__smakebuf_r>
 8004ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aca:	f013 0201 	ands.w	r2, r3, #1
 8004ace:	d00a      	beq.n	8004ae6 <__swsetup_r+0x9a>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	60a2      	str	r2, [r4, #8]
 8004ad4:	6962      	ldr	r2, [r4, #20]
 8004ad6:	4252      	negs	r2, r2
 8004ad8:	61a2      	str	r2, [r4, #24]
 8004ada:	6922      	ldr	r2, [r4, #16]
 8004adc:	b942      	cbnz	r2, 8004af0 <__swsetup_r+0xa4>
 8004ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ae2:	d1c5      	bne.n	8004a70 <__swsetup_r+0x24>
 8004ae4:	bd38      	pop	{r3, r4, r5, pc}
 8004ae6:	0799      	lsls	r1, r3, #30
 8004ae8:	bf58      	it	pl
 8004aea:	6962      	ldrpl	r2, [r4, #20]
 8004aec:	60a2      	str	r2, [r4, #8]
 8004aee:	e7f4      	b.n	8004ada <__swsetup_r+0x8e>
 8004af0:	2000      	movs	r0, #0
 8004af2:	e7f7      	b.n	8004ae4 <__swsetup_r+0x98>
 8004af4:	2000001c 	.word	0x2000001c

08004af8 <memcmp>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	3901      	subs	r1, #1
 8004afc:	4402      	add	r2, r0
 8004afe:	4290      	cmp	r0, r2
 8004b00:	d101      	bne.n	8004b06 <memcmp+0xe>
 8004b02:	2000      	movs	r0, #0
 8004b04:	e005      	b.n	8004b12 <memcmp+0x1a>
 8004b06:	7803      	ldrb	r3, [r0, #0]
 8004b08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b0c:	42a3      	cmp	r3, r4
 8004b0e:	d001      	beq.n	8004b14 <memcmp+0x1c>
 8004b10:	1b18      	subs	r0, r3, r4
 8004b12:	bd10      	pop	{r4, pc}
 8004b14:	3001      	adds	r0, #1
 8004b16:	e7f2      	b.n	8004afe <memcmp+0x6>

08004b18 <memset>:
 8004b18:	4402      	add	r2, r0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d100      	bne.n	8004b22 <memset+0xa>
 8004b20:	4770      	bx	lr
 8004b22:	f803 1b01 	strb.w	r1, [r3], #1
 8004b26:	e7f9      	b.n	8004b1c <memset+0x4>

08004b28 <_close_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d06      	ldr	r5, [pc, #24]	@ (8004b44 <_close_r+0x1c>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fb fd34 	bl	80005a0 <_close>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_close_r+0x1a>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_close_r+0x1a>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	20014568 	.word	0x20014568

08004b48 <_lseek_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	@ (8004b68 <_lseek_r+0x20>)
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fb fd49 	bl	80005ee <_lseek>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_lseek_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_lseek_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	20014568 	.word	0x20014568

08004b6c <_read_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	@ (8004b8c <_read_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fb fcf3 	bl	8000566 <_read>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_read_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_read_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	20014568 	.word	0x20014568

08004b90 <__libc_init_array>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	4d0d      	ldr	r5, [pc, #52]	@ (8004bc8 <__libc_init_array+0x38>)
 8004b94:	4c0d      	ldr	r4, [pc, #52]	@ (8004bcc <__libc_init_array+0x3c>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	42a6      	cmp	r6, r4
 8004b9e:	d109      	bne.n	8004bb4 <__libc_init_array+0x24>
 8004ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8004bd0 <__libc_init_array+0x40>)
 8004ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8004bd4 <__libc_init_array+0x44>)
 8004ba4:	f000 fa70 	bl	8005088 <_init>
 8004ba8:	1b64      	subs	r4, r4, r5
 8004baa:	10a4      	asrs	r4, r4, #2
 8004bac:	2600      	movs	r6, #0
 8004bae:	42a6      	cmp	r6, r4
 8004bb0:	d105      	bne.n	8004bbe <__libc_init_array+0x2e>
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb8:	4798      	blx	r3
 8004bba:	3601      	adds	r6, #1
 8004bbc:	e7ee      	b.n	8004b9c <__libc_init_array+0xc>
 8004bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc2:	4798      	blx	r3
 8004bc4:	3601      	adds	r6, #1
 8004bc6:	e7f2      	b.n	8004bae <__libc_init_array+0x1e>
 8004bc8:	080051f4 	.word	0x080051f4
 8004bcc:	080051f4 	.word	0x080051f4
 8004bd0:	080051f4 	.word	0x080051f4
 8004bd4:	080051f8 	.word	0x080051f8

08004bd8 <__retarget_lock_init_recursive>:
 8004bd8:	4770      	bx	lr

08004bda <__retarget_lock_acquire_recursive>:
 8004bda:	4770      	bx	lr

08004bdc <__retarget_lock_release_recursive>:
 8004bdc:	4770      	bx	lr

08004bde <memcpy>:
 8004bde:	440a      	add	r2, r1
 8004be0:	4291      	cmp	r1, r2
 8004be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8004be6:	d100      	bne.n	8004bea <memcpy+0xc>
 8004be8:	4770      	bx	lr
 8004bea:	b510      	push	{r4, lr}
 8004bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf4:	4291      	cmp	r1, r2
 8004bf6:	d1f9      	bne.n	8004bec <memcpy+0xe>
 8004bf8:	bd10      	pop	{r4, pc}
	...

08004bfc <_free_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4605      	mov	r5, r0
 8004c00:	2900      	cmp	r1, #0
 8004c02:	d041      	beq.n	8004c88 <_free_r+0x8c>
 8004c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c08:	1f0c      	subs	r4, r1, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfb8      	it	lt
 8004c0e:	18e4      	addlt	r4, r4, r3
 8004c10:	f000 f8e0 	bl	8004dd4 <__malloc_lock>
 8004c14:	4a1d      	ldr	r2, [pc, #116]	@ (8004c8c <_free_r+0x90>)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	b933      	cbnz	r3, 8004c28 <_free_r+0x2c>
 8004c1a:	6063      	str	r3, [r4, #4]
 8004c1c:	6014      	str	r4, [r2, #0]
 8004c1e:	4628      	mov	r0, r5
 8004c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c24:	f000 b8dc 	b.w	8004de0 <__malloc_unlock>
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d908      	bls.n	8004c3e <_free_r+0x42>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	1821      	adds	r1, r4, r0
 8004c30:	428b      	cmp	r3, r1
 8004c32:	bf01      	itttt	eq
 8004c34:	6819      	ldreq	r1, [r3, #0]
 8004c36:	685b      	ldreq	r3, [r3, #4]
 8004c38:	1809      	addeq	r1, r1, r0
 8004c3a:	6021      	streq	r1, [r4, #0]
 8004c3c:	e7ed      	b.n	8004c1a <_free_r+0x1e>
 8004c3e:	461a      	mov	r2, r3
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b10b      	cbz	r3, 8004c48 <_free_r+0x4c>
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	d9fa      	bls.n	8004c3e <_free_r+0x42>
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	1850      	adds	r0, r2, r1
 8004c4c:	42a0      	cmp	r0, r4
 8004c4e:	d10b      	bne.n	8004c68 <_free_r+0x6c>
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	4401      	add	r1, r0
 8004c54:	1850      	adds	r0, r2, r1
 8004c56:	4283      	cmp	r3, r0
 8004c58:	6011      	str	r1, [r2, #0]
 8004c5a:	d1e0      	bne.n	8004c1e <_free_r+0x22>
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	6053      	str	r3, [r2, #4]
 8004c62:	4408      	add	r0, r1
 8004c64:	6010      	str	r0, [r2, #0]
 8004c66:	e7da      	b.n	8004c1e <_free_r+0x22>
 8004c68:	d902      	bls.n	8004c70 <_free_r+0x74>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	e7d6      	b.n	8004c1e <_free_r+0x22>
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	1821      	adds	r1, r4, r0
 8004c74:	428b      	cmp	r3, r1
 8004c76:	bf04      	itt	eq
 8004c78:	6819      	ldreq	r1, [r3, #0]
 8004c7a:	685b      	ldreq	r3, [r3, #4]
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	bf04      	itt	eq
 8004c80:	1809      	addeq	r1, r1, r0
 8004c82:	6021      	streq	r1, [r4, #0]
 8004c84:	6054      	str	r4, [r2, #4]
 8004c86:	e7ca      	b.n	8004c1e <_free_r+0x22>
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20014574 	.word	0x20014574

08004c90 <sbrk_aligned>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4e0f      	ldr	r6, [pc, #60]	@ (8004cd0 <sbrk_aligned+0x40>)
 8004c94:	460c      	mov	r4, r1
 8004c96:	6831      	ldr	r1, [r6, #0]
 8004c98:	4605      	mov	r5, r0
 8004c9a:	b911      	cbnz	r1, 8004ca2 <sbrk_aligned+0x12>
 8004c9c:	f000 f9d6 	bl	800504c <_sbrk_r>
 8004ca0:	6030      	str	r0, [r6, #0]
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 f9d1 	bl	800504c <_sbrk_r>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d103      	bne.n	8004cb6 <sbrk_aligned+0x26>
 8004cae:	f04f 34ff 	mov.w	r4, #4294967295
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	1cc4      	adds	r4, r0, #3
 8004cb8:	f024 0403 	bic.w	r4, r4, #3
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d0f8      	beq.n	8004cb2 <sbrk_aligned+0x22>
 8004cc0:	1a21      	subs	r1, r4, r0
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f9c2 	bl	800504c <_sbrk_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d1f2      	bne.n	8004cb2 <sbrk_aligned+0x22>
 8004ccc:	e7ef      	b.n	8004cae <sbrk_aligned+0x1e>
 8004cce:	bf00      	nop
 8004cd0:	20014570 	.word	0x20014570

08004cd4 <_malloc_r>:
 8004cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd8:	1ccd      	adds	r5, r1, #3
 8004cda:	f025 0503 	bic.w	r5, r5, #3
 8004cde:	3508      	adds	r5, #8
 8004ce0:	2d0c      	cmp	r5, #12
 8004ce2:	bf38      	it	cc
 8004ce4:	250c      	movcc	r5, #12
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	4606      	mov	r6, r0
 8004cea:	db01      	blt.n	8004cf0 <_malloc_r+0x1c>
 8004cec:	42a9      	cmp	r1, r5
 8004cee:	d904      	bls.n	8004cfa <_malloc_r+0x26>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dd0 <_malloc_r+0xfc>
 8004cfe:	f000 f869 	bl	8004dd4 <__malloc_lock>
 8004d02:	f8d8 3000 	ldr.w	r3, [r8]
 8004d06:	461c      	mov	r4, r3
 8004d08:	bb44      	cbnz	r4, 8004d5c <_malloc_r+0x88>
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff ffbf 	bl	8004c90 <sbrk_aligned>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	4604      	mov	r4, r0
 8004d16:	d158      	bne.n	8004dca <_malloc_r+0xf6>
 8004d18:	f8d8 4000 	ldr.w	r4, [r8]
 8004d1c:	4627      	mov	r7, r4
 8004d1e:	2f00      	cmp	r7, #0
 8004d20:	d143      	bne.n	8004daa <_malloc_r+0xd6>
 8004d22:	2c00      	cmp	r4, #0
 8004d24:	d04b      	beq.n	8004dbe <_malloc_r+0xea>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	4639      	mov	r1, r7
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	eb04 0903 	add.w	r9, r4, r3
 8004d30:	f000 f98c 	bl	800504c <_sbrk_r>
 8004d34:	4581      	cmp	r9, r0
 8004d36:	d142      	bne.n	8004dbe <_malloc_r+0xea>
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	1a6d      	subs	r5, r5, r1
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7ff ffa6 	bl	8004c90 <sbrk_aligned>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d03a      	beq.n	8004dbe <_malloc_r+0xea>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	442b      	add	r3, r5
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	bb62      	cbnz	r2, 8004db0 <_malloc_r+0xdc>
 8004d56:	f8c8 7000 	str.w	r7, [r8]
 8004d5a:	e00f      	b.n	8004d7c <_malloc_r+0xa8>
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	1b52      	subs	r2, r2, r5
 8004d60:	d420      	bmi.n	8004da4 <_malloc_r+0xd0>
 8004d62:	2a0b      	cmp	r2, #11
 8004d64:	d917      	bls.n	8004d96 <_malloc_r+0xc2>
 8004d66:	1961      	adds	r1, r4, r5
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	6059      	strne	r1, [r3, #4]
 8004d70:	6863      	ldr	r3, [r4, #4]
 8004d72:	bf08      	it	eq
 8004d74:	f8c8 1000 	streq.w	r1, [r8]
 8004d78:	5162      	str	r2, [r4, r5]
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 f82f 	bl	8004de0 <__malloc_unlock>
 8004d82:	f104 000b 	add.w	r0, r4, #11
 8004d86:	1d23      	adds	r3, r4, #4
 8004d88:	f020 0007 	bic.w	r0, r0, #7
 8004d8c:	1ac2      	subs	r2, r0, r3
 8004d8e:	bf1c      	itt	ne
 8004d90:	1a1b      	subne	r3, r3, r0
 8004d92:	50a3      	strne	r3, [r4, r2]
 8004d94:	e7af      	b.n	8004cf6 <_malloc_r+0x22>
 8004d96:	6862      	ldr	r2, [r4, #4]
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	bf0c      	ite	eq
 8004d9c:	f8c8 2000 	streq.w	r2, [r8]
 8004da0:	605a      	strne	r2, [r3, #4]
 8004da2:	e7eb      	b.n	8004d7c <_malloc_r+0xa8>
 8004da4:	4623      	mov	r3, r4
 8004da6:	6864      	ldr	r4, [r4, #4]
 8004da8:	e7ae      	b.n	8004d08 <_malloc_r+0x34>
 8004daa:	463c      	mov	r4, r7
 8004dac:	687f      	ldr	r7, [r7, #4]
 8004dae:	e7b6      	b.n	8004d1e <_malloc_r+0x4a>
 8004db0:	461a      	mov	r2, r3
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d1fb      	bne.n	8004db0 <_malloc_r+0xdc>
 8004db8:	2300      	movs	r3, #0
 8004dba:	6053      	str	r3, [r2, #4]
 8004dbc:	e7de      	b.n	8004d7c <_malloc_r+0xa8>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f000 f80c 	bl	8004de0 <__malloc_unlock>
 8004dc8:	e794      	b.n	8004cf4 <_malloc_r+0x20>
 8004dca:	6005      	str	r5, [r0, #0]
 8004dcc:	e7d6      	b.n	8004d7c <_malloc_r+0xa8>
 8004dce:	bf00      	nop
 8004dd0:	20014574 	.word	0x20014574

08004dd4 <__malloc_lock>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	@ (8004ddc <__malloc_lock+0x8>)
 8004dd6:	f7ff bf00 	b.w	8004bda <__retarget_lock_acquire_recursive>
 8004dda:	bf00      	nop
 8004ddc:	2001456c 	.word	0x2001456c

08004de0 <__malloc_unlock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	@ (8004de8 <__malloc_unlock+0x8>)
 8004de2:	f7ff befb 	b.w	8004bdc <__retarget_lock_release_recursive>
 8004de6:	bf00      	nop
 8004de8:	2001456c 	.word	0x2001456c

08004dec <__sflush_r>:
 8004dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	0716      	lsls	r6, r2, #28
 8004df6:	4605      	mov	r5, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	d454      	bmi.n	8004ea6 <__sflush_r+0xba>
 8004dfc:	684b      	ldr	r3, [r1, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dc02      	bgt.n	8004e08 <__sflush_r+0x1c>
 8004e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dd48      	ble.n	8004e9a <__sflush_r+0xae>
 8004e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	d045      	beq.n	8004e9a <__sflush_r+0xae>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e14:	682f      	ldr	r7, [r5, #0]
 8004e16:	6a21      	ldr	r1, [r4, #32]
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	d030      	beq.n	8004e7e <__sflush_r+0x92>
 8004e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	0759      	lsls	r1, r3, #29
 8004e22:	d505      	bpl.n	8004e30 <__sflush_r+0x44>
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e2a:	b10b      	cbz	r3, 8004e30 <__sflush_r+0x44>
 8004e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e34:	6a21      	ldr	r1, [r4, #32]
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b0      	blx	r6
 8004e3a:	1c43      	adds	r3, r0, #1
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	d106      	bne.n	8004e4e <__sflush_r+0x62>
 8004e40:	6829      	ldr	r1, [r5, #0]
 8004e42:	291d      	cmp	r1, #29
 8004e44:	d82b      	bhi.n	8004e9e <__sflush_r+0xb2>
 8004e46:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef0 <__sflush_r+0x104>)
 8004e48:	40ca      	lsrs	r2, r1
 8004e4a:	07d6      	lsls	r6, r2, #31
 8004e4c:	d527      	bpl.n	8004e9e <__sflush_r+0xb2>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	6062      	str	r2, [r4, #4]
 8004e52:	04d9      	lsls	r1, r3, #19
 8004e54:	6922      	ldr	r2, [r4, #16]
 8004e56:	6022      	str	r2, [r4, #0]
 8004e58:	d504      	bpl.n	8004e64 <__sflush_r+0x78>
 8004e5a:	1c42      	adds	r2, r0, #1
 8004e5c:	d101      	bne.n	8004e62 <__sflush_r+0x76>
 8004e5e:	682b      	ldr	r3, [r5, #0]
 8004e60:	b903      	cbnz	r3, 8004e64 <__sflush_r+0x78>
 8004e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e66:	602f      	str	r7, [r5, #0]
 8004e68:	b1b9      	cbz	r1, 8004e9a <__sflush_r+0xae>
 8004e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	d002      	beq.n	8004e78 <__sflush_r+0x8c>
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff fec2 	bl	8004bfc <_free_r>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e7c:	e00d      	b.n	8004e9a <__sflush_r+0xae>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b0      	blx	r6
 8004e84:	4602      	mov	r2, r0
 8004e86:	1c50      	adds	r0, r2, #1
 8004e88:	d1c9      	bne.n	8004e1e <__sflush_r+0x32>
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0c6      	beq.n	8004e1e <__sflush_r+0x32>
 8004e90:	2b1d      	cmp	r3, #29
 8004e92:	d001      	beq.n	8004e98 <__sflush_r+0xac>
 8004e94:	2b16      	cmp	r3, #22
 8004e96:	d11e      	bne.n	8004ed6 <__sflush_r+0xea>
 8004e98:	602f      	str	r7, [r5, #0]
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e022      	b.n	8004ee4 <__sflush_r+0xf8>
 8004e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ea2:	b21b      	sxth	r3, r3
 8004ea4:	e01b      	b.n	8004ede <__sflush_r+0xf2>
 8004ea6:	690f      	ldr	r7, [r1, #16]
 8004ea8:	2f00      	cmp	r7, #0
 8004eaa:	d0f6      	beq.n	8004e9a <__sflush_r+0xae>
 8004eac:	0793      	lsls	r3, r2, #30
 8004eae:	680e      	ldr	r6, [r1, #0]
 8004eb0:	bf08      	it	eq
 8004eb2:	694b      	ldreq	r3, [r1, #20]
 8004eb4:	600f      	str	r7, [r1, #0]
 8004eb6:	bf18      	it	ne
 8004eb8:	2300      	movne	r3, #0
 8004eba:	eba6 0807 	sub.w	r8, r6, r7
 8004ebe:	608b      	str	r3, [r1, #8]
 8004ec0:	f1b8 0f00 	cmp.w	r8, #0
 8004ec4:	dde9      	ble.n	8004e9a <__sflush_r+0xae>
 8004ec6:	6a21      	ldr	r1, [r4, #32]
 8004ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004eca:	4643      	mov	r3, r8
 8004ecc:	463a      	mov	r2, r7
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b0      	blx	r6
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	dc08      	bgt.n	8004ee8 <__sflush_r+0xfc>
 8004ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee8:	4407      	add	r7, r0
 8004eea:	eba8 0800 	sub.w	r8, r8, r0
 8004eee:	e7e7      	b.n	8004ec0 <__sflush_r+0xd4>
 8004ef0:	20400001 	.word	0x20400001

08004ef4 <_fflush_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	4605      	mov	r5, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b913      	cbnz	r3, 8004f04 <_fflush_r+0x10>
 8004efe:	2500      	movs	r5, #0
 8004f00:	4628      	mov	r0, r5
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	b118      	cbz	r0, 8004f0e <_fflush_r+0x1a>
 8004f06:	6a03      	ldr	r3, [r0, #32]
 8004f08:	b90b      	cbnz	r3, 8004f0e <_fflush_r+0x1a>
 8004f0a:	f7ff fc89 	bl	8004820 <__sinit>
 8004f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f3      	beq.n	8004efe <_fflush_r+0xa>
 8004f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f18:	07d0      	lsls	r0, r2, #31
 8004f1a:	d404      	bmi.n	8004f26 <_fflush_r+0x32>
 8004f1c:	0599      	lsls	r1, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_fflush_r+0x32>
 8004f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f22:	f7ff fe5a 	bl	8004bda <__retarget_lock_acquire_recursive>
 8004f26:	4628      	mov	r0, r5
 8004f28:	4621      	mov	r1, r4
 8004f2a:	f7ff ff5f 	bl	8004dec <__sflush_r>
 8004f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f30:	07da      	lsls	r2, r3, #31
 8004f32:	4605      	mov	r5, r0
 8004f34:	d4e4      	bmi.n	8004f00 <_fflush_r+0xc>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	059b      	lsls	r3, r3, #22
 8004f3a:	d4e1      	bmi.n	8004f00 <_fflush_r+0xc>
 8004f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f3e:	f7ff fe4d 	bl	8004bdc <__retarget_lock_release_recursive>
 8004f42:	e7dd      	b.n	8004f00 <_fflush_r+0xc>

08004f44 <__swhatbuf_r>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	460c      	mov	r4, r1
 8004f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	b096      	sub	sp, #88	@ 0x58
 8004f50:	4615      	mov	r5, r2
 8004f52:	461e      	mov	r6, r3
 8004f54:	da0d      	bge.n	8004f72 <__swhatbuf_r+0x2e>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	bf14      	ite	ne
 8004f62:	2340      	movne	r3, #64	@ 0x40
 8004f64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f68:	2000      	movs	r0, #0
 8004f6a:	6031      	str	r1, [r6, #0]
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	b016      	add	sp, #88	@ 0x58
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	466a      	mov	r2, sp
 8004f74:	f000 f848 	bl	8005008 <_fstat_r>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	dbec      	blt.n	8004f56 <__swhatbuf_r+0x12>
 8004f7c:	9901      	ldr	r1, [sp, #4]
 8004f7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f86:	4259      	negs	r1, r3
 8004f88:	4159      	adcs	r1, r3
 8004f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f8e:	e7eb      	b.n	8004f68 <__swhatbuf_r+0x24>

08004f90 <__smakebuf_r>:
 8004f90:	898b      	ldrh	r3, [r1, #12]
 8004f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f94:	079d      	lsls	r5, r3, #30
 8004f96:	4606      	mov	r6, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	d507      	bpl.n	8004fac <__smakebuf_r+0x1c>
 8004f9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	6163      	str	r3, [r4, #20]
 8004fa8:	b003      	add	sp, #12
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fac:	ab01      	add	r3, sp, #4
 8004fae:	466a      	mov	r2, sp
 8004fb0:	f7ff ffc8 	bl	8004f44 <__swhatbuf_r>
 8004fb4:	9f00      	ldr	r7, [sp, #0]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	4639      	mov	r1, r7
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff fe8a 	bl	8004cd4 <_malloc_r>
 8004fc0:	b948      	cbnz	r0, 8004fd6 <__smakebuf_r+0x46>
 8004fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc6:	059a      	lsls	r2, r3, #22
 8004fc8:	d4ee      	bmi.n	8004fa8 <__smakebuf_r+0x18>
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	f043 0302 	orr.w	r3, r3, #2
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	e7e2      	b.n	8004f9c <__smakebuf_r+0xc>
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	6020      	str	r0, [r4, #0]
 8004fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	9b01      	ldr	r3, [sp, #4]
 8004fe2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fe6:	b15b      	cbz	r3, 8005000 <__smakebuf_r+0x70>
 8004fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f81d 	bl	800502c <_isatty_r>
 8004ff2:	b128      	cbz	r0, 8005000 <__smakebuf_r+0x70>
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	431d      	orrs	r5, r3
 8005004:	81a5      	strh	r5, [r4, #12]
 8005006:	e7cf      	b.n	8004fa8 <__smakebuf_r+0x18>

08005008 <_fstat_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d07      	ldr	r5, [pc, #28]	@ (8005028 <_fstat_r+0x20>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	4611      	mov	r1, r2
 8005014:	602b      	str	r3, [r5, #0]
 8005016:	f7fb facf 	bl	80005b8 <_fstat>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	d102      	bne.n	8005024 <_fstat_r+0x1c>
 800501e:	682b      	ldr	r3, [r5, #0]
 8005020:	b103      	cbz	r3, 8005024 <_fstat_r+0x1c>
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	bd38      	pop	{r3, r4, r5, pc}
 8005026:	bf00      	nop
 8005028:	20014568 	.word	0x20014568

0800502c <_isatty_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d06      	ldr	r5, [pc, #24]	@ (8005048 <_isatty_r+0x1c>)
 8005030:	2300      	movs	r3, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fb face 	bl	80005d8 <_isatty>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_isatty_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_isatty_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20014568 	.word	0x20014568

0800504c <_sbrk_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	@ (8005068 <_sbrk_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f000 f808 	bl	800506c <_sbrk>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_sbrk_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_sbrk_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20014568 	.word	0x20014568

0800506c <_sbrk>:
 800506c:	4a04      	ldr	r2, [pc, #16]	@ (8005080 <_sbrk+0x14>)
 800506e:	6811      	ldr	r1, [r2, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	b909      	cbnz	r1, 8005078 <_sbrk+0xc>
 8005074:	4903      	ldr	r1, [pc, #12]	@ (8005084 <_sbrk+0x18>)
 8005076:	6011      	str	r1, [r2, #0]
 8005078:	6810      	ldr	r0, [r2, #0]
 800507a:	4403      	add	r3, r0
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4770      	bx	lr
 8005080:	20014578 	.word	0x20014578
 8005084:	20014580 	.word	0x20014580

08005088 <_init>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr

08005094 <_fini>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	bf00      	nop
 8005098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509a:	bc08      	pop	{r3}
 800509c:	469e      	mov	lr, r3
 800509e:	4770      	bx	lr
