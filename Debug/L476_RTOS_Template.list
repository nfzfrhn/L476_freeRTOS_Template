
L476_RTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080034a4  080034a4  000044a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003528  08003528  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003528  08003528  0000506c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003528  08003528  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003528  08003528  00004528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800352c  0800352c  0000452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003530  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e98  2000006c  0800359c  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f04  0800359c  00005f04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ff9  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b85  00000000  00000000  0000d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f6  00000000  00000000  0000f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c0e  00000000  00000000  0000fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a545  00000000  00000000  00036884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb760  00000000  00000000  00040dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a38  00000000  00000000  0012c56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0012efa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800348c 	.word	0x0800348c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800348c 	.word	0x0800348c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b092      	sub	sp, #72	@ 0x48
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fa43 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f857 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f8a7 	bl	8000330 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  TaskFunction_t pxTaskCode1 = task1_handler;					// Pointer to the task handler
 80001e2:	4b26      	ldr	r3, [pc, #152]	@ (800027c <main+0xac>)
 80001e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const char* const pcName1 = "Task-1";							// Descriptive name to the task
 80001e6:	4b26      	ldr	r3, [pc, #152]	@ (8000280 <main+0xb0>)
 80001e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  const configSTACK_DEPTH_TYPE uxStackDepth1 = 200;							// 200*32 bits
 80001ea:	23c8      	movs	r3, #200	@ 0xc8
 80001ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
  void* const pvParameters1 = "Hello World from Task-1";	// Parameter to be passed
 80001ee:	4b25      	ldr	r3, [pc, #148]	@ (8000284 <main+0xb4>)
 80001f0:	633b      	str	r3, [r7, #48]	@ 0x30
  UBaseType_t uxPriority1 = 2;
 80001f2:	2302      	movs	r3, #2
 80001f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  status = xTaskCreate(pxTaskCode1, pcName1, uxStackDepth1, pvParameters1, uxPriority1, &task1_handle);
 80001f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80001f8:	f107 0308 	add.w	r3, r7, #8
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000204:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000206:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000208:	f001 fbbd 	bl	8001986 <xTaskCreate>
 800020c:	62b8      	str	r0, [r7, #40]	@ 0x28
  configASSERT(status == pdPASS);
 800020e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000210:	2b01      	cmp	r3, #1
 8000212:	d00b      	beq.n	800022c <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000218:	f383 8811 	msr	BASEPRI, r3
 800021c:	f3bf 8f6f 	isb	sy
 8000220:	f3bf 8f4f 	dsb	sy
 8000224:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x58>

  TaskFunction_t pxTaskCode2 = task1_handler;					// Pointer to the task handler
 800022c:	4b13      	ldr	r3, [pc, #76]	@ (800027c <main+0xac>)
 800022e:	627b      	str	r3, [r7, #36]	@ 0x24
  const char* const pcName2 = "Task-1";							// Descriptive name to the task
 8000230:	4b13      	ldr	r3, [pc, #76]	@ (8000280 <main+0xb0>)
 8000232:	623b      	str	r3, [r7, #32]
  const configSTACK_DEPTH_TYPE uxStackDepth2 = 200;							// 200*32 bits
 8000234:	23c8      	movs	r3, #200	@ 0xc8
 8000236:	83fb      	strh	r3, [r7, #30]
  void* const pvParameters2 = "Hello World from Task-2";	// Parameter to be passed
 8000238:	4b13      	ldr	r3, [pc, #76]	@ (8000288 <main+0xb8>)
 800023a:	61bb      	str	r3, [r7, #24]
  UBaseType_t uxPriority2 = 2;
 800023c:	2302      	movs	r3, #2
 800023e:	617b      	str	r3, [r7, #20]

  status = xTaskCreate(pxTaskCode2, pcName2, uxStackDepth2, pvParameters2, uxPriority2, &task2_handle);
 8000240:	8bfa      	ldrh	r2, [r7, #30]
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	6a39      	ldr	r1, [r7, #32]
 800024e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000250:	f001 fb99 	bl	8001986 <xTaskCreate>
 8000254:	62b8      	str	r0, [r7, #40]	@ 0x28
  configASSERT(status == pdPASS);
 8000256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000258:	2b01      	cmp	r3, #1
 800025a:	d00b      	beq.n	8000274 <main+0xa4>
        __asm volatile
 800025c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000260:	f383 8811 	msr	BASEPRI, r3
 8000264:	f3bf 8f6f 	isb	sy
 8000268:	f3bf 8f4f 	dsb	sy
 800026c:	60fb      	str	r3, [r7, #12]
    }
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0xa0>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8000274:	f001 fcf4 	bl	8001c60 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	bf00      	nop
 800027a:	e7fd      	b.n	8000278 <main+0xa8>
 800027c:	08000421 	.word	0x08000421
 8000280:	080034a4 	.word	0x080034a4
 8000284:	080034ac 	.word	0x080034ac
 8000288:	080034c4 	.word	0x080034c4

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b096      	sub	sp, #88	@ 0x58
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2244      	movs	r2, #68	@ 0x44
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fe3a 	bl	8002f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002b2:	f000 fcf3 	bl	8000c9c <HAL_PWREx_ControlVoltageScaling>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002bc:	f000 f8b8 	bl	8000430 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d2:	2302      	movs	r3, #2
 80002d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002da:	230a      	movs	r3, #10
 80002dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002de:	2307      	movs	r3, #7
 80002e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e2:	2302      	movs	r3, #2
 80002e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd2a 	bl	8000d48 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002fa:	f000 f899 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2303      	movs	r3, #3
 8000304:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000312:	463b      	mov	r3, r7
 8000314:	2104      	movs	r1, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f001 f8f2 	bl	8001500 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000322:	f000 f885 	bl	8000430 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3758      	adds	r7, #88	@ 0x58
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	@ 0x28
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b34      	ldr	r3, [pc, #208]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034a:	4a33      	ldr	r2, [pc, #204]	@ (8000418 <MX_GPIO_Init+0xe8>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000352:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800035e:	4b2e      	ldr	r3, [pc, #184]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000362:	4a2d      	ldr	r2, [pc, #180]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800036a:	4b2b      	ldr	r3, [pc, #172]	@ (8000418 <MX_GPIO_Init+0xe8>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b28      	ldr	r3, [pc, #160]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037a:	4a27      	ldr	r2, [pc, #156]	@ (8000418 <MX_GPIO_Init+0xe8>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000382:	4b25      	ldr	r3, [pc, #148]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000392:	4a21      	ldr	r2, [pc, #132]	@ (8000418 <MX_GPIO_Init+0xe8>)
 8000394:	f043 0302 	orr.w	r3, r3, #2
 8000398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800039a:	4b1f      	ldr	r3, [pc, #124]	@ (8000418 <MX_GPIO_Init+0xe8>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	f003 0302 	and.w	r3, r3, #2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ae:	f000 fc4f 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	4814      	ldr	r0, [pc, #80]	@ (800041c <MX_GPIO_Init+0xec>)
 80003ca:	f000 fa97 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003ce:	230c      	movs	r3, #12
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003da:	2303      	movs	r3, #3
 80003dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003de:	2307      	movs	r3, #7
 80003e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	4619      	mov	r1, r3
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ec:	f000 fa86 	bl	80008fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f0:	2320      	movs	r3, #32
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040a:	f000 fa77 	bl	80008fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	@ 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000800 	.word	0x48000800

08000420 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void* parameters){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char*)parameters);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f002 fc93 	bl	8002d54 <puts>
 800042e:	e7fb      	b.n	8000428 <task1_handler+0x8>

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x44>)
 8000444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000446:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <HAL_MspInit+0x44>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6613      	str	r3, [r2, #96]	@ 0x60
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x44>)
 8000450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_MspInit+0x44>)
 800045c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800045e:	4a08      	ldr	r2, [pc, #32]	@ (8000480 <HAL_MspInit+0x44>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000464:	6593      	str	r3, [r2, #88]	@ 0x58
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_MspInit+0x44>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <NMI_Handler+0x4>

0800048c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <MemManage_Handler+0x4>

0800049c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <UsageFault_Handler+0x4>

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <ITM_SendChar+0x48>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <ITM_SendChar+0x48>)
 80004cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <ITM_SendChar+0x4c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <ITM_SendChar+0x4c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004de:	bf00      	nop
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f8      	beq.n	80004e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ee:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000edfc 	.word	0xe000edfc
 8000508:	e0000e00 	.word	0xe0000e00

0800050c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051e:	f3af 8000 	nop.w
 8000522:	4601      	mov	r1, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf0      	blt.n	800051e <_read+0x12>
  }

  return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffab 	bl	80004bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x12>
  }
  return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_close>:

int _close(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a6:	605a      	str	r2, [r3, #4]
  return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_isatty>:

int _isatty(int file)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <SystemInit+0x20>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <SystemInit+0x20>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800060c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000644 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000610:	f7ff ffea 	bl	80005e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	@ (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	@ (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	@ (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	@ (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f002 fcb9 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063e:	f7ff fdc7 	bl	80001d0 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000644:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000650:	08003530 	.word	0x08003530
  ldr r2, =_sbss
 8000654:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000658:	20012f04 	.word	0x20012f04

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_Init+0x3c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0b      	ldr	r2, [pc, #44]	@ (800069c <HAL_Init+0x3c>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000674:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000676:	2003      	movs	r0, #3
 8000678:	f000 f90c 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067c:	2000      	movs	r0, #0
 800067e:	f000 f80f 	bl	80006a0 <HAL_InitTick>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	e001      	b.n	8000692 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800068e:	f7ff fed5 	bl	800043c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000692:	79fb      	ldrb	r3, [r7, #7]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40022000 	.word	0x40022000

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_InitTick+0x6c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d023      	beq.n	80006fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_InitTick+0x70>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <HAL_InitTick+0x6c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f909 	bl	80008e2 <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10f      	bne.n	80006f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d809      	bhi.n	80006f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f8e1 	bl	80008aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <HAL_InitTick+0x74>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	e007      	b.n	8000700 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e004      	b.n	8000700 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e001      	b.n	8000700 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008
 8000710:	20000000 	.word	0x20000000
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <HAL_GetTick+0x14>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000088 	.word	0x20000088

08000730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800075c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000762:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <__NVIC_SetPriorityGrouping+0x44>)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	60d3      	str	r3, [r2, #12]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <__NVIC_GetPriorityGrouping+0x18>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	f003 0307 	and.w	r3, r3, #7
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f1c3 0307 	rsb	r3, r3, #7
 8000802:	2b04      	cmp	r3, #4
 8000804:	bf28      	it	cs
 8000806:	2304      	movcs	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3304      	adds	r3, #4
 800080e:	2b06      	cmp	r3, #6
 8000810:	d902      	bls.n	8000818 <NVIC_EncodePriority+0x30>
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3b03      	subs	r3, #3
 8000816:	e000      	b.n	800081a <NVIC_EncodePriority+0x32>
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43da      	mvns	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	401a      	ands	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43d9      	mvns	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	4313      	orrs	r3, r2
         );
}
 8000842:	4618      	mov	r0, r3
 8000844:	3724      	adds	r7, #36	@ 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000860:	d301      	bcc.n	8000866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2301      	movs	r3, #1
 8000864:	e00f      	b.n	8000886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <SysTick_Config+0x40>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086e:	210f      	movs	r1, #15
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff ff8e 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SysTick_Config+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Config+0x40>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff47 	bl	8000730 <__NVIC_SetPriorityGrouping>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff5c 	bl	8000778 <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff8e 	bl	80007e8 <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5d 	bl	8000794 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffb0 	bl	8000850 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e17f      	b.n	8000c0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8171 	beq.w	8000c06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b01      	cmp	r3, #1
 800092e:	d005      	beq.n	800093c <HAL_GPIO_Init+0x40>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d130      	bne.n	800099e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000972:	2201      	movs	r2, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	f003 0201 	and.w	r2, r3, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d118      	bne.n	80009dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009b0:	2201      	movs	r2, #1
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	f003 0201 	and.w	r2, r3, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d017      	beq.n	8000a18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d123      	bne.n	8000a6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	08da      	lsrs	r2, r3, #3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3208      	adds	r2, #8
 8000a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	220f      	movs	r2, #15
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	691a      	ldr	r2, [r3, #16]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	08da      	lsrs	r2, r3, #3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3208      	adds	r2, #8
 8000a66:	6939      	ldr	r1, [r7, #16]
 8000a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0203 	and.w	r2, r3, #3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80ac 	beq.w	8000c06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b5f      	ldr	r3, [pc, #380]	@ (8000c2c <HAL_GPIO_Init+0x330>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8000c2c <HAL_GPIO_Init+0x330>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aba:	4b5c      	ldr	r3, [pc, #368]	@ (8000c2c <HAL_GPIO_Init+0x330>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8000c30 <HAL_GPIO_Init+0x334>)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000af0:	d025      	beq.n	8000b3e <HAL_GPIO_Init+0x242>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4f      	ldr	r2, [pc, #316]	@ (8000c34 <HAL_GPIO_Init+0x338>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01f      	beq.n	8000b3a <HAL_GPIO_Init+0x23e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	@ (8000c38 <HAL_GPIO_Init+0x33c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0x23a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4d      	ldr	r2, [pc, #308]	@ (8000c3c <HAL_GPIO_Init+0x340>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d013      	beq.n	8000b32 <HAL_GPIO_Init+0x236>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c40 <HAL_GPIO_Init+0x344>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d00d      	beq.n	8000b2e <HAL_GPIO_Init+0x232>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4b      	ldr	r2, [pc, #300]	@ (8000c44 <HAL_GPIO_Init+0x348>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d007      	beq.n	8000b2a <HAL_GPIO_Init+0x22e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c48 <HAL_GPIO_Init+0x34c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_GPIO_Init+0x22a>
 8000b22:	2306      	movs	r3, #6
 8000b24:	e00c      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b26:	2307      	movs	r3, #7
 8000b28:	e00a      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	e008      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b2e:	2304      	movs	r3, #4
 8000b30:	e006      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e004      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b36:	2302      	movs	r3, #2
 8000b38:	e002      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <HAL_GPIO_Init+0x244>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	f002 0203 	and.w	r2, r2, #3
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	4093      	lsls	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b50:	4937      	ldr	r1, [pc, #220]	@ (8000c30 <HAL_GPIO_Init+0x334>)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	3302      	adds	r3, #2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b82:	4a32      	ldr	r2, [pc, #200]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b88:	4b30      	ldr	r3, [pc, #192]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bac:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bb2:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <HAL_GPIO_Init+0x350>)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa22 f303 	lsr.w	r3, r2, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f47f ae78 	bne.w	800090c <HAL_GPIO_Init+0x10>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	48000c00 	.word	0x48000c00
 8000c40:	48001000 	.word	0x48001000
 8000c44:	48001400 	.word	0x48001400
 8000c48:	48001800 	.word	0x48001800
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c6c:	e002      	b.n	8000c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40007000 	.word	0x40007000

08000c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000caa:	d130      	bne.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cac:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cb8:	d038      	beq.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2232      	movs	r2, #50	@ 0x32
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cda:	0c9b      	lsrs	r3, r3, #18
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce0:	e002      	b.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf4:	d102      	bne.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f2      	bne.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d08:	d110      	bne.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e00f      	b.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d1a:	d007      	beq.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d24:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	20000000 	.word	0x20000000
 8000d44:	431bde83 	.word	0x431bde83

08000d48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e3ca      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d5a:	4b97      	ldr	r3, [pc, #604]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d64:	4b94      	ldr	r3, [pc, #592]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80e4 	beq.w	8000f44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <HAL_RCC_OscConfig+0x4a>
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	f040 808b 	bne.w	8000ea0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	f040 8087 	bne.w	8000ea0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d92:	4b89      	ldr	r3, [pc, #548]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <HAL_RCC_OscConfig+0x62>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e3a2      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a1a      	ldr	r2, [r3, #32]
 8000dae:	4b82      	ldr	r3, [pc, #520]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d004      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x7c>
 8000dba:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dc2:	e005      	b.n	8000dd0 <HAL_RCC_OscConfig+0x88>
 8000dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d223      	bcs.n	8000e1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fd1d 	bl	8001818 <RCC_SetFlashLatencyFromMSIRange>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e383      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de8:	4b73      	ldr	r3, [pc, #460]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a72      	ldr	r2, [pc, #456]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b70      	ldr	r3, [pc, #448]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	496d      	ldr	r1, [pc, #436]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e06:	4b6c      	ldr	r3, [pc, #432]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	4968      	ldr	r1, [pc, #416]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
 8000e1a:	e025      	b.n	8000e68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1c:	4b66      	ldr	r3, [pc, #408]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a65      	ldr	r2, [pc, #404]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b63      	ldr	r3, [pc, #396]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4960      	ldr	r1, [pc, #384]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	495b      	ldr	r1, [pc, #364]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fcdd 	bl	8001818 <RCC_SetFlashLatencyFromMSIRange>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e343      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e68:	f000 fc4a 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b52      	ldr	r3, [pc, #328]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	4950      	ldr	r1, [pc, #320]	@ (8000fbc <HAL_RCC_OscConfig+0x274>)
 8000e7a:	5ccb      	ldrb	r3, [r1, r3]
 8000e7c:	f003 031f 	and.w	r3, r3, #31
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc0 <HAL_RCC_OscConfig+0x278>)
 8000e86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e88:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc4 <HAL_RCC_OscConfig+0x27c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fc07 	bl	80006a0 <HAL_InitTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d052      	beq.n	8000f42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	e327      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d032      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ea8:	4b43      	ldr	r3, [pc, #268]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a42      	ldr	r2, [pc, #264]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc30 	bl	8000718 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fc2c 	bl	8000718 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e310      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ece:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eda:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a36      	ldr	r2, [pc, #216]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4931      	ldr	r1, [pc, #196]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	492c      	ldr	r1, [pc, #176]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
 8000f0c:	e01a      	b.n	8000f44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fbfd 	bl	8000718 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f22:	f7ff fbf9 	bl	8000718 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e2dd      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f34:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f0      	bne.n	8000f22 <HAL_RCC_OscConfig+0x1da>
 8000f40:	e000      	b.n	8000f44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d074      	beq.n	800103a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d005      	beq.n	8000f62 <HAL_RCC_OscConfig+0x21a>
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b0c      	cmp	r3, #12
 8000f5a:	d10e      	bne.n	8000f7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d10b      	bne.n	8000f7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d064      	beq.n	8001038 <HAL_RCC_OscConfig+0x2f0>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d160      	bne.n	8001038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e2ba      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x24a>
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e026      	b.n	8000fe0 <HAL_RCC_OscConfig+0x298>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f9a:	d115      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x280>
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a02      	ldr	r2, [pc, #8]	@ (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e014      	b.n	8000fe0 <HAL_RCC_OscConfig+0x298>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	080034e4 	.word	0x080034e4
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	4ba0      	ldr	r3, [pc, #640]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b9d      	ldr	r3, [pc, #628]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a9c      	ldr	r2, [pc, #624]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fb96 	bl	8000718 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fb92 	bl	8000718 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	@ 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e276      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001002:	4b92      	ldr	r3, [pc, #584]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x2a8>
 800100e:	e014      	b.n	800103a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fb82 	bl	8000718 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fb7e 	bl	8000718 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	@ 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e262      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102a:	4b88      	ldr	r3, [pc, #544]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x2d0>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d060      	beq.n	8001108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d005      	beq.n	8001058 <HAL_RCC_OscConfig+0x310>
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2b0c      	cmp	r3, #12
 8001050:	d119      	bne.n	8001086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d116      	bne.n	8001086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001058:	4b7c      	ldr	r3, [pc, #496]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x328>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e23f      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b76      	ldr	r3, [pc, #472]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	061b      	lsls	r3, r3, #24
 800107e:	4973      	ldr	r1, [pc, #460]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001084:	e040      	b.n	8001108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d023      	beq.n	80010d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108e:	4b6f      	ldr	r3, [pc, #444]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6e      	ldr	r2, [pc, #440]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109a:	f7ff fb3d 	bl	8000718 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fb39 	bl	8000718 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e21d      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b4:	4b65      	ldr	r3, [pc, #404]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b62      	ldr	r3, [pc, #392]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	061b      	lsls	r3, r3, #24
 80010ce:	495f      	ldr	r1, [pc, #380]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e018      	b.n	8001108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d6:	4b5d      	ldr	r3, [pc, #372]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a5c      	ldr	r2, [pc, #368]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80010dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb19 	bl	8000718 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fb15 	bl	8000718 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e1f9      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fc:	4b53      	ldr	r3, [pc, #332]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03c      	beq.n	800118e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01c      	beq.n	8001156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111c:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 800111e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001122:	4a4a      	ldr	r2, [pc, #296]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800112c:	f7ff faf4 	bl	8000718 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff faf0 	bl	8000718 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1d4      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001146:	4b41      	ldr	r3, [pc, #260]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0ef      	beq.n	8001134 <HAL_RCC_OscConfig+0x3ec>
 8001154:	e01b      	b.n	800118e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001156:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800115c:	4a3b      	ldr	r2, [pc, #236]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001166:	f7ff fad7 	bl	8000718 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fad3 	bl	8000718 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e1b7      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001180:	4b32      	ldr	r3, [pc, #200]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ef      	bne.n	800116e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80a6 	beq.w	80012e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10d      	bne.n	80011c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	4a26      	ldr	r2, [pc, #152]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c4:	2301      	movs	r3, #1
 80011c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_RCC_OscConfig+0x508>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d118      	bne.n	8001206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_RCC_OscConfig+0x508>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_RCC_OscConfig+0x508>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fa9a 	bl	8000718 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e8:	f7ff fa96 	bl	8000718 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e17a      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_RCC_OscConfig+0x508>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_RCC_OscConfig+0x4d8>
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800121e:	e029      	b.n	8001274 <HAL_RCC_OscConfig+0x52c>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d115      	bne.n	8001254 <HAL_RCC_OscConfig+0x50c>
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122e:	4a07      	ldr	r2, [pc, #28]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 800123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800123e:	4a03      	ldr	r2, [pc, #12]	@ (800124c <HAL_RCC_OscConfig+0x504>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x52c>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	40007000 	.word	0x40007000
 8001254:	4b9c      	ldr	r3, [pc, #624]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125a:	4a9b      	ldr	r2, [pc, #620]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001264:	4b98      	ldr	r3, [pc, #608]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126a:	4a97      	ldr	r2, [pc, #604]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d016      	beq.n	80012aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff fa4c 	bl	8000718 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001282:	e00a      	b.n	800129a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001284:	f7ff fa48 	bl	8000718 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e12a      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129a:	4b8b      	ldr	r3, [pc, #556]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800129c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ed      	beq.n	8001284 <HAL_RCC_OscConfig+0x53c>
 80012a8:	e015      	b.n	80012d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012aa:	f7ff fa35 	bl	8000718 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fa31 	bl	8000718 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e113      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c8:	4b7f      	ldr	r3, [pc, #508]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80012ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ed      	bne.n	80012b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4b7a      	ldr	r3, [pc, #488]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e0:	4a79      	ldr	r2, [pc, #484]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80012e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80fe 	beq.w	80014ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	f040 80d0 	bne.w	800149c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012fc:	4b72      	ldr	r3, [pc, #456]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0203 	and.w	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	429a      	cmp	r2, r3
 800130e:	d130      	bne.n	8001372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	3b01      	subs	r3, #1
 800131c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d127      	bne.n	8001372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d11f      	bne.n	8001372 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800133c:	2a07      	cmp	r2, #7
 800133e:	bf14      	ite	ne
 8001340:	2201      	movne	r2, #1
 8001342:	2200      	moveq	r2, #0
 8001344:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001346:	4293      	cmp	r3, r2
 8001348:	d113      	bne.n	8001372 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	3b01      	subs	r3, #1
 8001358:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d109      	bne.n	8001372 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	3b01      	subs	r3, #1
 800136c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d06e      	beq.n	8001450 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b0c      	cmp	r3, #12
 8001376:	d069      	beq.n	800144c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001384:	4b50      	ldr	r3, [pc, #320]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0ad      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001394:	4b4c      	ldr	r3, [pc, #304]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a4b      	ldr	r2, [pc, #300]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800139a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800139e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013a0:	f7ff f9ba 	bl	8000718 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff f9b6 	bl	8000718 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e09a      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ba:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c6:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4b40      	ldr	r3, [pc, #256]	@ (80014cc <HAL_RCC_OscConfig+0x784>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013d6:	3a01      	subs	r2, #1
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013e0:	0212      	lsls	r2, r2, #8
 80013e2:	4311      	orrs	r1, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013e8:	0852      	lsrs	r2, r2, #1
 80013ea:	3a01      	subs	r2, #1
 80013ec:	0552      	lsls	r2, r2, #21
 80013ee:	4311      	orrs	r1, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013f4:	0852      	lsrs	r2, r2, #1
 80013f6:	3a01      	subs	r2, #1
 80013f8:	0652      	lsls	r2, r2, #25
 80013fa:	4311      	orrs	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001400:	0912      	lsrs	r2, r2, #4
 8001402:	0452      	lsls	r2, r2, #17
 8001404:	430a      	orrs	r2, r1
 8001406:	4930      	ldr	r1, [pc, #192]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800140c:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a2d      	ldr	r2, [pc, #180]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a2a      	ldr	r2, [pc, #168]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001424:	f7ff f978 	bl	8000718 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff f974 	bl	8000718 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e058      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143e:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800144a:	e050      	b.n	80014ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e04f      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001450:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d148      	bne.n	80014ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001468:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001474:	f7ff f950 	bl	8000718 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff f94c 	bl	8000718 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e030      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x734>
 800149a:	e028      	b.n	80014ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d023      	beq.n	80014ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_RCC_OscConfig+0x780>)
 80014a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff f933 	bl	8000718 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b4:	e00c      	b.n	80014d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f92f 	bl	8000718 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d905      	bls.n	80014d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e013      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <HAL_RCC_OscConfig+0x7b0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ec      	bne.n	80014b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_RCC_OscConfig+0x7b0>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	4905      	ldr	r1, [pc, #20]	@ (80014f8 <HAL_RCC_OscConfig+0x7b0>)
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_RCC_OscConfig+0x7b4>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	60cb      	str	r3, [r1, #12]
 80014e8:	e001      	b.n	80014ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	feeefffc 	.word	0xfeeefffc

08001500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0e7      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001514:	4b75      	ldr	r3, [pc, #468]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d910      	bls.n	8001544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b72      	ldr	r3, [pc, #456]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 0207 	bic.w	r2, r3, #7
 800152a:	4970      	ldr	r1, [pc, #448]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b6e      	ldr	r3, [pc, #440]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0cf      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d010      	beq.n	8001572 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800155c:	429a      	cmp	r2, r3
 800155e:	d908      	bls.n	8001572 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b63      	ldr	r3, [pc, #396]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4960      	ldr	r1, [pc, #384]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d04c      	beq.n	8001618 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001586:	4b5a      	ldr	r3, [pc, #360]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d121      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e0a6      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4b54      	ldr	r3, [pc, #336]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d115      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e09a      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b6:	4b4e      	ldr	r3, [pc, #312]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e08e      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c6:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e086      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4943      	ldr	r1, [pc, #268]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e8:	f7ff f896 	bl	8000718 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f892 	bl	8000718 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e06e      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d010      	beq.n	8001646 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	4b31      	ldr	r3, [pc, #196]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001630:	429a      	cmp	r2, r3
 8001632:	d208      	bcs.n	8001646 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	492b      	ldr	r1, [pc, #172]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001646:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d210      	bcs.n	8001676 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001654:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 0207 	bic.w	r2, r3, #7
 800165c:	4923      	ldr	r1, [pc, #140]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001664:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <HAL_RCC_ClockConfig+0x1ec>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e036      	b.n	80016e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4918      	ldr	r1, [pc, #96]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4910      	ldr	r1, [pc, #64]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016b4:	f000 f824 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	490b      	ldr	r1, [pc, #44]	@ (80016f4 <HAL_RCC_ClockConfig+0x1f4>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <HAL_RCC_ClockConfig+0x1f8>)
 80016d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_RCC_ClockConfig+0x1fc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ffe1 	bl	80006a0 <HAL_InitTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80016e2:	7afb      	ldrb	r3, [r7, #11]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	080034e4 	.word	0x080034e4
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170e:	4b3e      	ldr	r3, [pc, #248]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001718:	4b3b      	ldr	r3, [pc, #236]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x34>
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d121      	bne.n	8001772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d11e      	bne.n	8001772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001740:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e005      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800175c:	4a2b      	ldr	r2, [pc, #172]	@ (800180c <HAL_RCC_GetSysClockFreq+0x10c>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d102      	bne.n	800177e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x110>)
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	e004      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d101      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x114>)
 8001786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d134      	bne.n	80017f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800178e:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d003      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0xac>
 80017a4:	e005      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x110>)
 80017a8:	617b      	str	r3, [r7, #20]
      break;
 80017aa:	e005      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ae:	617b      	str	r3, [r7, #20]
      break;
 80017b0:	e002      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	617b      	str	r3, [r7, #20]
      break;
 80017b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	3301      	adds	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	fb03 f202 	mul.w	r2, r3, r2
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	0e5b      	lsrs	r3, r3, #25
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	3301      	adds	r3, #1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017f8:	69bb      	ldr	r3, [r7, #24]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	080034f4 	.word	0x080034f4
 8001810:	00f42400 	.word	0x00f42400
 8001814:	007a1200 	.word	0x007a1200

08001818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001830:	f7ff fa26 	bl	8000c80 <HAL_PWREx_GetVoltageRange>
 8001834:	6178      	str	r0, [r7, #20]
 8001836:	e014      	b.n	8001862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183c:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001842:	6593      	str	r3, [r2, #88]	@ 0x58
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001850:	f7ff fa16 	bl	8000c80 <HAL_PWREx_GetVoltageRange>
 8001854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a1d      	ldr	r2, [pc, #116]	@ (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001868:	d10b      	bne.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b80      	cmp	r3, #128	@ 0x80
 800186e:	d919      	bls.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2ba0      	cmp	r3, #160	@ 0xa0
 8001874:	d902      	bls.n	800187c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001876:	2302      	movs	r3, #2
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e013      	b.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800187c:	2301      	movs	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	e010      	b.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b80      	cmp	r3, #128	@ 0x80
 8001886:	d902      	bls.n	800188e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	e00a      	b.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b80      	cmp	r3, #128	@ 0x80
 8001892:	d102      	bne.n	800189a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001894:	2302      	movs	r3, #2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e004      	b.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b70      	cmp	r3, #112	@ 0x70
 800189e:	d101      	bne.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a0:	2301      	movs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 0207 	bic.w	r2, r3, #7
 80018ac:	4909      	ldr	r1, [pc, #36]	@ (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40022000 	.word	0x40022000

080018d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f103 0208 	add.w	r2, r3, #8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f103 0208 	add.w	r2, r3, #8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 0208 	add.w	r2, r3, #8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6892      	ldr	r2, [r2, #8]
 8001948:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6852      	ldr	r2, [r2, #4]
 8001952:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	d103      	bne.n	8001966 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001986:	b580      	push	{r7, lr}
 8001988:	b08c      	sub	sp, #48	@ 0x30
 800198a:	af04      	add	r7, sp, #16
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fef6 	bl	800278c <pvPortMalloc>
 80019a0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019a8:	2058      	movs	r0, #88	@ 0x58
 80019aa:	f000 feef 	bl	800278c <pvPortMalloc>
 80019ae:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80019b6:	2258      	movs	r2, #88	@ 0x58
 80019b8:	2100      	movs	r1, #0
 80019ba:	69f8      	ldr	r0, [r7, #28]
 80019bc:	f001 faaa 	bl	8002f14 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80019c6:	e005      	b.n	80019d4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f000 ff9b 	bl	8002904 <vPortFree>
 80019ce:	e001      	b.n	80019d4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d013      	beq.n	8001a02 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	2300      	movs	r3, #0
 80019de:	9303      	str	r3, [sp, #12]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f80e 	bl	8001a12 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80019f6:	69f8      	ldr	r0, [r7, #28]
 80019f8:	f000 f89c 	bl	8001b34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80019fc:	2301      	movs	r3, #1
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	e002      	b.n	8001a08 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a08:	69bb      	ldr	r3, [r7, #24]
    }
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a22:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	21a5      	movs	r1, #165	@ 0xa5
 8001a2c:	f001 fa72 	bl	8002f14 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8001a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f3bf 8f4f 	dsb	sy
 8001a64:	617b      	str	r3, [r7, #20]
    }
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01e      	beq.n	8001ab0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e012      	b.n	8001a9e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	7819      	ldrb	r1, [r3, #0]
 8001a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	3334      	adds	r3, #52	@ 0x34
 8001a88:	460a      	mov	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	d9e9      	bls.n	8001a78 <prvInitialiseNewTask+0x66>
 8001aa4:	e000      	b.n	8001aa8 <prvInitialiseNewTask+0x96>
            {
                break;
 8001aa6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d90b      	bls.n	8001ace <prvInitialiseNewTask+0xbc>
        __asm volatile
 8001ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	613b      	str	r3, [r7, #16]
    }
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	e7fd      	b.n	8001aca <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d901      	bls.n	8001ad8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001adc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff15 	bl	8001918 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af0:	3318      	adds	r3, #24
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff10 	bl	8001918 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001afc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b00:	f1c3 0205 	rsb	r2, r3, #5
 8001b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b06:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	69b8      	ldr	r0, [r7, #24]
 8001b14:	f000 fc20 	bl	8002358 <pxPortInitialiseStack>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b28:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001b3c:	f000 fd3e 	bl	80025bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001b40:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <prvAddNewTaskToReadyList+0x110>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a3f      	ldr	r2, [pc, #252]	@ (8001c44 <prvAddNewTaskToReadyList+0x110>)
 8001b48:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <prvAddNewTaskToReadyList+0x114>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001b52:	4a3d      	ldr	r2, [pc, #244]	@ (8001c48 <prvAddNewTaskToReadyList+0x114>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b58:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <prvAddNewTaskToReadyList+0x110>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d110      	bne.n	8001b82 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b60:	f000 fb60 	bl	8002224 <prvInitialiseTaskLists>
 8001b64:	e00d      	b.n	8001b82 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b66:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <prvAddNewTaskToReadyList+0x118>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b6e:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <prvAddNewTaskToReadyList+0x114>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d802      	bhi.n	8001b82 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b7c:	4a32      	ldr	r2, [pc, #200]	@ (8001c48 <prvAddNewTaskToReadyList+0x114>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b82:	4b33      	ldr	r3, [pc, #204]	@ (8001c50 <prvAddNewTaskToReadyList+0x11c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a31      	ldr	r2, [pc, #196]	@ (8001c50 <prvAddNewTaskToReadyList+0x11c>)
 8001b8a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b8c:	4b30      	ldr	r3, [pc, #192]	@ (8001c50 <prvAddNewTaskToReadyList+0x11c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	2201      	movs	r2, #1
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <prvAddNewTaskToReadyList+0x120>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c54 <prvAddNewTaskToReadyList+0x120>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001baa:	492b      	ldr	r1, [pc, #172]	@ (8001c58 <prvAddNewTaskToReadyList+0x124>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	3204      	adds	r2, #4
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	1d1a      	adds	r2, r3, #4
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <prvAddNewTaskToReadyList+0x124>)
 8001bea:	441a      	add	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf4:	4918      	ldr	r1, [pc, #96]	@ (8001c58 <prvAddNewTaskToReadyList+0x124>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	1c59      	adds	r1, r3, #1
 8001c04:	4814      	ldr	r0, [pc, #80]	@ (8001c58 <prvAddNewTaskToReadyList+0x124>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4403      	add	r3, r0
 8001c10:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c12:	f000 fd05 	bl	8002620 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <prvAddNewTaskToReadyList+0x118>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00e      	beq.n	8001c3c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <prvAddNewTaskToReadyList+0x114>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <prvAddNewTaskToReadyList+0x128>)
 8001c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000164 	.word	0x20000164
 8001c48:	2000008c 	.word	0x2000008c
 8001c4c:	20000170 	.word	0x20000170
 8001c50:	20000180 	.word	0x20000180
 8001c54:	2000016c 	.word	0x2000016c
 8001c58:	20000090 	.word	0x20000090
 8001c5c:	e000ed04 	.word	0xe000ed04

08001c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <vTaskStartScheduler+0x7c>)
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2282      	movs	r2, #130	@ 0x82
 8001c72:	491b      	ldr	r1, [pc, #108]	@ (8001ce0 <vTaskStartScheduler+0x80>)
 8001c74:	481b      	ldr	r0, [pc, #108]	@ (8001ce4 <vTaskStartScheduler+0x84>)
 8001c76:	f7ff fe86 	bl	8001986 <xTaskCreate>
 8001c7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d116      	bne.n	8001cb0 <vTaskStartScheduler+0x50>
        __asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	60bb      	str	r3, [r7, #8]
    }
 8001c94:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <vTaskStartScheduler+0x88>)
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <vTaskStartScheduler+0x8c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <vTaskStartScheduler+0x90>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001caa:	f000 fbe3 	bl	8002474 <xPortStartScheduler>
 8001cae:	e00f      	b.n	8001cd0 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb6:	d10b      	bne.n	8001cd0 <vTaskStartScheduler+0x70>
        __asm volatile
 8001cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cbc:	f383 8811 	msr	BASEPRI, r3
 8001cc0:	f3bf 8f6f 	isb	sy
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	607b      	str	r3, [r7, #4]
    }
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <vTaskStartScheduler+0x94>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000188 	.word	0x20000188
 8001ce0:	080034dc 	.word	0x080034dc
 8001ce4:	080021f5 	.word	0x080021f5
 8001ce8:	20000184 	.word	0x20000184
 8001cec:	20000170 	.word	0x20000170
 8001cf0:	20000168 	.word	0x20000168
 8001cf4:	08003524 	.word	0x08003524

08001cf8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <vTaskSuspendAll+0x18>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	4a03      	ldr	r2, [pc, #12]	@ (8001d10 <vTaskSuspendAll+0x18>)
 8001d04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	2000018c 	.word	0x2000018c

08001d14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001d22:	4b71      	ldr	r3, [pc, #452]	@ (8001ee8 <xTaskResumeAll+0x1d4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10b      	bne.n	8001d42 <xTaskResumeAll+0x2e>
        __asm volatile
 8001d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d2e:	f383 8811 	msr	BASEPRI, r3
 8001d32:	f3bf 8f6f 	isb	sy
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	607b      	str	r3, [r7, #4]
    }
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	e7fd      	b.n	8001d3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001d42:	f000 fc3b 	bl	80025bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001d46:	4b68      	ldr	r3, [pc, #416]	@ (8001ee8 <xTaskResumeAll+0x1d4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	4a66      	ldr	r2, [pc, #408]	@ (8001ee8 <xTaskResumeAll+0x1d4>)
 8001d4e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d50:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <xTaskResumeAll+0x1d4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 80c0 	bne.w	8001eda <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d5a:	4b64      	ldr	r3, [pc, #400]	@ (8001eec <xTaskResumeAll+0x1d8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80bb 	beq.w	8001eda <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d64:	e08a      	b.n	8001e7c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d66:	4b62      	ldr	r3, [pc, #392]	@ (8001ef0 <xTaskResumeAll+0x1dc>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	6a12      	ldr	r2, [r2, #32]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	69d2      	ldr	r2, [r2, #28]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d103      	bne.n	8001d9c <xTaskResumeAll+0x88>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	1e5a      	subs	r2, r3, #1
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	68d2      	ldr	r2, [r2, #12]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	6892      	ldr	r2, [r2, #8]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d103      	bne.n	8001dda <xTaskResumeAll+0xc6>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	2201      	movs	r2, #1
 8001df0:	409a      	lsls	r2, r3
 8001df2:	4b40      	ldr	r3, [pc, #256]	@ (8001ef4 <xTaskResumeAll+0x1e0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ef4 <xTaskResumeAll+0x1e0>)
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e00:	493d      	ldr	r1, [pc, #244]	@ (8001ef8 <xTaskResumeAll+0x1e4>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	3204      	adds	r2, #4
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	1d1a      	adds	r2, r3, #4
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef8 <xTaskResumeAll+0x1e4>)
 8001e40:	441a      	add	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e4a:	492b      	ldr	r1, [pc, #172]	@ (8001ef8 <xTaskResumeAll+0x1e4>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	1c59      	adds	r1, r3, #1
 8001e5a:	4827      	ldr	r0, [pc, #156]	@ (8001ef8 <xTaskResumeAll+0x1e4>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4403      	add	r3, r0
 8001e66:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <xTaskResumeAll+0x1e8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8001e76:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <xTaskResumeAll+0x1ec>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <xTaskResumeAll+0x1dc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f af70 	bne.w	8001d66 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e8c:	f000 fa48 	bl	8002320 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e90:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <xTaskResumeAll+0x1f0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001e9c:	f000 f836 	bl	8001f0c <xTaskIncrementTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <xTaskResumeAll+0x1ec>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f1      	bne.n	8001e9c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <xTaskResumeAll+0x1f0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <xTaskResumeAll+0x1ec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <xTaskResumeAll+0x1f4>)
 8001ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f3bf 8f4f 	dsb	sy
 8001ed6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001eda:	f000 fba1 	bl	8002620 <vPortExitCritical>

    return xAlreadyYielded;
 8001ede:	69bb      	ldr	r3, [r7, #24]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000018c 	.word	0x2000018c
 8001eec:	20000164 	.word	0x20000164
 8001ef0:	20000124 	.word	0x20000124
 8001ef4:	2000016c 	.word	0x2000016c
 8001ef8:	20000090 	.word	0x20000090
 8001efc:	2000008c 	.word	0x2000008c
 8001f00:	20000178 	.word	0x20000178
 8001f04:	20000174 	.word	0x20000174
 8001f08:	e000ed04 	.word	0xe000ed04

08001f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f16:	4b7e      	ldr	r3, [pc, #504]	@ (8002110 <xTaskIncrementTick+0x204>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 80ed 	bne.w	80020fa <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f20:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <xTaskIncrementTick+0x208>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f28:	4a7a      	ldr	r2, [pc, #488]	@ (8002114 <xTaskIncrementTick+0x208>)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d121      	bne.n	8001f78 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001f34:	4b78      	ldr	r3, [pc, #480]	@ (8002118 <xTaskIncrementTick+0x20c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <xTaskIncrementTick+0x4a>
        __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	607b      	str	r3, [r7, #4]
    }
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <xTaskIncrementTick+0x46>
 8001f56:	4b70      	ldr	r3, [pc, #448]	@ (8002118 <xTaskIncrementTick+0x20c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <xTaskIncrementTick+0x210>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6d      	ldr	r2, [pc, #436]	@ (8002118 <xTaskIncrementTick+0x20c>)
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4a6d      	ldr	r2, [pc, #436]	@ (800211c <xTaskIncrementTick+0x210>)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002120 <xTaskIncrementTick+0x214>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a6b      	ldr	r2, [pc, #428]	@ (8002120 <xTaskIncrementTick+0x214>)
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	f000 f9d4 	bl	8002320 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001f78:	4b6a      	ldr	r3, [pc, #424]	@ (8002124 <xTaskIncrementTick+0x218>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a3a      	ldr	r2, [r7, #32]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	f0c0 80a6 	bcc.w	80020d0 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f84:	4b64      	ldr	r3, [pc, #400]	@ (8002118 <xTaskIncrementTick+0x20c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f8e:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <xTaskIncrementTick+0x218>)
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	601a      	str	r2, [r3, #0]
                    break;
 8001f96:	e09b      	b.n	80020d0 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f98:	4b5f      	ldr	r3, [pc, #380]	@ (8002118 <xTaskIncrementTick+0x20c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d203      	bcs.n	8001fb8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001fb0:	4a5c      	ldr	r2, [pc, #368]	@ (8002124 <xTaskIncrementTick+0x218>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001fb6:	e08b      	b.n	80020d0 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	68d2      	ldr	r2, [r2, #12]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	6892      	ldr	r2, [r2, #8]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d103      	bne.n	8001fe6 <xTaskIncrementTick+0xda>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01e      	beq.n	800203c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	6a12      	ldr	r2, [r2, #32]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	69d2      	ldr	r2, [r2, #28]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	3318      	adds	r3, #24
 8002020:	429a      	cmp	r2, r3
 8002022:	d103      	bne.n	800202c <xTaskIncrementTick+0x120>
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	@ 0x28
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	4b38      	ldr	r3, [pc, #224]	@ (8002128 <xTaskIncrementTick+0x21c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	4a37      	ldr	r2, [pc, #220]	@ (8002128 <xTaskIncrementTick+0x21c>)
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002052:	4936      	ldr	r1, [pc, #216]	@ (800212c <xTaskIncrementTick+0x220>)
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3304      	adds	r3, #4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	3204      	adds	r2, #4
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1d1a      	adds	r2, r3, #4
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4a26      	ldr	r2, [pc, #152]	@ (800212c <xTaskIncrementTick+0x220>)
 8002092:	441a      	add	r2, r3
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800209c:	4923      	ldr	r1, [pc, #140]	@ (800212c <xTaskIncrementTick+0x220>)
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	481f      	ldr	r0, [pc, #124]	@ (800212c <xTaskIncrementTick+0x220>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4403      	add	r3, r0
 80020b8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020be:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <xTaskIncrementTick+0x224>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f67f af5d 	bls.w	8001f84 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020ce:	e759      	b.n	8001f84 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020d0:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <xTaskIncrementTick+0x224>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d6:	4915      	ldr	r1, [pc, #84]	@ (800212c <xTaskIncrementTick+0x220>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d901      	bls.n	80020ec <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <xTaskIncrementTick+0x228>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f8:	e004      	b.n	8002104 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <xTaskIncrementTick+0x22c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <xTaskIncrementTick+0x22c>)
 8002102:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002106:	4618      	mov	r0, r3
 8002108:	3728      	adds	r7, #40	@ 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000018c 	.word	0x2000018c
 8002114:	20000168 	.word	0x20000168
 8002118:	2000011c 	.word	0x2000011c
 800211c:	20000120 	.word	0x20000120
 8002120:	2000017c 	.word	0x2000017c
 8002124:	20000184 	.word	0x20000184
 8002128:	2000016c 	.word	0x2000016c
 800212c:	20000090 	.word	0x20000090
 8002130:	2000008c 	.word	0x2000008c
 8002134:	20000178 	.word	0x20000178
 8002138:	20000174 	.word	0x20000174

0800213c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002142:	4b27      	ldr	r3, [pc, #156]	@ (80021e0 <vTaskSwitchContext+0xa4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800214a:	4b26      	ldr	r3, [pc, #152]	@ (80021e4 <vTaskSwitchContext+0xa8>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002150:	e040      	b.n	80021d4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <vTaskSwitchContext+0xa8>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002158:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <vTaskSwitchContext+0xac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	f1c3 031f 	rsb	r3, r3, #31
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	491f      	ldr	r1, [pc, #124]	@ (80021ec <vTaskSwitchContext+0xb0>)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	607b      	str	r3, [r7, #4]
    }
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	e7fd      	b.n	8002196 <vTaskSwitchContext+0x5a>
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <vTaskSwitchContext+0xb0>)
 80021a6:	4413      	add	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	3308      	adds	r3, #8
 80021bc:	429a      	cmp	r2, r3
 80021be:	d104      	bne.n	80021ca <vTaskSwitchContext+0x8e>
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <vTaskSwitchContext+0xb4>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	2000018c 	.word	0x2000018c
 80021e4:	20000178 	.word	0x20000178
 80021e8:	2000016c 	.word	0x2000016c
 80021ec:	20000090 	.word	0x20000090
 80021f0:	2000008c 	.word	0x2000008c

080021f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80021fc:	f000 f852 	bl	80022a4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <prvIdleTask+0x28>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d9f9      	bls.n	80021fc <prvIdleTask+0x8>
            {
                taskYIELD();
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <prvIdleTask+0x2c>)
 800220a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002218:	e7f0      	b.n	80021fc <prvIdleTask+0x8>
 800221a:	bf00      	nop
 800221c:	20000090 	.word	0x20000090
 8002220:	e000ed04 	.word	0xe000ed04

08002224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	e00c      	b.n	800224a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <prvInitialiseTaskLists+0x60>)
 800223c:	4413      	add	r3, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb4a 	bl	80018d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3301      	adds	r3, #1
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d9ef      	bls.n	8002230 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002250:	480d      	ldr	r0, [pc, #52]	@ (8002288 <prvInitialiseTaskLists+0x64>)
 8002252:	f7ff fb41 	bl	80018d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <prvInitialiseTaskLists+0x68>)
 8002258:	f7ff fb3e 	bl	80018d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800225c:	480c      	ldr	r0, [pc, #48]	@ (8002290 <prvInitialiseTaskLists+0x6c>)
 800225e:	f7ff fb3b 	bl	80018d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002262:	480c      	ldr	r0, [pc, #48]	@ (8002294 <prvInitialiseTaskLists+0x70>)
 8002264:	f7ff fb38 	bl	80018d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002268:	480b      	ldr	r0, [pc, #44]	@ (8002298 <prvInitialiseTaskLists+0x74>)
 800226a:	f7ff fb35 	bl	80018d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <prvInitialiseTaskLists+0x78>)
 8002270:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <prvInitialiseTaskLists+0x64>)
 8002272:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <prvInitialiseTaskLists+0x7c>)
 8002276:	4a05      	ldr	r2, [pc, #20]	@ (800228c <prvInitialiseTaskLists+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000090 	.word	0x20000090
 8002288:	200000f4 	.word	0x200000f4
 800228c:	20000108 	.word	0x20000108
 8002290:	20000124 	.word	0x20000124
 8002294:	20000138 	.word	0x20000138
 8002298:	20000150 	.word	0x20000150
 800229c:	2000011c 	.word	0x2000011c
 80022a0:	20000120 	.word	0x20000120

080022a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022aa:	e019      	b.n	80022e0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80022ac:	f000 f986 	bl	80025bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022b0:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <prvCheckTasksWaitingTermination+0x50>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fb38 	bl	8001932 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <prvCheckTasksWaitingTermination+0x54>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <prvCheckTasksWaitingTermination+0x54>)
 80022ca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <prvCheckTasksWaitingTermination+0x58>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <prvCheckTasksWaitingTermination+0x58>)
 80022d4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80022d6:	f000 f9a3 	bl	8002620 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f810 	bl	8002300 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <prvCheckTasksWaitingTermination+0x58>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e1      	bne.n	80022ac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000138 	.word	0x20000138
 80022f8:	20000164 	.word	0x20000164
 80022fc:	2000014c 	.word	0x2000014c

08002300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	4618      	mov	r0, r3
 800230e:	f000 faf9 	bl	8002904 <vPortFree>
            vPortFree( pxTCB );
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 faf6 	bl	8002904 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <prvResetNextTaskUnblockTime+0x30>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <prvResetNextTaskUnblockTime+0x34>)
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002336:	e005      	b.n	8002344 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <prvResetNextTaskUnblockTime+0x30>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <prvResetNextTaskUnblockTime+0x34>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000011c 	.word	0x2000011c
 8002354:	20000184 	.word	0x20000184

08002358 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3b04      	subs	r3, #4
 8002368:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002370:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b04      	subs	r3, #4
 8002376:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f023 0201 	bic.w	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b04      	subs	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002388:	4a0c      	ldr	r2, [pc, #48]	@ (80023bc <pxPortInitialiseStack+0x64>)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b14      	subs	r3, #20
 8002392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b04      	subs	r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f06f 0202 	mvn.w	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3b20      	subs	r3, #32
 80023ac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	080023c1 	.word	0x080023c1

080023c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <prvTaskExitError+0x58>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d00b      	beq.n	80023ec <prvTaskExitError+0x2c>
        __asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	60fb      	str	r3, [r7, #12]
    }
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <prvTaskExitError+0x28>
        __asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	60bb      	str	r3, [r7, #8]
    }
 80023fe:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002400:	bf00      	nop
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0fc      	beq.n	8002402 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000000c 	.word	0x2000000c
 800241c:	00000000 	.word	0x00000000

08002420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002420:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <pxCurrentTCBConst2>)
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	6808      	ldr	r0, [r1, #0]
 8002426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242a:	f380 8809 	msr	PSP, r0
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f380 8811 	msr	BASEPRI, r0
 800243a:	4770      	bx	lr
 800243c:	f3af 8000 	nop.w

08002440 <pxCurrentTCBConst2>:
 8002440:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop

08002448 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002448:	4808      	ldr	r0, [pc, #32]	@ (800246c <prvPortStartFirstTask+0x24>)
 800244a:	6800      	ldr	r0, [r0, #0]
 800244c:	6800      	ldr	r0, [r0, #0]
 800244e:	f380 8808 	msr	MSP, r0
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f380 8814 	msr	CONTROL, r0
 800245a:	b662      	cpsie	i
 800245c:	b661      	cpsie	f
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	df00      	svc	0
 8002468:	bf00      	nop
 800246a:	0000      	.short	0x0000
 800246c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop

08002474 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800247a:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <xPortStartScheduler+0x124>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a47      	ldr	r2, [pc, #284]	@ (800259c <xPortStartScheduler+0x128>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10b      	bne.n	800249c <xPortStartScheduler+0x28>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	60fb      	str	r3, [r7, #12]
    }
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800249c:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <xPortStartScheduler+0x124>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3f      	ldr	r2, [pc, #252]	@ (80025a0 <xPortStartScheduler+0x12c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d10b      	bne.n	80024be <xPortStartScheduler+0x4a>
        __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	613b      	str	r3, [r7, #16]
    }
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	e7fd      	b.n	80024ba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024be:	4b39      	ldr	r3, [pc, #228]	@ (80025a4 <xPortStartScheduler+0x130>)
 80024c0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	22ff      	movs	r2, #255	@ 0xff
 80024ce:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <xPortStartScheduler+0x134>)
 80024e4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024e6:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <xPortStartScheduler+0x138>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024ec:	e009      	b.n	8002502 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80024ee:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <xPortStartScheduler+0x138>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a2d      	ldr	r2, [pc, #180]	@ (80025ac <xPortStartScheduler+0x138>)
 80024f6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250a:	2b80      	cmp	r3, #128	@ 0x80
 800250c:	d0ef      	beq.n	80024ee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800250e:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <xPortStartScheduler+0x138>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	d00b      	beq.n	8002532 <xPortStartScheduler+0xbe>
        __asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	60bb      	str	r3, [r7, #8]
    }
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	e7fd      	b.n	800252e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <xPortStartScheduler+0x138>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <xPortStartScheduler+0x138>)
 800253a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <xPortStartScheduler+0x138>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002544:	4a19      	ldr	r2, [pc, #100]	@ (80025ac <xPortStartScheduler+0x138>)
 8002546:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002550:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <xPortStartScheduler+0x13c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a16      	ldr	r2, [pc, #88]	@ (80025b0 <xPortStartScheduler+0x13c>)
 8002556:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800255a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800255c:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <xPortStartScheduler+0x13c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a13      	ldr	r2, [pc, #76]	@ (80025b0 <xPortStartScheduler+0x13c>)
 8002562:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002566:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002568:	f000 f8e0 	bl	800272c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <xPortStartScheduler+0x140>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002572:	f000 f8ff 	bl	8002774 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <xPortStartScheduler+0x144>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a0f      	ldr	r2, [pc, #60]	@ (80025b8 <xPortStartScheduler+0x144>)
 800257c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002580:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002582:	f7ff ff61 	bl	8002448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002586:	f7ff fdd9 	bl	800213c <vTaskSwitchContext>
    prvTaskExitError();
 800258a:	f7ff ff19 	bl	80023c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	410fc271 	.word	0x410fc271
 80025a0:	410fc270 	.word	0x410fc270
 80025a4:	e000e400 	.word	0xe000e400
 80025a8:	20000190 	.word	0x20000190
 80025ac:	20000194 	.word	0x20000194
 80025b0:	e000ed20 	.word	0xe000ed20
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	e000ef34 	.word	0xe000ef34

080025bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
        __asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	607b      	str	r3, [r7, #4]
    }
 80025d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <vPortEnterCritical+0x5c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <vPortEnterCritical+0x5c>)
 80025de:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80025e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <vPortEnterCritical+0x5c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d110      	bne.n	800260a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <vPortEnterCritical+0x60>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <vPortEnterCritical+0x4e>
        __asm volatile
 80025f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	603b      	str	r3, [r7, #0]
    }
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	e7fd      	b.n	8002606 <vPortEnterCritical+0x4a>
    }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000000c 	.word	0x2000000c
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <vPortExitCritical+0x50>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10b      	bne.n	8002646 <vPortExitCritical+0x26>
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	607b      	str	r3, [r7, #4]
    }
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	e7fd      	b.n	8002642 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002646:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <vPortExitCritical+0x50>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3b01      	subs	r3, #1
 800264c:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <vPortExitCritical+0x50>)
 800264e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <vPortExitCritical+0x50>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <vPortExitCritical+0x44>
 8002658:	2300      	movs	r3, #0
 800265a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002662:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	2000000c 	.word	0x2000000c
	...

08002680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002680:	f3ef 8009 	mrs	r0, PSP
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <pxCurrentTCBConst>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f01e 0f10 	tst.w	lr, #16
 8002690:	bf08      	it	eq
 8002692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269a:	6010      	str	r0, [r2, #0]
 800269c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80026a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80026a4:	f380 8811 	msr	BASEPRI, r0
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f7ff fd44 	bl	800213c <vTaskSwitchContext>
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f380 8811 	msr	BASEPRI, r0
 80026bc:	bc09      	pop	{r0, r3}
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	6808      	ldr	r0, [r1, #0]
 80026c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c6:	f01e 0f10 	tst.w	lr, #16
 80026ca:	bf08      	it	eq
 80026cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80026d0:	f380 8809 	msr	PSP, r0
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	f3af 8000 	nop.w

080026e0 <pxCurrentTCBConst>:
 80026e0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop

080026e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
        __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	607b      	str	r3, [r7, #4]
    }
 8002700:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002702:	f7ff fc03 	bl	8001f0c <xTaskIncrementTick>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <SysTick_Handler+0x40>)
 800270e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	2300      	movs	r3, #0
 8002716:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f383 8811 	msr	BASEPRI, r3
    }
 800271e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	e000ed04 	.word	0xe000ed04

0800272c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <vPortSetupTimerInterrupt+0x34>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <vPortSetupTimerInterrupt+0x38>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <vPortSetupTimerInterrupt+0x3c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <vPortSetupTimerInterrupt+0x40>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <vPortSetupTimerInterrupt+0x44>)
 800274a:	3b01      	subs	r3, #1
 800274c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <vPortSetupTimerInterrupt+0x34>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010
 8002764:	e000e018 	.word	0xe000e018
 8002768:	20000000 	.word	0x20000000
 800276c:	10624dd3 	.word	0x10624dd3
 8002770:	e000e014 	.word	0xe000e014

08002774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002784 <vPortEnableVFP+0x10>
 8002778:	6801      	ldr	r1, [r0, #0]
 800277a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800277e:	6001      	str	r1, [r0, #0]
 8002780:	4770      	bx	lr
 8002782:	0000      	.short	0x0000
 8002784:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop

0800278c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002798:	f7ff faae 	bl	8001cf8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800279c:	4b54      	ldr	r3, [pc, #336]	@ (80028f0 <pvPortMalloc+0x164>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80027a4:	f000 f908 	bl	80029b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80027ae:	2208      	movs	r2, #8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	3308      	adds	r3, #8
 80027ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	43db      	mvns	r3, r3
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d804      	bhi.n	80027d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	e001      	b.n	80027d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db71      	blt.n	80028be <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d06e      	beq.n	80028be <pvPortMalloc+0x132>
 80027e0:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <pvPortMalloc+0x168>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d869      	bhi.n	80028be <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80027ea:	4b43      	ldr	r3, [pc, #268]	@ (80028f8 <pvPortMalloc+0x16c>)
 80027ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80027ee:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <pvPortMalloc+0x16c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027f4:	e004      	b.n	8002800 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	429a      	cmp	r2, r3
 8002808:	d903      	bls.n	8002812 <pvPortMalloc+0x86>
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f1      	bne.n	80027f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002812:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <pvPortMalloc+0x164>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002818:	429a      	cmp	r2, r3
 800281a:	d050      	beq.n	80028be <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2208      	movs	r2, #8
 8002822:	4413      	add	r3, r2
 8002824:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	2308      	movs	r3, #8
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	429a      	cmp	r2, r3
 800283c:	d920      	bls.n	8002880 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800283e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <pvPortMalloc+0xdc>
        __asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	613b      	str	r3, [r7, #16]
    }
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f000 f8f8 	bl	8002a70 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002880:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <pvPortMalloc+0x168>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <pvPortMalloc+0x168>)
 800288c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800288e:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <pvPortMalloc+0x168>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <pvPortMalloc+0x170>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d203      	bcs.n	80028a2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800289a:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <pvPortMalloc+0x168>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <pvPortMalloc+0x170>)
 80028a0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <pvPortMalloc+0x174>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a11      	ldr	r2, [pc, #68]	@ (8002900 <pvPortMalloc+0x174>)
 80028bc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80028be:	f7ff fa29 	bl	8001d14 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <pvPortMalloc+0x158>
        __asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60fb      	str	r3, [r7, #12]
    }
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <pvPortMalloc+0x154>
    return pvReturn;
 80028e4:	69fb      	ldr	r3, [r7, #28]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3728      	adds	r7, #40	@ 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20012da0 	.word	0x20012da0
 80028f4:	20012da4 	.word	0x20012da4
 80028f8:	20012d98 	.word	0x20012d98
 80028fc:	20012da8 	.word	0x20012da8
 8002900:	20012dac 	.word	0x20012dac

08002904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d047      	beq.n	80029a6 <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002916:	2308      	movs	r3, #8
 8002918:	425b      	negs	r3, r3
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0b      	blt.n	8002944 <vPortFree+0x40>
        __asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	60fb      	str	r3, [r7, #12]
    }
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <vPortFree+0x60>
        __asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	60bb      	str	r3, [r7, #8]
    }
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da1c      	bge.n	80029a6 <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002980:	f7ff f9ba 	bl	8001cf8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <vPortFree+0xac>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4413      	add	r3, r2
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <vPortFree+0xac>)
 8002990:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002992:	6938      	ldr	r0, [r7, #16]
 8002994:	f000 f86c 	bl	8002a70 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <vPortFree+0xb0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3301      	adds	r3, #1
 800299e:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <vPortFree+0xb0>)
 80029a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80029a2:	f7ff f9b7 	bl	8001d14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20012da4 	.word	0x20012da4
 80029b4:	20012db0 	.word	0x20012db0

080029b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029be:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80029c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80029c4:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <prvHeapInit+0xa4>)
 80029c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3307      	adds	r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <prvHeapInit+0xa4>)
 80029e8:	4413      	add	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <prvHeapInit+0xa8>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80029f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <prvHeapInit+0xa8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4413      	add	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002a04:	2208      	movs	r2, #8
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <prvHeapInit+0xac>)
 8002a18:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <prvHeapInit+0xac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <prvHeapInit+0xac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <prvHeapInit+0xac>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <prvHeapInit+0xb0>)
 8002a46:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <prvHeapInit+0xb4>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	20000198 	.word	0x20000198
 8002a60:	20012d98 	.word	0x20012d98
 8002a64:	20012da0 	.word	0x20012da0
 8002a68:	20012da8 	.word	0x20012da8
 8002a6c:	20012da4 	.word	0x20012da4

08002a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a78:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <prvInsertBlockIntoFreeList+0xac>)
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e002      	b.n	8002a84 <prvInsertBlockIntoFreeList+0x14>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d8f7      	bhi.n	8002a7e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4413      	add	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d108      	bne.n	8002ab2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	441a      	add	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d118      	bne.n	8002af8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <prvInsertBlockIntoFreeList+0xb0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d00d      	beq.n	8002aee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	441a      	add	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e008      	b.n	8002b00 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <prvInsertBlockIntoFreeList+0xb0>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e003      	b.n	8002b00 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d002      	beq.n	8002b0e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20012d98 	.word	0x20012d98
 8002b20:	20012da0 	.word	0x20012da0

08002b24 <std>:
 8002b24:	2300      	movs	r3, #0
 8002b26:	b510      	push	{r4, lr}
 8002b28:	4604      	mov	r4, r0
 8002b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b32:	6083      	str	r3, [r0, #8]
 8002b34:	8181      	strh	r1, [r0, #12]
 8002b36:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b38:	81c2      	strh	r2, [r0, #14]
 8002b3a:	6183      	str	r3, [r0, #24]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	2208      	movs	r2, #8
 8002b40:	305c      	adds	r0, #92	@ 0x5c
 8002b42:	f000 f9e7 	bl	8002f14 <memset>
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <std+0x58>)
 8002b48:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <std+0x5c>)
 8002b4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <std+0x60>)
 8002b50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <std+0x64>)
 8002b54:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <std+0x68>)
 8002b58:	6224      	str	r4, [r4, #32]
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	d006      	beq.n	8002b6c <std+0x48>
 8002b5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b62:	4294      	cmp	r4, r2
 8002b64:	d002      	beq.n	8002b6c <std+0x48>
 8002b66:	33d0      	adds	r3, #208	@ 0xd0
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	d105      	bne.n	8002b78 <std+0x54>
 8002b6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b74:	f000 ba40 	b.w	8002ff8 <__retarget_lock_init_recursive>
 8002b78:	bd10      	pop	{r4, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08002d65 	.word	0x08002d65
 8002b80:	08002d87 	.word	0x08002d87
 8002b84:	08002dbf 	.word	0x08002dbf
 8002b88:	08002de3 	.word	0x08002de3
 8002b8c:	20012db4 	.word	0x20012db4

08002b90 <stdio_exit_handler>:
 8002b90:	4a02      	ldr	r2, [pc, #8]	@ (8002b9c <stdio_exit_handler+0xc>)
 8002b92:	4903      	ldr	r1, [pc, #12]	@ (8002ba0 <stdio_exit_handler+0x10>)
 8002b94:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <stdio_exit_handler+0x14>)
 8002b96:	f000 b869 	b.w	8002c6c <_fwalk_sglue>
 8002b9a:	bf00      	nop
 8002b9c:	20000010 	.word	0x20000010
 8002ba0:	080032f9 	.word	0x080032f9
 8002ba4:	20000020 	.word	0x20000020

08002ba8 <cleanup_stdio>:
 8002ba8:	6841      	ldr	r1, [r0, #4]
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <cleanup_stdio+0x34>)
 8002bac:	4299      	cmp	r1, r3
 8002bae:	b510      	push	{r4, lr}
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	d001      	beq.n	8002bb8 <cleanup_stdio+0x10>
 8002bb4:	f000 fba0 	bl	80032f8 <_fflush_r>
 8002bb8:	68a1      	ldr	r1, [r4, #8]
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <cleanup_stdio+0x38>)
 8002bbc:	4299      	cmp	r1, r3
 8002bbe:	d002      	beq.n	8002bc6 <cleanup_stdio+0x1e>
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f000 fb99 	bl	80032f8 <_fflush_r>
 8002bc6:	68e1      	ldr	r1, [r4, #12]
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <cleanup_stdio+0x3c>)
 8002bca:	4299      	cmp	r1, r3
 8002bcc:	d004      	beq.n	8002bd8 <cleanup_stdio+0x30>
 8002bce:	4620      	mov	r0, r4
 8002bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd4:	f000 bb90 	b.w	80032f8 <_fflush_r>
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	bf00      	nop
 8002bdc:	20012db4 	.word	0x20012db4
 8002be0:	20012e1c 	.word	0x20012e1c
 8002be4:	20012e84 	.word	0x20012e84

08002be8 <global_stdio_init.part.0>:
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <global_stdio_init.part.0+0x30>)
 8002bec:	4c0b      	ldr	r4, [pc, #44]	@ (8002c1c <global_stdio_init.part.0+0x34>)
 8002bee:	4a0c      	ldr	r2, [pc, #48]	@ (8002c20 <global_stdio_init.part.0+0x38>)
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	f7ff ff94 	bl	8002b24 <std>
 8002bfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c00:	2201      	movs	r2, #1
 8002c02:	2109      	movs	r1, #9
 8002c04:	f7ff ff8e 	bl	8002b24 <std>
 8002c08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c12:	2112      	movs	r1, #18
 8002c14:	f7ff bf86 	b.w	8002b24 <std>
 8002c18:	20012eec 	.word	0x20012eec
 8002c1c:	20012db4 	.word	0x20012db4
 8002c20:	08002b91 	.word	0x08002b91

08002c24 <__sfp_lock_acquire>:
 8002c24:	4801      	ldr	r0, [pc, #4]	@ (8002c2c <__sfp_lock_acquire+0x8>)
 8002c26:	f000 b9e8 	b.w	8002ffa <__retarget_lock_acquire_recursive>
 8002c2a:	bf00      	nop
 8002c2c:	20012ef5 	.word	0x20012ef5

08002c30 <__sfp_lock_release>:
 8002c30:	4801      	ldr	r0, [pc, #4]	@ (8002c38 <__sfp_lock_release+0x8>)
 8002c32:	f000 b9e3 	b.w	8002ffc <__retarget_lock_release_recursive>
 8002c36:	bf00      	nop
 8002c38:	20012ef5 	.word	0x20012ef5

08002c3c <__sinit>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	4604      	mov	r4, r0
 8002c40:	f7ff fff0 	bl	8002c24 <__sfp_lock_acquire>
 8002c44:	6a23      	ldr	r3, [r4, #32]
 8002c46:	b11b      	cbz	r3, 8002c50 <__sinit+0x14>
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4c:	f7ff bff0 	b.w	8002c30 <__sfp_lock_release>
 8002c50:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <__sinit+0x28>)
 8002c52:	6223      	str	r3, [r4, #32]
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <__sinit+0x2c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f5      	bne.n	8002c48 <__sinit+0xc>
 8002c5c:	f7ff ffc4 	bl	8002be8 <global_stdio_init.part.0>
 8002c60:	e7f2      	b.n	8002c48 <__sinit+0xc>
 8002c62:	bf00      	nop
 8002c64:	08002ba9 	.word	0x08002ba9
 8002c68:	20012eec 	.word	0x20012eec

08002c6c <_fwalk_sglue>:
 8002c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c70:	4607      	mov	r7, r0
 8002c72:	4688      	mov	r8, r1
 8002c74:	4614      	mov	r4, r2
 8002c76:	2600      	movs	r6, #0
 8002c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8002c80:	d505      	bpl.n	8002c8e <_fwalk_sglue+0x22>
 8002c82:	6824      	ldr	r4, [r4, #0]
 8002c84:	2c00      	cmp	r4, #0
 8002c86:	d1f7      	bne.n	8002c78 <_fwalk_sglue+0xc>
 8002c88:	4630      	mov	r0, r6
 8002c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c8e:	89ab      	ldrh	r3, [r5, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d907      	bls.n	8002ca4 <_fwalk_sglue+0x38>
 8002c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	d003      	beq.n	8002ca4 <_fwalk_sglue+0x38>
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	47c0      	blx	r8
 8002ca2:	4306      	orrs	r6, r0
 8002ca4:	3568      	adds	r5, #104	@ 0x68
 8002ca6:	e7e9      	b.n	8002c7c <_fwalk_sglue+0x10>

08002ca8 <_puts_r>:
 8002ca8:	6a03      	ldr	r3, [r0, #32]
 8002caa:	b570      	push	{r4, r5, r6, lr}
 8002cac:	6884      	ldr	r4, [r0, #8]
 8002cae:	4605      	mov	r5, r0
 8002cb0:	460e      	mov	r6, r1
 8002cb2:	b90b      	cbnz	r3, 8002cb8 <_puts_r+0x10>
 8002cb4:	f7ff ffc2 	bl	8002c3c <__sinit>
 8002cb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cba:	07db      	lsls	r3, r3, #31
 8002cbc:	d405      	bmi.n	8002cca <_puts_r+0x22>
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	0598      	lsls	r0, r3, #22
 8002cc2:	d402      	bmi.n	8002cca <_puts_r+0x22>
 8002cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cc6:	f000 f998 	bl	8002ffa <__retarget_lock_acquire_recursive>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	0719      	lsls	r1, r3, #28
 8002cce:	d502      	bpl.n	8002cd6 <_puts_r+0x2e>
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d135      	bne.n	8002d42 <_puts_r+0x9a>
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f000 f8c5 	bl	8002e68 <__swsetup_r>
 8002cde:	b380      	cbz	r0, 8002d42 <_puts_r+0x9a>
 8002ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ce6:	07da      	lsls	r2, r3, #31
 8002ce8:	d405      	bmi.n	8002cf6 <_puts_r+0x4e>
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	059b      	lsls	r3, r3, #22
 8002cee:	d402      	bmi.n	8002cf6 <_puts_r+0x4e>
 8002cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cf2:	f000 f983 	bl	8002ffc <__retarget_lock_release_recursive>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da04      	bge.n	8002d08 <_puts_r+0x60>
 8002cfe:	69a2      	ldr	r2, [r4, #24]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dc17      	bgt.n	8002d34 <_puts_r+0x8c>
 8002d04:	290a      	cmp	r1, #10
 8002d06:	d015      	beq.n	8002d34 <_puts_r+0x8c>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	6022      	str	r2, [r4, #0]
 8002d0e:	7019      	strb	r1, [r3, #0]
 8002d10:	68a3      	ldr	r3, [r4, #8]
 8002d12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	d1ed      	bne.n	8002cfa <_puts_r+0x52>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	da11      	bge.n	8002d46 <_puts_r+0x9e>
 8002d22:	4622      	mov	r2, r4
 8002d24:	210a      	movs	r1, #10
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 f85f 	bl	8002dea <__swbuf_r>
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	d0d7      	beq.n	8002ce0 <_puts_r+0x38>
 8002d30:	250a      	movs	r5, #10
 8002d32:	e7d7      	b.n	8002ce4 <_puts_r+0x3c>
 8002d34:	4622      	mov	r2, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f857 	bl	8002dea <__swbuf_r>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d1e7      	bne.n	8002d10 <_puts_r+0x68>
 8002d40:	e7ce      	b.n	8002ce0 <_puts_r+0x38>
 8002d42:	3e01      	subs	r6, #1
 8002d44:	e7e4      	b.n	8002d10 <_puts_r+0x68>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	6022      	str	r2, [r4, #0]
 8002d4c:	220a      	movs	r2, #10
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e7ee      	b.n	8002d30 <_puts_r+0x88>
	...

08002d54 <puts>:
 8002d54:	4b02      	ldr	r3, [pc, #8]	@ (8002d60 <puts+0xc>)
 8002d56:	4601      	mov	r1, r0
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	f7ff bfa5 	b.w	8002ca8 <_puts_r>
 8002d5e:	bf00      	nop
 8002d60:	2000001c 	.word	0x2000001c

08002d64 <__sread>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	460c      	mov	r4, r1
 8002d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6c:	f000 f8fc 	bl	8002f68 <_read_r>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	bfab      	itete	ge
 8002d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d76:	89a3      	ldrhlt	r3, [r4, #12]
 8002d78:	181b      	addge	r3, r3, r0
 8002d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d7e:	bfac      	ite	ge
 8002d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d82:	81a3      	strhlt	r3, [r4, #12]
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <__swrite>:
 8002d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d8a:	461f      	mov	r7, r3
 8002d8c:	898b      	ldrh	r3, [r1, #12]
 8002d8e:	05db      	lsls	r3, r3, #23
 8002d90:	4605      	mov	r5, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	4616      	mov	r6, r2
 8002d96:	d505      	bpl.n	8002da4 <__swrite+0x1e>
 8002d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f000 f8d0 	bl	8002f44 <_lseek_r>
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dae:	81a3      	strh	r3, [r4, #12]
 8002db0:	4632      	mov	r2, r6
 8002db2:	463b      	mov	r3, r7
 8002db4:	4628      	mov	r0, r5
 8002db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dba:	f000 b8e7 	b.w	8002f8c <_write_r>

08002dbe <__sseek>:
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc6:	f000 f8bd 	bl	8002f44 <_lseek_r>
 8002dca:	1c43      	adds	r3, r0, #1
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	bf15      	itete	ne
 8002dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002dda:	81a3      	strheq	r3, [r4, #12]
 8002ddc:	bf18      	it	ne
 8002dde:	81a3      	strhne	r3, [r4, #12]
 8002de0:	bd10      	pop	{r4, pc}

08002de2 <__sclose>:
 8002de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de6:	f000 b89d 	b.w	8002f24 <_close_r>

08002dea <__swbuf_r>:
 8002dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dec:	460e      	mov	r6, r1
 8002dee:	4614      	mov	r4, r2
 8002df0:	4605      	mov	r5, r0
 8002df2:	b118      	cbz	r0, 8002dfc <__swbuf_r+0x12>
 8002df4:	6a03      	ldr	r3, [r0, #32]
 8002df6:	b90b      	cbnz	r3, 8002dfc <__swbuf_r+0x12>
 8002df8:	f7ff ff20 	bl	8002c3c <__sinit>
 8002dfc:	69a3      	ldr	r3, [r4, #24]
 8002dfe:	60a3      	str	r3, [r4, #8]
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	071a      	lsls	r2, r3, #28
 8002e04:	d501      	bpl.n	8002e0a <__swbuf_r+0x20>
 8002e06:	6923      	ldr	r3, [r4, #16]
 8002e08:	b943      	cbnz	r3, 8002e1c <__swbuf_r+0x32>
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f000 f82b 	bl	8002e68 <__swsetup_r>
 8002e12:	b118      	cbz	r0, 8002e1c <__swbuf_r+0x32>
 8002e14:	f04f 37ff 	mov.w	r7, #4294967295
 8002e18:	4638      	mov	r0, r7
 8002e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	6922      	ldr	r2, [r4, #16]
 8002e20:	1a98      	subs	r0, r3, r2
 8002e22:	6963      	ldr	r3, [r4, #20]
 8002e24:	b2f6      	uxtb	r6, r6
 8002e26:	4283      	cmp	r3, r0
 8002e28:	4637      	mov	r7, r6
 8002e2a:	dc05      	bgt.n	8002e38 <__swbuf_r+0x4e>
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f000 fa62 	bl	80032f8 <_fflush_r>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d1ed      	bne.n	8002e14 <__swbuf_r+0x2a>
 8002e38:	68a3      	ldr	r3, [r4, #8]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	60a3      	str	r3, [r4, #8]
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	6022      	str	r2, [r4, #0]
 8002e44:	701e      	strb	r6, [r3, #0]
 8002e46:	6962      	ldr	r2, [r4, #20]
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d004      	beq.n	8002e58 <__swbuf_r+0x6e>
 8002e4e:	89a3      	ldrh	r3, [r4, #12]
 8002e50:	07db      	lsls	r3, r3, #31
 8002e52:	d5e1      	bpl.n	8002e18 <__swbuf_r+0x2e>
 8002e54:	2e0a      	cmp	r6, #10
 8002e56:	d1df      	bne.n	8002e18 <__swbuf_r+0x2e>
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 fa4c 	bl	80032f8 <_fflush_r>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d0d9      	beq.n	8002e18 <__swbuf_r+0x2e>
 8002e64:	e7d6      	b.n	8002e14 <__swbuf_r+0x2a>
	...

08002e68 <__swsetup_r>:
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <__swsetup_r+0xa8>)
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	460c      	mov	r4, r1
 8002e72:	b118      	cbz	r0, 8002e7c <__swsetup_r+0x14>
 8002e74:	6a03      	ldr	r3, [r0, #32]
 8002e76:	b90b      	cbnz	r3, 8002e7c <__swsetup_r+0x14>
 8002e78:	f7ff fee0 	bl	8002c3c <__sinit>
 8002e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e80:	0719      	lsls	r1, r3, #28
 8002e82:	d422      	bmi.n	8002eca <__swsetup_r+0x62>
 8002e84:	06da      	lsls	r2, r3, #27
 8002e86:	d407      	bmi.n	8002e98 <__swsetup_r+0x30>
 8002e88:	2209      	movs	r2, #9
 8002e8a:	602a      	str	r2, [r5, #0]
 8002e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	e033      	b.n	8002f00 <__swsetup_r+0x98>
 8002e98:	0758      	lsls	r0, r3, #29
 8002e9a:	d512      	bpl.n	8002ec2 <__swsetup_r+0x5a>
 8002e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e9e:	b141      	cbz	r1, 8002eb2 <__swsetup_r+0x4a>
 8002ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ea4:	4299      	cmp	r1, r3
 8002ea6:	d002      	beq.n	8002eae <__swsetup_r+0x46>
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	f000 f8a9 	bl	8003000 <_free_r>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002eb8:	81a3      	strh	r3, [r4, #12]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6063      	str	r3, [r4, #4]
 8002ebe:	6923      	ldr	r3, [r4, #16]
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	81a3      	strh	r3, [r4, #12]
 8002eca:	6923      	ldr	r3, [r4, #16]
 8002ecc:	b94b      	cbnz	r3, 8002ee2 <__swsetup_r+0x7a>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed8:	d003      	beq.n	8002ee2 <__swsetup_r+0x7a>
 8002eda:	4621      	mov	r1, r4
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 fa59 	bl	8003394 <__smakebuf_r>
 8002ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee6:	f013 0201 	ands.w	r2, r3, #1
 8002eea:	d00a      	beq.n	8002f02 <__swsetup_r+0x9a>
 8002eec:	2200      	movs	r2, #0
 8002eee:	60a2      	str	r2, [r4, #8]
 8002ef0:	6962      	ldr	r2, [r4, #20]
 8002ef2:	4252      	negs	r2, r2
 8002ef4:	61a2      	str	r2, [r4, #24]
 8002ef6:	6922      	ldr	r2, [r4, #16]
 8002ef8:	b942      	cbnz	r2, 8002f0c <__swsetup_r+0xa4>
 8002efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002efe:	d1c5      	bne.n	8002e8c <__swsetup_r+0x24>
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
 8002f02:	0799      	lsls	r1, r3, #30
 8002f04:	bf58      	it	pl
 8002f06:	6962      	ldrpl	r2, [r4, #20]
 8002f08:	60a2      	str	r2, [r4, #8]
 8002f0a:	e7f4      	b.n	8002ef6 <__swsetup_r+0x8e>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e7f7      	b.n	8002f00 <__swsetup_r+0x98>
 8002f10:	2000001c 	.word	0x2000001c

08002f14 <memset>:
 8002f14:	4402      	add	r2, r0
 8002f16:	4603      	mov	r3, r0
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <memset+0xa>
 8002f1c:	4770      	bx	lr
 8002f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f22:	e7f9      	b.n	8002f18 <memset+0x4>

08002f24 <_close_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4d06      	ldr	r5, [pc, #24]	@ (8002f40 <_close_r+0x1c>)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	f7fd fb25 	bl	800057e <_close>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d102      	bne.n	8002f3e <_close_r+0x1a>
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	b103      	cbz	r3, 8002f3e <_close_r+0x1a>
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	bd38      	pop	{r3, r4, r5, pc}
 8002f40:	20012ef0 	.word	0x20012ef0

08002f44 <_lseek_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4d07      	ldr	r5, [pc, #28]	@ (8002f64 <_lseek_r+0x20>)
 8002f48:	4604      	mov	r4, r0
 8002f4a:	4608      	mov	r0, r1
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	602a      	str	r2, [r5, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f7fd fb3a 	bl	80005cc <_lseek>
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	d102      	bne.n	8002f62 <_lseek_r+0x1e>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	b103      	cbz	r3, 8002f62 <_lseek_r+0x1e>
 8002f60:	6023      	str	r3, [r4, #0]
 8002f62:	bd38      	pop	{r3, r4, r5, pc}
 8002f64:	20012ef0 	.word	0x20012ef0

08002f68 <_read_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4d07      	ldr	r5, [pc, #28]	@ (8002f88 <_read_r+0x20>)
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	4608      	mov	r0, r1
 8002f70:	4611      	mov	r1, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	602a      	str	r2, [r5, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f7fd fac8 	bl	800050c <_read>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d102      	bne.n	8002f86 <_read_r+0x1e>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b103      	cbz	r3, 8002f86 <_read_r+0x1e>
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	20012ef0 	.word	0x20012ef0

08002f8c <_write_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4d07      	ldr	r5, [pc, #28]	@ (8002fac <_write_r+0x20>)
 8002f90:	4604      	mov	r4, r0
 8002f92:	4608      	mov	r0, r1
 8002f94:	4611      	mov	r1, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	602a      	str	r2, [r5, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7fd fad3 	bl	8000546 <_write>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d102      	bne.n	8002faa <_write_r+0x1e>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	b103      	cbz	r3, 8002faa <_write_r+0x1e>
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	20012ef0 	.word	0x20012ef0

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8002fe8 <__libc_init_array+0x38>)
 8002fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8002fec <__libc_init_array+0x3c>)
 8002fb6:	1b64      	subs	r4, r4, r5
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	2600      	movs	r6, #0
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ff0 <__libc_init_array+0x40>)
 8002fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ff4 <__libc_init_array+0x44>)
 8002fc4:	f000 fa62 	bl	800348c <_init>
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	2600      	movs	r6, #0
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003528 	.word	0x08003528
 8002fec:	08003528 	.word	0x08003528
 8002ff0:	08003528 	.word	0x08003528
 8002ff4:	0800352c 	.word	0x0800352c

08002ff8 <__retarget_lock_init_recursive>:
 8002ff8:	4770      	bx	lr

08002ffa <__retarget_lock_acquire_recursive>:
 8002ffa:	4770      	bx	lr

08002ffc <__retarget_lock_release_recursive>:
 8002ffc:	4770      	bx	lr
	...

08003000 <_free_r>:
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	4605      	mov	r5, r0
 8003004:	2900      	cmp	r1, #0
 8003006:	d041      	beq.n	800308c <_free_r+0x8c>
 8003008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800300c:	1f0c      	subs	r4, r1, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	bfb8      	it	lt
 8003012:	18e4      	addlt	r4, r4, r3
 8003014:	f000 f8e0 	bl	80031d8 <__malloc_lock>
 8003018:	4a1d      	ldr	r2, [pc, #116]	@ (8003090 <_free_r+0x90>)
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	b933      	cbnz	r3, 800302c <_free_r+0x2c>
 800301e:	6063      	str	r3, [r4, #4]
 8003020:	6014      	str	r4, [r2, #0]
 8003022:	4628      	mov	r0, r5
 8003024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003028:	f000 b8dc 	b.w	80031e4 <__malloc_unlock>
 800302c:	42a3      	cmp	r3, r4
 800302e:	d908      	bls.n	8003042 <_free_r+0x42>
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	1821      	adds	r1, r4, r0
 8003034:	428b      	cmp	r3, r1
 8003036:	bf01      	itttt	eq
 8003038:	6819      	ldreq	r1, [r3, #0]
 800303a:	685b      	ldreq	r3, [r3, #4]
 800303c:	1809      	addeq	r1, r1, r0
 800303e:	6021      	streq	r1, [r4, #0]
 8003040:	e7ed      	b.n	800301e <_free_r+0x1e>
 8003042:	461a      	mov	r2, r3
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b10b      	cbz	r3, 800304c <_free_r+0x4c>
 8003048:	42a3      	cmp	r3, r4
 800304a:	d9fa      	bls.n	8003042 <_free_r+0x42>
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	1850      	adds	r0, r2, r1
 8003050:	42a0      	cmp	r0, r4
 8003052:	d10b      	bne.n	800306c <_free_r+0x6c>
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	4401      	add	r1, r0
 8003058:	1850      	adds	r0, r2, r1
 800305a:	4283      	cmp	r3, r0
 800305c:	6011      	str	r1, [r2, #0]
 800305e:	d1e0      	bne.n	8003022 <_free_r+0x22>
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	6053      	str	r3, [r2, #4]
 8003066:	4408      	add	r0, r1
 8003068:	6010      	str	r0, [r2, #0]
 800306a:	e7da      	b.n	8003022 <_free_r+0x22>
 800306c:	d902      	bls.n	8003074 <_free_r+0x74>
 800306e:	230c      	movs	r3, #12
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	e7d6      	b.n	8003022 <_free_r+0x22>
 8003074:	6820      	ldr	r0, [r4, #0]
 8003076:	1821      	adds	r1, r4, r0
 8003078:	428b      	cmp	r3, r1
 800307a:	bf04      	itt	eq
 800307c:	6819      	ldreq	r1, [r3, #0]
 800307e:	685b      	ldreq	r3, [r3, #4]
 8003080:	6063      	str	r3, [r4, #4]
 8003082:	bf04      	itt	eq
 8003084:	1809      	addeq	r1, r1, r0
 8003086:	6021      	streq	r1, [r4, #0]
 8003088:	6054      	str	r4, [r2, #4]
 800308a:	e7ca      	b.n	8003022 <_free_r+0x22>
 800308c:	bd38      	pop	{r3, r4, r5, pc}
 800308e:	bf00      	nop
 8003090:	20012efc 	.word	0x20012efc

08003094 <sbrk_aligned>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	4e0f      	ldr	r6, [pc, #60]	@ (80030d4 <sbrk_aligned+0x40>)
 8003098:	460c      	mov	r4, r1
 800309a:	6831      	ldr	r1, [r6, #0]
 800309c:	4605      	mov	r5, r0
 800309e:	b911      	cbnz	r1, 80030a6 <sbrk_aligned+0x12>
 80030a0:	f000 f9d6 	bl	8003450 <_sbrk_r>
 80030a4:	6030      	str	r0, [r6, #0]
 80030a6:	4621      	mov	r1, r4
 80030a8:	4628      	mov	r0, r5
 80030aa:	f000 f9d1 	bl	8003450 <_sbrk_r>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d103      	bne.n	80030ba <sbrk_aligned+0x26>
 80030b2:	f04f 34ff 	mov.w	r4, #4294967295
 80030b6:	4620      	mov	r0, r4
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	1cc4      	adds	r4, r0, #3
 80030bc:	f024 0403 	bic.w	r4, r4, #3
 80030c0:	42a0      	cmp	r0, r4
 80030c2:	d0f8      	beq.n	80030b6 <sbrk_aligned+0x22>
 80030c4:	1a21      	subs	r1, r4, r0
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f9c2 	bl	8003450 <_sbrk_r>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d1f2      	bne.n	80030b6 <sbrk_aligned+0x22>
 80030d0:	e7ef      	b.n	80030b2 <sbrk_aligned+0x1e>
 80030d2:	bf00      	nop
 80030d4:	20012ef8 	.word	0x20012ef8

080030d8 <_malloc_r>:
 80030d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030dc:	1ccd      	adds	r5, r1, #3
 80030de:	f025 0503 	bic.w	r5, r5, #3
 80030e2:	3508      	adds	r5, #8
 80030e4:	2d0c      	cmp	r5, #12
 80030e6:	bf38      	it	cc
 80030e8:	250c      	movcc	r5, #12
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	4606      	mov	r6, r0
 80030ee:	db01      	blt.n	80030f4 <_malloc_r+0x1c>
 80030f0:	42a9      	cmp	r1, r5
 80030f2:	d904      	bls.n	80030fe <_malloc_r+0x26>
 80030f4:	230c      	movs	r3, #12
 80030f6:	6033      	str	r3, [r6, #0]
 80030f8:	2000      	movs	r0, #0
 80030fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031d4 <_malloc_r+0xfc>
 8003102:	f000 f869 	bl	80031d8 <__malloc_lock>
 8003106:	f8d8 3000 	ldr.w	r3, [r8]
 800310a:	461c      	mov	r4, r3
 800310c:	bb44      	cbnz	r4, 8003160 <_malloc_r+0x88>
 800310e:	4629      	mov	r1, r5
 8003110:	4630      	mov	r0, r6
 8003112:	f7ff ffbf 	bl	8003094 <sbrk_aligned>
 8003116:	1c43      	adds	r3, r0, #1
 8003118:	4604      	mov	r4, r0
 800311a:	d158      	bne.n	80031ce <_malloc_r+0xf6>
 800311c:	f8d8 4000 	ldr.w	r4, [r8]
 8003120:	4627      	mov	r7, r4
 8003122:	2f00      	cmp	r7, #0
 8003124:	d143      	bne.n	80031ae <_malloc_r+0xd6>
 8003126:	2c00      	cmp	r4, #0
 8003128:	d04b      	beq.n	80031c2 <_malloc_r+0xea>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	4639      	mov	r1, r7
 800312e:	4630      	mov	r0, r6
 8003130:	eb04 0903 	add.w	r9, r4, r3
 8003134:	f000 f98c 	bl	8003450 <_sbrk_r>
 8003138:	4581      	cmp	r9, r0
 800313a:	d142      	bne.n	80031c2 <_malloc_r+0xea>
 800313c:	6821      	ldr	r1, [r4, #0]
 800313e:	1a6d      	subs	r5, r5, r1
 8003140:	4629      	mov	r1, r5
 8003142:	4630      	mov	r0, r6
 8003144:	f7ff ffa6 	bl	8003094 <sbrk_aligned>
 8003148:	3001      	adds	r0, #1
 800314a:	d03a      	beq.n	80031c2 <_malloc_r+0xea>
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	442b      	add	r3, r5
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	f8d8 3000 	ldr.w	r3, [r8]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	bb62      	cbnz	r2, 80031b4 <_malloc_r+0xdc>
 800315a:	f8c8 7000 	str.w	r7, [r8]
 800315e:	e00f      	b.n	8003180 <_malloc_r+0xa8>
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	1b52      	subs	r2, r2, r5
 8003164:	d420      	bmi.n	80031a8 <_malloc_r+0xd0>
 8003166:	2a0b      	cmp	r2, #11
 8003168:	d917      	bls.n	800319a <_malloc_r+0xc2>
 800316a:	1961      	adds	r1, r4, r5
 800316c:	42a3      	cmp	r3, r4
 800316e:	6025      	str	r5, [r4, #0]
 8003170:	bf18      	it	ne
 8003172:	6059      	strne	r1, [r3, #4]
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	bf08      	it	eq
 8003178:	f8c8 1000 	streq.w	r1, [r8]
 800317c:	5162      	str	r2, [r4, r5]
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	4630      	mov	r0, r6
 8003182:	f000 f82f 	bl	80031e4 <__malloc_unlock>
 8003186:	f104 000b 	add.w	r0, r4, #11
 800318a:	1d23      	adds	r3, r4, #4
 800318c:	f020 0007 	bic.w	r0, r0, #7
 8003190:	1ac2      	subs	r2, r0, r3
 8003192:	bf1c      	itt	ne
 8003194:	1a1b      	subne	r3, r3, r0
 8003196:	50a3      	strne	r3, [r4, r2]
 8003198:	e7af      	b.n	80030fa <_malloc_r+0x22>
 800319a:	6862      	ldr	r2, [r4, #4]
 800319c:	42a3      	cmp	r3, r4
 800319e:	bf0c      	ite	eq
 80031a0:	f8c8 2000 	streq.w	r2, [r8]
 80031a4:	605a      	strne	r2, [r3, #4]
 80031a6:	e7eb      	b.n	8003180 <_malloc_r+0xa8>
 80031a8:	4623      	mov	r3, r4
 80031aa:	6864      	ldr	r4, [r4, #4]
 80031ac:	e7ae      	b.n	800310c <_malloc_r+0x34>
 80031ae:	463c      	mov	r4, r7
 80031b0:	687f      	ldr	r7, [r7, #4]
 80031b2:	e7b6      	b.n	8003122 <_malloc_r+0x4a>
 80031b4:	461a      	mov	r2, r3
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	d1fb      	bne.n	80031b4 <_malloc_r+0xdc>
 80031bc:	2300      	movs	r3, #0
 80031be:	6053      	str	r3, [r2, #4]
 80031c0:	e7de      	b.n	8003180 <_malloc_r+0xa8>
 80031c2:	230c      	movs	r3, #12
 80031c4:	6033      	str	r3, [r6, #0]
 80031c6:	4630      	mov	r0, r6
 80031c8:	f000 f80c 	bl	80031e4 <__malloc_unlock>
 80031cc:	e794      	b.n	80030f8 <_malloc_r+0x20>
 80031ce:	6005      	str	r5, [r0, #0]
 80031d0:	e7d6      	b.n	8003180 <_malloc_r+0xa8>
 80031d2:	bf00      	nop
 80031d4:	20012efc 	.word	0x20012efc

080031d8 <__malloc_lock>:
 80031d8:	4801      	ldr	r0, [pc, #4]	@ (80031e0 <__malloc_lock+0x8>)
 80031da:	f7ff bf0e 	b.w	8002ffa <__retarget_lock_acquire_recursive>
 80031de:	bf00      	nop
 80031e0:	20012ef4 	.word	0x20012ef4

080031e4 <__malloc_unlock>:
 80031e4:	4801      	ldr	r0, [pc, #4]	@ (80031ec <__malloc_unlock+0x8>)
 80031e6:	f7ff bf09 	b.w	8002ffc <__retarget_lock_release_recursive>
 80031ea:	bf00      	nop
 80031ec:	20012ef4 	.word	0x20012ef4

080031f0 <__sflush_r>:
 80031f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f8:	0716      	lsls	r6, r2, #28
 80031fa:	4605      	mov	r5, r0
 80031fc:	460c      	mov	r4, r1
 80031fe:	d454      	bmi.n	80032aa <__sflush_r+0xba>
 8003200:	684b      	ldr	r3, [r1, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dc02      	bgt.n	800320c <__sflush_r+0x1c>
 8003206:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	dd48      	ble.n	800329e <__sflush_r+0xae>
 800320c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800320e:	2e00      	cmp	r6, #0
 8003210:	d045      	beq.n	800329e <__sflush_r+0xae>
 8003212:	2300      	movs	r3, #0
 8003214:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003218:	682f      	ldr	r7, [r5, #0]
 800321a:	6a21      	ldr	r1, [r4, #32]
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	d030      	beq.n	8003282 <__sflush_r+0x92>
 8003220:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	0759      	lsls	r1, r3, #29
 8003226:	d505      	bpl.n	8003234 <__sflush_r+0x44>
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	1ad2      	subs	r2, r2, r3
 800322c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800322e:	b10b      	cbz	r3, 8003234 <__sflush_r+0x44>
 8003230:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	2300      	movs	r3, #0
 8003236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003238:	6a21      	ldr	r1, [r4, #32]
 800323a:	4628      	mov	r0, r5
 800323c:	47b0      	blx	r6
 800323e:	1c43      	adds	r3, r0, #1
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	d106      	bne.n	8003252 <__sflush_r+0x62>
 8003244:	6829      	ldr	r1, [r5, #0]
 8003246:	291d      	cmp	r1, #29
 8003248:	d82b      	bhi.n	80032a2 <__sflush_r+0xb2>
 800324a:	4a2a      	ldr	r2, [pc, #168]	@ (80032f4 <__sflush_r+0x104>)
 800324c:	40ca      	lsrs	r2, r1
 800324e:	07d6      	lsls	r6, r2, #31
 8003250:	d527      	bpl.n	80032a2 <__sflush_r+0xb2>
 8003252:	2200      	movs	r2, #0
 8003254:	6062      	str	r2, [r4, #4]
 8003256:	04d9      	lsls	r1, r3, #19
 8003258:	6922      	ldr	r2, [r4, #16]
 800325a:	6022      	str	r2, [r4, #0]
 800325c:	d504      	bpl.n	8003268 <__sflush_r+0x78>
 800325e:	1c42      	adds	r2, r0, #1
 8003260:	d101      	bne.n	8003266 <__sflush_r+0x76>
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	b903      	cbnz	r3, 8003268 <__sflush_r+0x78>
 8003266:	6560      	str	r0, [r4, #84]	@ 0x54
 8003268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800326a:	602f      	str	r7, [r5, #0]
 800326c:	b1b9      	cbz	r1, 800329e <__sflush_r+0xae>
 800326e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003272:	4299      	cmp	r1, r3
 8003274:	d002      	beq.n	800327c <__sflush_r+0x8c>
 8003276:	4628      	mov	r0, r5
 8003278:	f7ff fec2 	bl	8003000 <_free_r>
 800327c:	2300      	movs	r3, #0
 800327e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003280:	e00d      	b.n	800329e <__sflush_r+0xae>
 8003282:	2301      	movs	r3, #1
 8003284:	4628      	mov	r0, r5
 8003286:	47b0      	blx	r6
 8003288:	4602      	mov	r2, r0
 800328a:	1c50      	adds	r0, r2, #1
 800328c:	d1c9      	bne.n	8003222 <__sflush_r+0x32>
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0c6      	beq.n	8003222 <__sflush_r+0x32>
 8003294:	2b1d      	cmp	r3, #29
 8003296:	d001      	beq.n	800329c <__sflush_r+0xac>
 8003298:	2b16      	cmp	r3, #22
 800329a:	d11e      	bne.n	80032da <__sflush_r+0xea>
 800329c:	602f      	str	r7, [r5, #0]
 800329e:	2000      	movs	r0, #0
 80032a0:	e022      	b.n	80032e8 <__sflush_r+0xf8>
 80032a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	e01b      	b.n	80032e2 <__sflush_r+0xf2>
 80032aa:	690f      	ldr	r7, [r1, #16]
 80032ac:	2f00      	cmp	r7, #0
 80032ae:	d0f6      	beq.n	800329e <__sflush_r+0xae>
 80032b0:	0793      	lsls	r3, r2, #30
 80032b2:	680e      	ldr	r6, [r1, #0]
 80032b4:	bf08      	it	eq
 80032b6:	694b      	ldreq	r3, [r1, #20]
 80032b8:	600f      	str	r7, [r1, #0]
 80032ba:	bf18      	it	ne
 80032bc:	2300      	movne	r3, #0
 80032be:	eba6 0807 	sub.w	r8, r6, r7
 80032c2:	608b      	str	r3, [r1, #8]
 80032c4:	f1b8 0f00 	cmp.w	r8, #0
 80032c8:	dde9      	ble.n	800329e <__sflush_r+0xae>
 80032ca:	6a21      	ldr	r1, [r4, #32]
 80032cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80032ce:	4643      	mov	r3, r8
 80032d0:	463a      	mov	r2, r7
 80032d2:	4628      	mov	r0, r5
 80032d4:	47b0      	blx	r6
 80032d6:	2800      	cmp	r0, #0
 80032d8:	dc08      	bgt.n	80032ec <__sflush_r+0xfc>
 80032da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032ec:	4407      	add	r7, r0
 80032ee:	eba8 0800 	sub.w	r8, r8, r0
 80032f2:	e7e7      	b.n	80032c4 <__sflush_r+0xd4>
 80032f4:	20400001 	.word	0x20400001

080032f8 <_fflush_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	690b      	ldr	r3, [r1, #16]
 80032fc:	4605      	mov	r5, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	b913      	cbnz	r3, 8003308 <_fflush_r+0x10>
 8003302:	2500      	movs	r5, #0
 8003304:	4628      	mov	r0, r5
 8003306:	bd38      	pop	{r3, r4, r5, pc}
 8003308:	b118      	cbz	r0, 8003312 <_fflush_r+0x1a>
 800330a:	6a03      	ldr	r3, [r0, #32]
 800330c:	b90b      	cbnz	r3, 8003312 <_fflush_r+0x1a>
 800330e:	f7ff fc95 	bl	8002c3c <__sinit>
 8003312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f3      	beq.n	8003302 <_fflush_r+0xa>
 800331a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800331c:	07d0      	lsls	r0, r2, #31
 800331e:	d404      	bmi.n	800332a <_fflush_r+0x32>
 8003320:	0599      	lsls	r1, r3, #22
 8003322:	d402      	bmi.n	800332a <_fflush_r+0x32>
 8003324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003326:	f7ff fe68 	bl	8002ffa <__retarget_lock_acquire_recursive>
 800332a:	4628      	mov	r0, r5
 800332c:	4621      	mov	r1, r4
 800332e:	f7ff ff5f 	bl	80031f0 <__sflush_r>
 8003332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003334:	07da      	lsls	r2, r3, #31
 8003336:	4605      	mov	r5, r0
 8003338:	d4e4      	bmi.n	8003304 <_fflush_r+0xc>
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	059b      	lsls	r3, r3, #22
 800333e:	d4e1      	bmi.n	8003304 <_fflush_r+0xc>
 8003340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003342:	f7ff fe5b 	bl	8002ffc <__retarget_lock_release_recursive>
 8003346:	e7dd      	b.n	8003304 <_fflush_r+0xc>

08003348 <__swhatbuf_r>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	460c      	mov	r4, r1
 800334c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003350:	2900      	cmp	r1, #0
 8003352:	b096      	sub	sp, #88	@ 0x58
 8003354:	4615      	mov	r5, r2
 8003356:	461e      	mov	r6, r3
 8003358:	da0d      	bge.n	8003376 <__swhatbuf_r+0x2e>
 800335a:	89a3      	ldrh	r3, [r4, #12]
 800335c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	bf14      	ite	ne
 8003366:	2340      	movne	r3, #64	@ 0x40
 8003368:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800336c:	2000      	movs	r0, #0
 800336e:	6031      	str	r1, [r6, #0]
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	b016      	add	sp, #88	@ 0x58
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	466a      	mov	r2, sp
 8003378:	f000 f848 	bl	800340c <_fstat_r>
 800337c:	2800      	cmp	r0, #0
 800337e:	dbec      	blt.n	800335a <__swhatbuf_r+0x12>
 8003380:	9901      	ldr	r1, [sp, #4]
 8003382:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003386:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800338a:	4259      	negs	r1, r3
 800338c:	4159      	adcs	r1, r3
 800338e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003392:	e7eb      	b.n	800336c <__swhatbuf_r+0x24>

08003394 <__smakebuf_r>:
 8003394:	898b      	ldrh	r3, [r1, #12]
 8003396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003398:	079d      	lsls	r5, r3, #30
 800339a:	4606      	mov	r6, r0
 800339c:	460c      	mov	r4, r1
 800339e:	d507      	bpl.n	80033b0 <__smakebuf_r+0x1c>
 80033a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033a4:	6023      	str	r3, [r4, #0]
 80033a6:	6123      	str	r3, [r4, #16]
 80033a8:	2301      	movs	r3, #1
 80033aa:	6163      	str	r3, [r4, #20]
 80033ac:	b003      	add	sp, #12
 80033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b0:	ab01      	add	r3, sp, #4
 80033b2:	466a      	mov	r2, sp
 80033b4:	f7ff ffc8 	bl	8003348 <__swhatbuf_r>
 80033b8:	9f00      	ldr	r7, [sp, #0]
 80033ba:	4605      	mov	r5, r0
 80033bc:	4639      	mov	r1, r7
 80033be:	4630      	mov	r0, r6
 80033c0:	f7ff fe8a 	bl	80030d8 <_malloc_r>
 80033c4:	b948      	cbnz	r0, 80033da <__smakebuf_r+0x46>
 80033c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ca:	059a      	lsls	r2, r3, #22
 80033cc:	d4ee      	bmi.n	80033ac <__smakebuf_r+0x18>
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	e7e2      	b.n	80033a0 <__smakebuf_r+0xc>
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	6020      	str	r0, [r4, #0]
 80033de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e2:	81a3      	strh	r3, [r4, #12]
 80033e4:	9b01      	ldr	r3, [sp, #4]
 80033e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033ea:	b15b      	cbz	r3, 8003404 <__smakebuf_r+0x70>
 80033ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 f81d 	bl	8003430 <_isatty_r>
 80033f6:	b128      	cbz	r0, 8003404 <__smakebuf_r+0x70>
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	81a3      	strh	r3, [r4, #12]
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	431d      	orrs	r5, r3
 8003408:	81a5      	strh	r5, [r4, #12]
 800340a:	e7cf      	b.n	80033ac <__smakebuf_r+0x18>

0800340c <_fstat_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4d07      	ldr	r5, [pc, #28]	@ (800342c <_fstat_r+0x20>)
 8003410:	2300      	movs	r3, #0
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	f7fd f8bc 	bl	8000596 <_fstat>
 800341e:	1c43      	adds	r3, r0, #1
 8003420:	d102      	bne.n	8003428 <_fstat_r+0x1c>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	b103      	cbz	r3, 8003428 <_fstat_r+0x1c>
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	bd38      	pop	{r3, r4, r5, pc}
 800342a:	bf00      	nop
 800342c:	20012ef0 	.word	0x20012ef0

08003430 <_isatty_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4d06      	ldr	r5, [pc, #24]	@ (800344c <_isatty_r+0x1c>)
 8003434:	2300      	movs	r3, #0
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	f7fd f8bb 	bl	80005b6 <_isatty>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_isatty_r+0x1a>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_isatty_r+0x1a>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	20012ef0 	.word	0x20012ef0

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4d06      	ldr	r5, [pc, #24]	@ (800346c <_sbrk_r+0x1c>)
 8003454:	2300      	movs	r3, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f000 f808 	bl	8003470 <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20012ef0 	.word	0x20012ef0

08003470 <_sbrk>:
 8003470:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <_sbrk+0x14>)
 8003472:	6811      	ldr	r1, [r2, #0]
 8003474:	4603      	mov	r3, r0
 8003476:	b909      	cbnz	r1, 800347c <_sbrk+0xc>
 8003478:	4903      	ldr	r1, [pc, #12]	@ (8003488 <_sbrk+0x18>)
 800347a:	6011      	str	r1, [r2, #0]
 800347c:	6810      	ldr	r0, [r2, #0]
 800347e:	4403      	add	r3, r0
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4770      	bx	lr
 8003484:	20012f00 	.word	0x20012f00
 8003488:	20012f08 	.word	0x20012f08

0800348c <_init>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr

08003498 <_fini>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	bf00      	nop
 800349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349e:	bc08      	pop	{r3}
 80034a0:	469e      	mov	lr, r3
 80034a2:	4770      	bx	lr
